"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    slateEditor: function() {
        return slateEditor;
    },
    ElementButton: function() {
        return _Button.default;
    },
    toggleElement: function() {
        return _toggle.default;
    },
    LeafButton: function() {
        return _Button1.default;
    },
    nodeIsTextNode: function() {
        return _types.nodeIsTextNode;
    }
});
const _utilities = require("payload/utilities");
const _cell = /*#__PURE__*/ _interop_require_default(require("./cell"));
const _richTextRelationshipPromise = require("./data/richTextRelationshipPromise");
const _validation = require("./data/validation");
const _field = /*#__PURE__*/ _interop_require_default(require("./field"));
const _Button = /*#__PURE__*/ _interop_require_default(require("./field/elements/Button"));
const _toggle = /*#__PURE__*/ _interop_require_default(require("./field/elements/toggle"));
const _Button1 = /*#__PURE__*/ _interop_require_default(require("./field/leaves/Button"));
const _types = require("./types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function slateEditor(args) {
    return {
        CellComponent: (0, _utilities.withMergedProps)({
            Component: _cell.default,
            toMergeIntoProps: args
        }),
        FieldComponent: (0, _utilities.withMergedProps)({
            Component: _field.default,
            toMergeIntoProps: args
        }),
        populationPromise ({ currentDepth, depth, field, overrideAccess, req, showHiddenFields, siblingDoc }) {
            if (field.admin?.elements?.includes('relationship') || field.admin?.elements?.includes('upload') || field.admin?.elements?.includes('link') || !field?.admin?.elements) {
                return (0, _richTextRelationshipPromise.richTextRelationshipPromise)({
                    currentDepth,
                    depth,
                    field,
                    overrideAccess,
                    req,
                    showHiddenFields,
                    siblingDoc
                });
            }
            return null;
        },
        validate: _validation.richTextValidate
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJpY2hUZXh0QWRhcHRlciB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IHdpdGhNZXJnZWRQcm9wcyB9IGZyb20gJ3BheWxvYWQvdXRpbGl0aWVzJ1xuXG5pbXBvcnQgdHlwZSB7IEFkYXB0ZXJBcmd1bWVudHMgfSBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQgUmljaFRleHRDZWxsIGZyb20gJy4vY2VsbCdcbmltcG9ydCB7IHJpY2hUZXh0UmVsYXRpb25zaGlwUHJvbWlzZSB9IGZyb20gJy4vZGF0YS9yaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2UnXG5pbXBvcnQgeyByaWNoVGV4dFZhbGlkYXRlIH0gZnJvbSAnLi9kYXRhL3ZhbGlkYXRpb24nXG5pbXBvcnQgUmljaFRleHRGaWVsZCBmcm9tICcuL2ZpZWxkJ1xuXG5leHBvcnQgZnVuY3Rpb24gc2xhdGVFZGl0b3IoXG4gIGFyZ3M6IEFkYXB0ZXJBcmd1bWVudHMsXG4pOiBSaWNoVGV4dEFkYXB0ZXI8YW55W10sIEFkYXB0ZXJBcmd1bWVudHMsIEFkYXB0ZXJBcmd1bWVudHM+IHtcbiAgcmV0dXJuIHtcbiAgICBDZWxsQ29tcG9uZW50OiB3aXRoTWVyZ2VkUHJvcHMoe1xuICAgICAgQ29tcG9uZW50OiBSaWNoVGV4dENlbGwsXG4gICAgICB0b01lcmdlSW50b1Byb3BzOiBhcmdzLFxuICAgIH0pLFxuICAgIEZpZWxkQ29tcG9uZW50OiB3aXRoTWVyZ2VkUHJvcHMoe1xuICAgICAgQ29tcG9uZW50OiBSaWNoVGV4dEZpZWxkLFxuICAgICAgdG9NZXJnZUludG9Qcm9wczogYXJncyxcbiAgICB9KSxcbiAgICBwb3B1bGF0aW9uUHJvbWlzZSh7XG4gICAgICBjdXJyZW50RGVwdGgsXG4gICAgICBkZXB0aCxcbiAgICAgIGZpZWxkLFxuICAgICAgb3ZlcnJpZGVBY2Nlc3MsXG4gICAgICByZXEsXG4gICAgICBzaG93SGlkZGVuRmllbGRzLFxuICAgICAgc2libGluZ0RvYyxcbiAgICB9KSB7XG4gICAgICBpZiAoXG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ3JlbGF0aW9uc2hpcCcpIHx8XG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ3VwbG9hZCcpIHx8XG4gICAgICAgIGZpZWxkLmFkbWluPy5lbGVtZW50cz8uaW5jbHVkZXMoJ2xpbmsnKSB8fFxuICAgICAgICAhZmllbGQ/LmFkbWluPy5lbGVtZW50c1xuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByaWNoVGV4dFJlbGF0aW9uc2hpcFByb21pc2Uoe1xuICAgICAgICAgIGN1cnJlbnREZXB0aCxcbiAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICByZXEsXG4gICAgICAgICAgc2hvd0hpZGRlbkZpZWxkcyxcbiAgICAgICAgICBzaWJsaW5nRG9jLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuICAgIHZhbGlkYXRlOiByaWNoVGV4dFZhbGlkYXRlLFxuICB9XG59XG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgRWxlbWVudEJ1dHRvbiB9IGZyb20gJy4vZmllbGQvZWxlbWVudHMvQnV0dG9uJ1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIHRvZ2dsZUVsZW1lbnQgfSBmcm9tICcuL2ZpZWxkL2VsZW1lbnRzL3RvZ2dsZSdcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTGVhZkJ1dHRvbiB9IGZyb20gJy4vZmllbGQvbGVhdmVzL0J1dHRvbidcbmV4cG9ydCB0eXBlIHtcbiAgQWRhcHRlckFyZ3VtZW50cyxcbiAgRWxlbWVudE5vZGUsXG4gIEZpZWxkUHJvcHMsXG4gIFJpY2hUZXh0Q3VzdG9tRWxlbWVudCxcbiAgUmljaFRleHRDdXN0b21MZWFmLFxuICBSaWNoVGV4dEVsZW1lbnQsXG4gIFJpY2hUZXh0TGVhZixcbiAgVGV4dE5vZGUsXG59IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCB7IG5vZGVJc1RleHROb2RlIH0gZnJvbSAnLi90eXBlcydcbiJdLCJuYW1lcyI6WyJzbGF0ZUVkaXRvciIsIkVsZW1lbnRCdXR0b24iLCJ0b2dnbGVFbGVtZW50IiwiTGVhZkJ1dHRvbiIsIm5vZGVJc1RleHROb2RlIiwiYXJncyIsIkNlbGxDb21wb25lbnQiLCJ3aXRoTWVyZ2VkUHJvcHMiLCJDb21wb25lbnQiLCJSaWNoVGV4dENlbGwiLCJ0b01lcmdlSW50b1Byb3BzIiwiRmllbGRDb21wb25lbnQiLCJSaWNoVGV4dEZpZWxkIiwicG9wdWxhdGlvblByb21pc2UiLCJjdXJyZW50RGVwdGgiLCJkZXB0aCIsImZpZWxkIiwib3ZlcnJpZGVBY2Nlc3MiLCJyZXEiLCJzaG93SGlkZGVuRmllbGRzIiwic2libGluZ0RvYyIsImFkbWluIiwiZWxlbWVudHMiLCJpbmNsdWRlcyIsInJpY2hUZXh0UmVsYXRpb25zaGlwUHJvbWlzZSIsInZhbGlkYXRlIiwicmljaFRleHRWYWxpZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFXZ0JBLFdBQVc7ZUFBWEE7O0lBMkNJQyxhQUFhO2VBQWJBLGVBQWE7O0lBRWJDLGFBQWE7ZUFBYkEsZUFBYTs7SUFDYkMsVUFBVTtlQUFWQSxnQkFBVTs7SUFZckJDLGNBQWM7ZUFBZEEscUJBQWM7OzsyQkFuRVM7NkRBSVA7NkNBQ21COzRCQUNYOzhEQUNQOytEQTZDZTsrREFFQTtnRUFDSDt1QkFZUDs7Ozs7O0FBMUR4QixTQUFTSixZQUNkSyxJQUFzQjtJQUV0QixPQUFPO1FBQ0xDLGVBQWVDLElBQUFBLDBCQUFlLEVBQUM7WUFDN0JDLFdBQVdDLGFBQVk7WUFDdkJDLGtCQUFrQkw7UUFDcEI7UUFDQU0sZ0JBQWdCSixJQUFBQSwwQkFBZSxFQUFDO1lBQzlCQyxXQUFXSSxjQUFhO1lBQ3hCRixrQkFBa0JMO1FBQ3BCO1FBQ0FRLG1CQUFrQixFQUNoQkMsWUFBWSxFQUNaQyxLQUFLLEVBQ0xDLEtBQUssRUFDTEMsY0FBYyxFQUNkQyxHQUFHLEVBQ0hDLGdCQUFnQixFQUNoQkMsVUFBVSxFQUNYO1lBQ0MsSUFDRUosTUFBTUssS0FBSyxFQUFFQyxVQUFVQyxTQUFTLG1CQUNoQ1AsTUFBTUssS0FBSyxFQUFFQyxVQUFVQyxTQUFTLGFBQ2hDUCxNQUFNSyxLQUFLLEVBQUVDLFVBQVVDLFNBQVMsV0FDaEMsQ0FBQ1AsT0FBT0ssT0FBT0MsVUFDZjtnQkFDQSxPQUFPRSxJQUFBQSx3REFBMkIsRUFBQztvQkFDakNWO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO2dCQUNGO1lBQ0Y7WUFDQSxPQUFPO1FBQ1Q7UUFDQUssVUFBVUMsNEJBQWdCO0lBQzVCO0FBQ0YifQ==