/* eslint-disable no-restricted-syntax, no-await-in-loop */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createMigration", {
    enumerable: true,
    get: function() {
        return createMigration;
    }
});
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const migrationTemplate = (upSQL, downSQL)=>`import {
  MigrateUpArgs,
  MigrateDownArgs,
} from "@payloadcms/db-mongodb";

export async function up({ payload }: MigrateUpArgs): Promise<void> {
${upSQL ?? `  // Migration code`}
};

export async function down({ payload }: MigrateDownArgs): Promise<void> {
${downSQL ?? `  // Migration code`}
};
`;
const createMigration = async function createMigration({ file, migrationName, payload }) {
    const dir = payload.db.migrationDir;
    if (!_fs.default.existsSync(dir)) {
        _fs.default.mkdirSync(dir);
    }
    let migrationFileContent;
    // Check for predefined migration
    if (file) {
        const predefinedMigrationName = file.replace('@payloadcms/db-mongodb/', '');
        migrationName = predefinedMigrationName;
        const cleanPath = _path.default.join(__dirname, `../predefinedMigrations/${predefinedMigrationName}.js`);
        // Check if predefined migration exists
        if (_fs.default.existsSync(cleanPath)) {
            const { down, up } = require(cleanPath);
            migrationFileContent = migrationTemplate(up, down);
        } else {
            payload.logger.error({
                msg: `Canned migration ${predefinedMigrationName} not found.`
            });
            process.exit(1);
        }
    } else {
        migrationFileContent = migrationTemplate();
    }
    const [yyymmdd, hhmmss] = new Date().toISOString().split('T');
    const formattedDate = yyymmdd.replace(/\D/g, '');
    const formattedTime = hhmmss.split('.')[0].replace(/\D/g, '');
    const timestamp = `${formattedDate}_${formattedTime}`;
    const formattedName = migrationName.replace(/\W/g, '_');
    const fileName = `${timestamp}_${formattedName}.ts`;
    const filePath = `${dir}/${fileName}`;
    _fs.default.writeFileSync(filePath, migrationFileContent);
    payload.logger.info({
        msg: `Migration created at ${filePath}`
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVNaWdyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCB0eXBlIHsgQ3JlYXRlTWlncmF0aW9uIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuY29uc3QgbWlncmF0aW9uVGVtcGxhdGUgPSAodXBTUUw/OiBzdHJpbmcsIGRvd25TUUw/OiBzdHJpbmcpID0+IGBpbXBvcnQge1xuICBNaWdyYXRlVXBBcmdzLFxuICBNaWdyYXRlRG93bkFyZ3MsXG59IGZyb20gXCJAcGF5bG9hZGNtcy9kYi1tb25nb2RiXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cCh7IHBheWxvYWQgfTogTWlncmF0ZVVwQXJncyk6IFByb21pc2U8dm9pZD4ge1xuJHt1cFNRTCA/PyBgICAvLyBNaWdyYXRpb24gY29kZWB9XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG93bih7IHBheWxvYWQgfTogTWlncmF0ZURvd25BcmdzKTogUHJvbWlzZTx2b2lkPiB7XG4ke2Rvd25TUUwgPz8gYCAgLy8gTWlncmF0aW9uIGNvZGVgfVxufTtcbmBcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1pZ3JhdGlvbjogQ3JlYXRlTWlncmF0aW9uID0gYXN5bmMgZnVuY3Rpb24gY3JlYXRlTWlncmF0aW9uKHtcbiAgZmlsZSxcbiAgbWlncmF0aW9uTmFtZSxcbiAgcGF5bG9hZCxcbn0pIHtcbiAgY29uc3QgZGlyID0gcGF5bG9hZC5kYi5taWdyYXRpb25EaXJcbiAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpIHtcbiAgICBmcy5ta2RpclN5bmMoZGlyKVxuICB9XG5cbiAgbGV0IG1pZ3JhdGlvbkZpbGVDb250ZW50OiBzdHJpbmcgfCB1bmRlZmluZWRcblxuICAvLyBDaGVjayBmb3IgcHJlZGVmaW5lZCBtaWdyYXRpb25cbiAgaWYgKGZpbGUpIHtcbiAgICBjb25zdCBwcmVkZWZpbmVkTWlncmF0aW9uTmFtZSA9IGZpbGUucmVwbGFjZSgnQHBheWxvYWRjbXMvZGItbW9uZ29kYi8nLCAnJylcbiAgICBtaWdyYXRpb25OYW1lID0gcHJlZGVmaW5lZE1pZ3JhdGlvbk5hbWVcbiAgICBjb25zdCBjbGVhblBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCBgLi4vcHJlZGVmaW5lZE1pZ3JhdGlvbnMvJHtwcmVkZWZpbmVkTWlncmF0aW9uTmFtZX0uanNgKVxuXG4gICAgLy8gQ2hlY2sgaWYgcHJlZGVmaW5lZCBtaWdyYXRpb24gZXhpc3RzXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoY2xlYW5QYXRoKSkge1xuICAgICAgY29uc3QgeyBkb3duLCB1cCB9ID0gcmVxdWlyZShjbGVhblBhdGgpXG4gICAgICBtaWdyYXRpb25GaWxlQ29udGVudCA9IG1pZ3JhdGlvblRlbXBsYXRlKHVwLCBkb3duKVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXlsb2FkLmxvZ2dlci5lcnJvcih7XG4gICAgICAgIG1zZzogYENhbm5lZCBtaWdyYXRpb24gJHtwcmVkZWZpbmVkTWlncmF0aW9uTmFtZX0gbm90IGZvdW5kLmAsXG4gICAgICB9KVxuICAgICAgcHJvY2Vzcy5leGl0KDEpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1pZ3JhdGlvbkZpbGVDb250ZW50ID0gbWlncmF0aW9uVGVtcGxhdGUoKVxuICB9XG5cbiAgY29uc3QgW3l5eW1tZGQsIGhobW1zc10gPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVxuICBjb25zdCBmb3JtYXR0ZWREYXRlID0geXl5bW1kZC5yZXBsYWNlKC9cXEQvZywgJycpXG4gIGNvbnN0IGZvcm1hdHRlZFRpbWUgPSBoaG1tc3Muc3BsaXQoJy4nKVswXS5yZXBsYWNlKC9cXEQvZywgJycpXG5cbiAgY29uc3QgdGltZXN0YW1wID0gYCR7Zm9ybWF0dGVkRGF0ZX1fJHtmb3JtYXR0ZWRUaW1lfWBcblxuICBjb25zdCBmb3JtYXR0ZWROYW1lID0gbWlncmF0aW9uTmFtZS5yZXBsYWNlKC9cXFcvZywgJ18nKVxuICBjb25zdCBmaWxlTmFtZSA9IGAke3RpbWVzdGFtcH1fJHtmb3JtYXR0ZWROYW1lfS50c2BcbiAgY29uc3QgZmlsZVBhdGggPSBgJHtkaXJ9LyR7ZmlsZU5hbWV9YFxuICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBtaWdyYXRpb25GaWxlQ29udGVudClcbiAgcGF5bG9hZC5sb2dnZXIuaW5mbyh7IG1zZzogYE1pZ3JhdGlvbiBjcmVhdGVkIGF0ICR7ZmlsZVBhdGh9YCB9KVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZU1pZ3JhdGlvbiIsIm1pZ3JhdGlvblRlbXBsYXRlIiwidXBTUUwiLCJkb3duU1FMIiwiZmlsZSIsIm1pZ3JhdGlvbk5hbWUiLCJwYXlsb2FkIiwiZGlyIiwiZGIiLCJtaWdyYXRpb25EaXIiLCJmcyIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJtaWdyYXRpb25GaWxlQ29udGVudCIsInByZWRlZmluZWRNaWdyYXRpb25OYW1lIiwicmVwbGFjZSIsImNsZWFuUGF0aCIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwiZG93biIsInVwIiwicmVxdWlyZSIsImxvZ2dlciIsImVycm9yIiwibXNnIiwicHJvY2VzcyIsImV4aXQiLCJ5eXltbWRkIiwiaGhtbXNzIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJmb3JtYXR0ZWREYXRlIiwiZm9ybWF0dGVkVGltZSIsInRpbWVzdGFtcCIsImZvcm1hdHRlZE5hbWUiLCJmaWxlTmFtZSIsImZpbGVQYXRoIiwid3JpdGVGaWxlU3luYyIsImluZm8iXSwibWFwcGluZ3MiOiJBQUFBLHlEQUF5RDs7OzsrQkFvQjVDQTs7O2VBQUFBOzs7MkRBakJFOzZEQUNFOzs7Ozs7QUFFakIsTUFBTUMsb0JBQW9CLENBQUNDLE9BQWdCQyxVQUFxQixDQUFDOzs7Ozs7QUFNakUsRUFBRUQsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7QUFJakMsRUFBRUMsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O0FBRW5DLENBQUM7QUFFTSxNQUFNSCxrQkFBbUMsZUFBZUEsZ0JBQWdCLEVBQzdFSSxJQUFJLEVBQ0pDLGFBQWEsRUFDYkMsT0FBTyxFQUNSO0lBQ0MsTUFBTUMsTUFBTUQsUUFBUUUsRUFBRSxDQUFDQyxZQUFZO0lBQ25DLElBQUksQ0FBQ0MsV0FBRSxDQUFDQyxVQUFVLENBQUNKLE1BQU07UUFDdkJHLFdBQUUsQ0FBQ0UsU0FBUyxDQUFDTDtJQUNmO0lBRUEsSUFBSU07SUFFSixpQ0FBaUM7SUFDakMsSUFBSVQsTUFBTTtRQUNSLE1BQU1VLDBCQUEwQlYsS0FBS1csT0FBTyxDQUFDLDJCQUEyQjtRQUN4RVYsZ0JBQWdCUztRQUNoQixNQUFNRSxZQUFZQyxhQUFJLENBQUNDLElBQUksQ0FBQ0MsV0FBVyxDQUFDLHdCQUF3QixFQUFFTCx3QkFBd0IsR0FBRyxDQUFDO1FBRTlGLHVDQUF1QztRQUN2QyxJQUFJSixXQUFFLENBQUNDLFVBQVUsQ0FBQ0ssWUFBWTtZQUM1QixNQUFNLEVBQUVJLElBQUksRUFBRUMsRUFBRSxFQUFFLEdBQUdDLFFBQVFOO1lBQzdCSCx1QkFBdUJaLGtCQUFrQm9CLElBQUlEO1FBQy9DLE9BQU87WUFDTGQsUUFBUWlCLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDO2dCQUNuQkMsS0FBSyxDQUFDLGlCQUFpQixFQUFFWCx3QkFBd0IsV0FBVyxDQUFDO1lBQy9EO1lBQ0FZLFFBQVFDLElBQUksQ0FBQztRQUNmO0lBQ0YsT0FBTztRQUNMZCx1QkFBdUJaO0lBQ3pCO0lBRUEsTUFBTSxDQUFDMkIsU0FBU0MsT0FBTyxHQUFHLElBQUlDLE9BQU9DLFdBQVcsR0FBR0MsS0FBSyxDQUFDO0lBQ3pELE1BQU1DLGdCQUFnQkwsUUFBUWIsT0FBTyxDQUFDLE9BQU87SUFDN0MsTUFBTW1CLGdCQUFnQkwsT0FBT0csS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNqQixPQUFPLENBQUMsT0FBTztJQUUxRCxNQUFNb0IsWUFBWSxDQUFDLEVBQUVGLGNBQWMsQ0FBQyxFQUFFQyxjQUFjLENBQUM7SUFFckQsTUFBTUUsZ0JBQWdCL0IsY0FBY1UsT0FBTyxDQUFDLE9BQU87SUFDbkQsTUFBTXNCLFdBQVcsQ0FBQyxFQUFFRixVQUFVLENBQUMsRUFBRUMsY0FBYyxHQUFHLENBQUM7SUFDbkQsTUFBTUUsV0FBVyxDQUFDLEVBQUUvQixJQUFJLENBQUMsRUFBRThCLFNBQVMsQ0FBQztJQUNyQzNCLFdBQUUsQ0FBQzZCLGFBQWEsQ0FBQ0QsVUFBVXpCO0lBQzNCUCxRQUFRaUIsTUFBTSxDQUFDaUIsSUFBSSxDQUFDO1FBQUVmLEtBQUssQ0FBQyxxQkFBcUIsRUFBRWEsU0FBUyxDQUFDO0lBQUM7QUFDaEUifQ==