"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "queryDrafts", {
    enumerable: true,
    get: function() {
        return queryDrafts;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const queryDrafts = async function queryDrafts({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const VersionModel = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let hasNearConstraint;
    let sort;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const combinedWhere = (0, _database.combineQueries)({
        latest: {
            equals: true
        }
    }, where);
    const versionQuery = await VersionModel.buildQuery({
        locale,
        payload: this.payload,
        where: combinedWhere
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(VersionModel.countDocuments(versionQuery, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await VersionModel.paginate(versionQuery, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc = {
                _id: doc.parent,
                id: doc.parent,
                ...doc.version,
                createdAt: doc.createdAt,
                updatedAt: doc.updatedAt
            };
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeURyYWZ0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFBhZ2luYXRlT3B0aW9ucyB9IGZyb20gJ21vbmdvb3NlJ1xuaW1wb3J0IHR5cGUgeyBRdWVyeURyYWZ0cyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgdHlwZSB7IFBheWxvYWRSZXF1ZXN0IH0gZnJvbSAncGF5bG9hZC90eXBlcydcblxuaW1wb3J0IHsgY29tYmluZVF1ZXJpZXMsIGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgeyBidWlsZFNvcnRQYXJhbSB9IGZyb20gJy4vcXVlcmllcy9idWlsZFNvcnRQYXJhbSdcbmltcG9ydCBzYW5pdGl6ZUludGVybmFsRmllbGRzIGZyb20gJy4vdXRpbGl0aWVzL3Nhbml0aXplSW50ZXJuYWxGaWVsZHMnXG5pbXBvcnQgeyB3aXRoU2Vzc2lvbiB9IGZyb20gJy4vd2l0aFNlc3Npb24nXG5cbmV4cG9ydCBjb25zdCBxdWVyeURyYWZ0czogUXVlcnlEcmFmdHMgPSBhc3luYyBmdW5jdGlvbiBxdWVyeURyYWZ0cyhcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGNvbGxlY3Rpb24sIGxpbWl0LCBsb2NhbGUsIHBhZ2UsIHBhZ2luYXRpb24sIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCBzb3J0OiBzb3J0QXJnLCB3aGVyZSB9LFxuKSB7XG4gIGNvbnN0IFZlcnNpb25Nb2RlbCA9IHRoaXMudmVyc2lvbnNbY29sbGVjdGlvbl1cbiAgY29uc3QgY29sbGVjdGlvbkNvbmZpZyA9IHRoaXMucGF5bG9hZC5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXS5jb25maWdcbiAgY29uc3Qgb3B0aW9ucyA9IHdpdGhTZXNzaW9uKHRoaXMsIHJlcS50cmFuc2FjdGlvbklEKVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludFxuICBsZXQgc29ydFxuXG4gIGlmICh3aGVyZSkge1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMod2hlcmUpXG4gICAgaGFzTmVhckNvbnN0cmFpbnQgPSBjb25zdHJhaW50cy5zb21lKChwcm9wKSA9PiBPYmplY3Qua2V5cyhwcm9wKS5zb21lKChrZXkpID0+IGtleSA9PT0gJ25lYXInKSlcbiAgfVxuXG4gIGlmICghaGFzTmVhckNvbnN0cmFpbnQpIHtcbiAgICBzb3J0ID0gYnVpbGRTb3J0UGFyYW0oe1xuICAgICAgY29uZmlnOiB0aGlzLnBheWxvYWQuY29uZmlnLFxuICAgICAgZmllbGRzOiBjb2xsZWN0aW9uQ29uZmlnLmZpZWxkcyxcbiAgICAgIGxvY2FsZSxcbiAgICAgIHNvcnQ6IHNvcnRBcmcgfHwgY29sbGVjdGlvbkNvbmZpZy5kZWZhdWx0U29ydCxcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGNvbWJpbmVkV2hlcmUgPSBjb21iaW5lUXVlcmllcyh7IGxhdGVzdDogeyBlcXVhbHM6IHRydWUgfSB9LCB3aGVyZSlcblxuICBjb25zdCB2ZXJzaW9uUXVlcnkgPSBhd2FpdCBWZXJzaW9uTW9kZWwuYnVpbGRRdWVyeSh7XG4gICAgbG9jYWxlLFxuICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCxcbiAgICB3aGVyZTogY29tYmluZWRXaGVyZSxcbiAgfSlcblxuICAvLyB1c2VFc3RpbWF0ZWRDb3VudCBpcyBmYXN0ZXIsIGJ1dCBub3QgYWNjdXJhdGUsIGFzIGl0IGlnbm9yZXMgYW55IGZpbHRlcnMuIEl0IGlzIHRodXMgc2V0IHRvIHRydWUgaWYgdGhlcmUgYXJlIG5vIGZpbHRlcnMuXG4gIGNvbnN0IHVzZUVzdGltYXRlZENvdW50ID1cbiAgICBoYXNOZWFyQ29uc3RyYWludCB8fCAhdmVyc2lvblF1ZXJ5IHx8IE9iamVjdC5rZXlzKHZlcnNpb25RdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb3B0aW9ucyxcbiAgICBwYWdlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgc29ydCxcbiAgICB1c2VFc3RpbWF0ZWRDb3VudCxcbiAgfVxuXG4gIGlmICghdXNlRXN0aW1hdGVkQ291bnQpIHtcbiAgICAvLyBJbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY291bnREb2N1bWVudHMgcXVlcnkgd2hpY2ggaXMgdXNlZCBpZiB1c2VFc3RpbWF0ZWRDb3VudCBpcyBzZXQgdG8gZmFsc2UgYnkgYWRkaW5nIGEgaGludC5cbiAgICBwYWdpbmF0aW9uT3B0aW9ucy51c2VDdXN0b21Db3VudEZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgVmVyc2lvbk1vZGVsLmNvdW50RG9jdW1lbnRzKHZlcnNpb25RdWVyeSwge1xuICAgICAgICAgIGhpbnQ6IHsgX2lkOiAxIH0sXG4gICAgICAgIH0pLFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGlmIChsaW1pdCA+IDApIHtcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy5saW1pdCA9IGxpbWl0XG4gICAgLy8gbGltaXQgbXVzdCBhbHNvIGJlIHNldCBoZXJlLCBpdCdzIGlnbm9yZWQgd2hlbiBwYWdpbmF0aW9uIGlzIGZhbHNlXG4gICAgcGFnaW5hdGlvbk9wdGlvbnMub3B0aW9ucy5saW1pdCA9IGxpbWl0XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBWZXJzaW9uTW9kZWwucGFnaW5hdGUodmVyc2lvblF1ZXJ5LCBwYWdpbmF0aW9uT3B0aW9ucylcbiAgY29uc3QgZG9jcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0LmRvY3MpKVxuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzdWx0LFxuICAgIGRvY3M6IGRvY3MubWFwKChkb2MpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZG9jID0ge1xuICAgICAgICBfaWQ6IGRvYy5wYXJlbnQsXG4gICAgICAgIGlkOiBkb2MucGFyZW50LFxuICAgICAgICAuLi5kb2MudmVyc2lvbixcbiAgICAgICAgY3JlYXRlZEF0OiBkb2MuY3JlYXRlZEF0LFxuICAgICAgICB1cGRhdGVkQXQ6IGRvYy51cGRhdGVkQXQsXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzYW5pdGl6ZUludGVybmFsRmllbGRzKGRvYylcbiAgICB9KSxcbiAgfVxufVxuIl0sIm5hbWVzIjpbInF1ZXJ5RHJhZnRzIiwiY29sbGVjdGlvbiIsImxpbWl0IiwibG9jYWxlIiwicGFnZSIsInBhZ2luYXRpb24iLCJyZXEiLCJzb3J0Iiwic29ydEFyZyIsIndoZXJlIiwiVmVyc2lvbk1vZGVsIiwidmVyc2lvbnMiLCJjb2xsZWN0aW9uQ29uZmlnIiwicGF5bG9hZCIsImNvbGxlY3Rpb25zIiwiY29uZmlnIiwib3B0aW9ucyIsIndpdGhTZXNzaW9uIiwidHJhbnNhY3Rpb25JRCIsImhhc05lYXJDb25zdHJhaW50IiwiY29uc3RyYWludHMiLCJmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyIsInNvbWUiLCJwcm9wIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImJ1aWxkU29ydFBhcmFtIiwiZmllbGRzIiwiZGVmYXVsdFNvcnQiLCJ0aW1lc3RhbXBzIiwiY29tYmluZWRXaGVyZSIsImNvbWJpbmVRdWVyaWVzIiwibGF0ZXN0IiwiZXF1YWxzIiwidmVyc2lvblF1ZXJ5IiwiYnVpbGRRdWVyeSIsInVzZUVzdGltYXRlZENvdW50IiwibGVuZ3RoIiwicGFnaW5hdGlvbk9wdGlvbnMiLCJmb3JjZUNvdW50Rm4iLCJsZWFuIiwibGVhbldpdGhJZCIsInVzZUN1c3RvbUNvdW50Rm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvdW50RG9jdW1lbnRzIiwiaGludCIsIl9pZCIsInJlc3VsdCIsInBhZ2luYXRlIiwiZG9jcyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm1hcCIsImRvYyIsInBhcmVudCIsImlkIiwidmVyc2lvbiIsImNyZWF0ZWRBdCIsInVwZGF0ZWRBdCIsInNhbml0aXplSW50ZXJuYWxGaWVsZHMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBWWFBOzs7ZUFBQUE7OzswQkFSMkM7Z0NBSXpCOytFQUNJOzZCQUNQOzs7Ozs7QUFFckIsTUFBTUEsY0FBMkIsZUFBZUEsWUFFckQsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sQ0FBQyxDQUFtQixFQUFFQyxNQUFNQyxPQUFPLEVBQUVDLEtBQUssRUFBRTtJQUVqRyxNQUFNQyxlQUFlLElBQUksQ0FBQ0MsUUFBUSxDQUFDVixXQUFXO0lBQzlDLE1BQU1XLG1CQUFtQixJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDYixXQUFXLENBQUNjLE1BQU07SUFDcEUsTUFBTUMsVUFBVUMsSUFBQUEsd0JBQVcsRUFBQyxJQUFJLEVBQUVYLElBQUlZLGFBQWE7SUFFbkQsSUFBSUM7SUFDSixJQUFJWjtJQUVKLElBQUlFLE9BQU87UUFDVCxNQUFNVyxjQUFjQyxJQUFBQSxpQ0FBdUIsRUFBQ1o7UUFDNUNVLG9CQUFvQkMsWUFBWUUsSUFBSSxDQUFDLENBQUNDLE9BQVNDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsSUFBSSxDQUFDLENBQUNJLE1BQVFBLFFBQVE7SUFDekY7SUFFQSxJQUFJLENBQUNQLG1CQUFtQjtRQUN0QlosT0FBT29CLElBQUFBLDhCQUFjLEVBQUM7WUFDcEJaLFFBQVEsSUFBSSxDQUFDRixPQUFPLENBQUNFLE1BQU07WUFDM0JhLFFBQVFoQixpQkFBaUJnQixNQUFNO1lBQy9CekI7WUFDQUksTUFBTUMsV0FBV0ksaUJBQWlCaUIsV0FBVztZQUM3Q0MsWUFBWTtRQUNkO0lBQ0Y7SUFFQSxNQUFNQyxnQkFBZ0JDLElBQUFBLHdCQUFjLEVBQUM7UUFBRUMsUUFBUTtZQUFFQyxRQUFRO1FBQUs7SUFBRSxHQUFHekI7SUFFbkUsTUFBTTBCLGVBQWUsTUFBTXpCLGFBQWEwQixVQUFVLENBQUM7UUFDakRqQztRQUNBVSxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUNyQkosT0FBT3NCO0lBQ1Q7SUFFQSw0SEFBNEg7SUFDNUgsTUFBTU0sb0JBQ0psQixxQkFBcUIsQ0FBQ2dCLGdCQUFnQlgsT0FBT0MsSUFBSSxDQUFDVSxjQUFjRyxNQUFNLEtBQUs7SUFDN0UsTUFBTUMsb0JBQXFDO1FBQ3pDQyxjQUFjckI7UUFDZHNCLE1BQU07UUFDTkMsWUFBWTtRQUNaMUI7UUFDQVo7UUFDQUM7UUFDQUU7UUFDQThCO0lBQ0Y7SUFFQSxJQUFJLENBQUNBLG1CQUFtQjtRQUN0QiwySEFBMkg7UUFDM0hFLGtCQUFrQkksZ0JBQWdCLEdBQUc7WUFDbkMsT0FBT0MsUUFBUUMsT0FBTyxDQUNwQm5DLGFBQWFvQyxjQUFjLENBQUNYLGNBQWM7Z0JBQ3hDWSxNQUFNO29CQUFFQyxLQUFLO2dCQUFFO1lBQ2pCO1FBRUo7SUFDRjtJQUVBLElBQUk5QyxRQUFRLEdBQUc7UUFDYnFDLGtCQUFrQnJDLEtBQUssR0FBR0E7UUFDMUIscUVBQXFFO1FBQ3JFcUMsa0JBQWtCdkIsT0FBTyxDQUFDZCxLQUFLLEdBQUdBO0lBQ3BDO0lBRUEsTUFBTStDLFNBQVMsTUFBTXZDLGFBQWF3QyxRQUFRLENBQUNmLGNBQWNJO0lBQ3pELE1BQU1ZLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDTCxPQUFPRSxJQUFJO0lBRWxELE9BQU87UUFDTCxHQUFHRixNQUFNO1FBQ1RFLE1BQU1BLEtBQUtJLEdBQUcsQ0FBQyxDQUFDQztZQUNkLDZDQUE2QztZQUM3Q0EsTUFBTTtnQkFDSlIsS0FBS1EsSUFBSUMsTUFBTTtnQkFDZkMsSUFBSUYsSUFBSUMsTUFBTTtnQkFDZCxHQUFHRCxJQUFJRyxPQUFPO2dCQUNkQyxXQUFXSixJQUFJSSxTQUFTO2dCQUN4QkMsV0FBV0wsSUFBSUssU0FBUztZQUMxQjtZQUVBLE9BQU9DLElBQUFBLCtCQUFzQixFQUFDTjtRQUNoQztJQUNGO0FBQ0YifQ==