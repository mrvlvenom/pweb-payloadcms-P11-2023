"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "findVersions", {
    enumerable: true,
    get: function() {
        return findVersions;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const findVersions = async function findVersions({ collection, limit, locale, page, pagination, req = {}, skip, sort: sortArg, where }) {
    const Model = this.versions[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = {
        ...(0, _withSession.withSession)(this, req.transactionID),
        limit,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        limit,
        offset: skip || 0,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kVmVyc2lvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZU9wdGlvbnMgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgRmluZFZlcnNpb25zIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgeyBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5cbmltcG9ydCB0eXBlIHsgTW9uZ29vc2VBZGFwdGVyIH0gZnJvbSAnLidcblxuaW1wb3J0IHsgYnVpbGRTb3J0UGFyYW0gfSBmcm9tICcuL3F1ZXJpZXMvYnVpbGRTb3J0UGFyYW0nXG5pbXBvcnQgc2FuaXRpemVJbnRlcm5hbEZpZWxkcyBmcm9tICcuL3V0aWxpdGllcy9zYW5pdGl6ZUludGVybmFsRmllbGRzJ1xuaW1wb3J0IHsgd2l0aFNlc3Npb24gfSBmcm9tICcuL3dpdGhTZXNzaW9uJ1xuXG5leHBvcnQgY29uc3QgZmluZFZlcnNpb25zOiBGaW5kVmVyc2lvbnMgPSBhc3luYyBmdW5jdGlvbiBmaW5kVmVyc2lvbnMoXG4gIHRoaXM6IE1vbmdvb3NlQWRhcHRlcixcbiAge1xuICAgIGNvbGxlY3Rpb24sXG4gICAgbGltaXQsXG4gICAgbG9jYWxlLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbixcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBza2lwLFxuICAgIHNvcnQ6IHNvcnRBcmcsXG4gICAgd2hlcmUsXG4gIH0sXG4pIHtcbiAgY29uc3QgTW9kZWwgPSB0aGlzLnZlcnNpb25zW2NvbGxlY3Rpb25dXG4gIGNvbnN0IGNvbGxlY3Rpb25Db25maWcgPSB0aGlzLnBheWxvYWQuY29sbGVjdGlvbnNbY29sbGVjdGlvbl0uY29uZmlnXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4ud2l0aFNlc3Npb24odGhpcywgcmVxLnRyYW5zYWN0aW9uSUQpLFxuICAgIGxpbWl0LFxuICAgIHNraXAsXG4gIH1cblxuICBsZXQgaGFzTmVhckNvbnN0cmFpbnQgPSBmYWxzZVxuXG4gIGlmICh3aGVyZSkge1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gZmxhdHRlbldoZXJlVG9PcGVyYXRvcnMod2hlcmUpXG4gICAgaGFzTmVhckNvbnN0cmFpbnQgPSBjb25zdHJhaW50cy5zb21lKChwcm9wKSA9PiBPYmplY3Qua2V5cyhwcm9wKS5zb21lKChrZXkpID0+IGtleSA9PT0gJ25lYXInKSlcbiAgfVxuXG4gIGxldCBzb3J0XG4gIGlmICghaGFzTmVhckNvbnN0cmFpbnQpIHtcbiAgICBzb3J0ID0gYnVpbGRTb3J0UGFyYW0oe1xuICAgICAgY29uZmlnOiB0aGlzLnBheWxvYWQuY29uZmlnLFxuICAgICAgZmllbGRzOiBjb2xsZWN0aW9uQ29uZmlnLmZpZWxkcyxcbiAgICAgIGxvY2FsZSxcbiAgICAgIHNvcnQ6IHNvcnRBcmcgfHwgJy11cGRhdGVkQXQnLFxuICAgICAgdGltZXN0YW1wczogdHJ1ZSxcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgcXVlcnkgPSBhd2FpdCBNb2RlbC5idWlsZFF1ZXJ5KHtcbiAgICBsb2NhbGUsXG4gICAgcGF5bG9hZDogdGhpcy5wYXlsb2FkLFxuICAgIHdoZXJlLFxuICB9KVxuXG4gIC8vIHVzZUVzdGltYXRlZENvdW50IGlzIGZhc3RlciwgYnV0IG5vdCBhY2N1cmF0ZSwgYXMgaXQgaWdub3JlcyBhbnkgZmlsdGVycy4gSXQgaXMgdGh1cyBzZXQgdG8gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gZmlsdGVycy5cbiAgY29uc3QgdXNlRXN0aW1hdGVkQ291bnQgPSBoYXNOZWFyQ29uc3RyYWludCB8fCAhcXVlcnkgfHwgT2JqZWN0LmtleXMocXVlcnkpLmxlbmd0aCA9PT0gMFxuICBjb25zdCBwYWdpbmF0aW9uT3B0aW9uczogUGFnaW5hdGVPcHRpb25zID0ge1xuICAgIGZvcmNlQ291bnRGbjogaGFzTmVhckNvbnN0cmFpbnQsXG4gICAgbGVhbjogdHJ1ZSxcbiAgICBsZWFuV2l0aElkOiB0cnVlLFxuICAgIGxpbWl0LFxuICAgIG9mZnNldDogc2tpcCB8fCAwLFxuICAgIG9wdGlvbnMsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnQsXG4gICAgdXNlRXN0aW1hdGVkQ291bnQsXG4gIH1cblxuICBpZiAoIXVzZUVzdGltYXRlZENvdW50KSB7XG4gICAgLy8gSW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGNvdW50RG9jdW1lbnRzIHF1ZXJ5IHdoaWNoIGlzIHVzZWQgaWYgdXNlRXN0aW1hdGVkQ291bnQgaXMgc2V0IHRvIGZhbHNlIGJ5IGFkZGluZyBhIGhpbnQuXG4gICAgcGFnaW5hdGlvbk9wdGlvbnMudXNlQ3VzdG9tQ291bnRGbiA9ICgpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgIE1vZGVsLmNvdW50RG9jdW1lbnRzKHF1ZXJ5LCB7XG4gICAgICAgICAgaGludDogeyBfaWQ6IDEgfSxcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgaWYgKGxpbWl0ID4gMCkge1xuICAgIHBhZ2luYXRpb25PcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgICAvLyBsaW1pdCBtdXN0IGFsc28gYmUgc2V0IGhlcmUsIGl0J3MgaWdub3JlZCB3aGVuIHBhZ2luYXRpb24gaXMgZmFsc2VcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy5vcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1vZGVsLnBhZ2luYXRlKHF1ZXJ5LCBwYWdpbmF0aW9uT3B0aW9ucylcbiAgY29uc3QgZG9jcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0LmRvY3MpKVxuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzdWx0LFxuICAgIGRvY3M6IGRvY3MubWFwKChkb2MpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZG9jLmlkID0gZG9jLl9pZFxuICAgICAgcmV0dXJuIHNhbml0aXplSW50ZXJuYWxGaWVsZHMoZG9jKVxuICAgIH0pLFxuICB9XG59XG4iXSwibmFtZXMiOlsiZmluZFZlcnNpb25zIiwiY29sbGVjdGlvbiIsImxpbWl0IiwibG9jYWxlIiwicGFnZSIsInBhZ2luYXRpb24iLCJyZXEiLCJza2lwIiwic29ydCIsInNvcnRBcmciLCJ3aGVyZSIsIk1vZGVsIiwidmVyc2lvbnMiLCJjb2xsZWN0aW9uQ29uZmlnIiwicGF5bG9hZCIsImNvbGxlY3Rpb25zIiwiY29uZmlnIiwib3B0aW9ucyIsIndpdGhTZXNzaW9uIiwidHJhbnNhY3Rpb25JRCIsImhhc05lYXJDb25zdHJhaW50IiwiY29uc3RyYWludHMiLCJmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyIsInNvbWUiLCJwcm9wIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImJ1aWxkU29ydFBhcmFtIiwiZmllbGRzIiwidGltZXN0YW1wcyIsInF1ZXJ5IiwiYnVpbGRRdWVyeSIsInVzZUVzdGltYXRlZENvdW50IiwibGVuZ3RoIiwicGFnaW5hdGlvbk9wdGlvbnMiLCJmb3JjZUNvdW50Rm4iLCJsZWFuIiwibGVhbldpdGhJZCIsIm9mZnNldCIsInVzZUN1c3RvbUNvdW50Rm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvdW50RG9jdW1lbnRzIiwiaGludCIsIl9pZCIsInJlc3VsdCIsInBhZ2luYXRlIiwiZG9jcyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm1hcCIsImRvYyIsImlkIiwic2FuaXRpemVJbnRlcm5hbEZpZWxkcyJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFZYUE7OztlQUFBQTs7OzBCQVIyQjtnQ0FJVDsrRUFDSTs2QkFDUDs7Ozs7O0FBRXJCLE1BQU1BLGVBQTZCLGVBQWVBLGFBRXZELEVBQ0VDLFVBQVUsRUFDVkMsS0FBSyxFQUNMQyxNQUFNLEVBQ05DLElBQUksRUFDSkMsVUFBVSxFQUNWQyxNQUFNLENBQUMsQ0FBbUIsRUFDMUJDLElBQUksRUFDSkMsTUFBTUMsT0FBTyxFQUNiQyxLQUFLLEVBQ047SUFFRCxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsUUFBUSxDQUFDWCxXQUFXO0lBQ3ZDLE1BQU1ZLG1CQUFtQixJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxDQUFDZCxXQUFXLENBQUNlLE1BQU07SUFDcEUsTUFBTUMsVUFBVTtRQUNkLEdBQUdDLElBQUFBLHdCQUFXLEVBQUMsSUFBSSxFQUFFWixJQUFJYSxhQUFhLENBQUM7UUFDdkNqQjtRQUNBSztJQUNGO0lBRUEsSUFBSWEsb0JBQW9CO0lBRXhCLElBQUlWLE9BQU87UUFDVCxNQUFNVyxjQUFjQyxJQUFBQSxpQ0FBdUIsRUFBQ1o7UUFDNUNVLG9CQUFvQkMsWUFBWUUsSUFBSSxDQUFDLENBQUNDLE9BQVNDLE9BQU9DLElBQUksQ0FBQ0YsTUFBTUQsSUFBSSxDQUFDLENBQUNJLE1BQVFBLFFBQVE7SUFDekY7SUFFQSxJQUFJbkI7SUFDSixJQUFJLENBQUNZLG1CQUFtQjtRQUN0QlosT0FBT29CLElBQUFBLDhCQUFjLEVBQUM7WUFDcEJaLFFBQVEsSUFBSSxDQUFDRixPQUFPLENBQUNFLE1BQU07WUFDM0JhLFFBQVFoQixpQkFBaUJnQixNQUFNO1lBQy9CMUI7WUFDQUssTUFBTUMsV0FBVztZQUNqQnFCLFlBQVk7UUFDZDtJQUNGO0lBRUEsTUFBTUMsUUFBUSxNQUFNcEIsTUFBTXFCLFVBQVUsQ0FBQztRQUNuQzdCO1FBQ0FXLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1FBQ3JCSjtJQUNGO0lBRUEsNEhBQTRIO0lBQzVILE1BQU11QixvQkFBb0JiLHFCQUFxQixDQUFDVyxTQUFTTixPQUFPQyxJQUFJLENBQUNLLE9BQU9HLE1BQU0sS0FBSztJQUN2RixNQUFNQyxvQkFBcUM7UUFDekNDLGNBQWNoQjtRQUNkaUIsTUFBTTtRQUNOQyxZQUFZO1FBQ1pwQztRQUNBcUMsUUFBUWhDLFFBQVE7UUFDaEJVO1FBQ0FiO1FBQ0FDO1FBQ0FHO1FBQ0F5QjtJQUNGO0lBRUEsSUFBSSxDQUFDQSxtQkFBbUI7UUFDdEIsMkhBQTJIO1FBQzNIRSxrQkFBa0JLLGdCQUFnQixHQUFHO1lBQ25DLE9BQU9DLFFBQVFDLE9BQU8sQ0FDcEIvQixNQUFNZ0MsY0FBYyxDQUFDWixPQUFPO2dCQUMxQmEsTUFBTTtvQkFBRUMsS0FBSztnQkFBRTtZQUNqQjtRQUVKO0lBQ0Y7SUFFQSxJQUFJM0MsUUFBUSxHQUFHO1FBQ2JpQyxrQkFBa0JqQyxLQUFLLEdBQUdBO1FBQzFCLHFFQUFxRTtRQUNyRWlDLGtCQUFrQmxCLE9BQU8sQ0FBQ2YsS0FBSyxHQUFHQTtJQUNwQztJQUVBLE1BQU00QyxTQUFTLE1BQU1uQyxNQUFNb0MsUUFBUSxDQUFDaEIsT0FBT0k7SUFDM0MsTUFBTWEsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxTQUFTLENBQUNMLE9BQU9FLElBQUk7SUFFbEQsT0FBTztRQUNMLEdBQUdGLE1BQU07UUFDVEUsTUFBTUEsS0FBS0ksR0FBRyxDQUFDLENBQUNDO1lBQ2QsNkNBQTZDO1lBQzdDQSxJQUFJQyxFQUFFLEdBQUdELElBQUlSLEdBQUc7WUFDaEIsT0FBT1UsSUFBQUEsK0JBQXNCLEVBQUNGO1FBQ2hDO0lBQ0Y7QUFDRiJ9