import type { ClientSession, ConnectOptions, Connection } from 'mongoose';
import type { Payload } from 'payload';
import type { BaseDatabaseAdapter } from 'payload/database';
export type { MigrateDownArgs, MigrateUpArgs } from './types';
import type { CollectionModel, GlobalModel } from './types';
export interface Args {
    /** Set to false to disable auto-pluralization of collection names, Defaults to true */
    autoPluralization?: boolean;
    /** Extra configuration options */
    connectOptions?: ConnectOptions & {
        /** Set false to disable $facet aggregation in non-supporting databases, Defaults to true */
        useFacet?: boolean;
    };
    migrationDir?: string;
    /** The URL to connect to MongoDB or false to start payload and prevent connecting */
    url: false | string;
}
export type MongooseAdapter = BaseDatabaseAdapter & Args & {
    collections: {
        [slug: string]: CollectionModel;
    };
    connection: Connection;
    globals: GlobalModel;
    mongoMemoryServer: any;
    sessions: Record<number | string, ClientSession>;
    versions: {
        [slug: string]: CollectionModel;
    };
};
type MongooseAdapterResult = (args: {
    payload: Payload;
}) => MongooseAdapter;
declare module 'payload' {
    interface DatabaseAdapter extends Omit<BaseDatabaseAdapter, 'sessions'>, Omit<Args, 'migrationDir'> {
        collections: {
            [slug: string]: CollectionModel;
        };
        connection: Connection;
        globals: GlobalModel;
        mongoMemoryServer: any;
        sessions: Record<number | string, ClientSession>;
        versions: {
            [slug: string]: CollectionModel;
        };
    }
}
export declare function mongooseAdapter({ autoPluralization, connectOptions, migrationDir: migrationDirArg, url, }: Args): MongooseAdapterResult;
//# sourceMappingURL=index.d.ts.map