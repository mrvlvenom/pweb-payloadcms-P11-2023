"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "findGlobalVersions", {
    enumerable: true,
    get: function() {
        return findGlobalVersions;
    }
});
const _database = require("payload/database");
const _versions = require("payload/versions");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const findGlobalVersions = async function findGlobalVersions({ global, limit, locale, page, pagination, req = {}, skip, sort: sortArg, where }) {
    const Model = this.versions[global];
    const versionFields = (0, _versions.buildVersionGlobalFields)(this.payload.globals.config.find(({ slug })=>slug === global));
    const options = {
        ...(0, _withSession.withSession)(this, req.transactionID),
        limit,
        skip
    };
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: versionFields,
            locale,
            sort: sortArg || '-updatedAt',
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        globalSlug: global,
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        offset: skip,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kR2xvYmFsVmVyc2lvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBQYWdpbmF0ZU9wdGlvbnMgfSBmcm9tICdtb25nb29zZSdcbmltcG9ydCB0eXBlIHsgRmluZEdsb2JhbFZlcnNpb25zIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcbmltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICdwYXlsb2FkL3R5cGVzJ1xuXG5pbXBvcnQgeyBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyB9IGZyb20gJ3BheWxvYWQvZGF0YWJhc2UnXG5pbXBvcnQgeyBidWlsZFZlcnNpb25HbG9iYWxGaWVsZHMgfSBmcm9tICdwYXlsb2FkL3ZlcnNpb25zJ1xuXG5pbXBvcnQgdHlwZSB7IE1vbmdvb3NlQWRhcHRlciB9IGZyb20gJy4nXG5cbmltcG9ydCB7IGJ1aWxkU29ydFBhcmFtIH0gZnJvbSAnLi9xdWVyaWVzL2J1aWxkU29ydFBhcmFtJ1xuaW1wb3J0IHNhbml0aXplSW50ZXJuYWxGaWVsZHMgZnJvbSAnLi91dGlsaXRpZXMvc2FuaXRpemVJbnRlcm5hbEZpZWxkcydcbmltcG9ydCB7IHdpdGhTZXNzaW9uIH0gZnJvbSAnLi93aXRoU2Vzc2lvbidcblxuZXhwb3J0IGNvbnN0IGZpbmRHbG9iYWxWZXJzaW9uczogRmluZEdsb2JhbFZlcnNpb25zID0gYXN5bmMgZnVuY3Rpb24gZmluZEdsb2JhbFZlcnNpb25zKFxuICB0aGlzOiBNb25nb29zZUFkYXB0ZXIsXG4gIHtcbiAgICBnbG9iYWwsXG4gICAgbGltaXQsXG4gICAgbG9jYWxlLFxuICAgIHBhZ2UsXG4gICAgcGFnaW5hdGlvbixcbiAgICByZXEgPSB7fSBhcyBQYXlsb2FkUmVxdWVzdCxcbiAgICBza2lwLFxuICAgIHNvcnQ6IHNvcnRBcmcsXG4gICAgd2hlcmUsXG4gIH0sXG4pIHtcbiAgY29uc3QgTW9kZWwgPSB0aGlzLnZlcnNpb25zW2dsb2JhbF1cbiAgY29uc3QgdmVyc2lvbkZpZWxkcyA9IGJ1aWxkVmVyc2lvbkdsb2JhbEZpZWxkcyhcbiAgICB0aGlzLnBheWxvYWQuZ2xvYmFscy5jb25maWcuZmluZCgoeyBzbHVnIH0pID0+IHNsdWcgPT09IGdsb2JhbCksXG4gIClcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi53aXRoU2Vzc2lvbih0aGlzLCByZXEudHJhbnNhY3Rpb25JRCksXG4gICAgbGltaXQsXG4gICAgc2tpcCxcbiAgfVxuXG4gIGxldCBoYXNOZWFyQ29uc3RyYWludCA9IGZhbHNlXG5cbiAgaWYgKHdoZXJlKSB7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSBmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyh3aGVyZSlcbiAgICBoYXNOZWFyQ29uc3RyYWludCA9IGNvbnN0cmFpbnRzLnNvbWUoKHByb3ApID0+IE9iamVjdC5rZXlzKHByb3ApLnNvbWUoKGtleSkgPT4ga2V5ID09PSAnbmVhcicpKVxuICB9XG5cbiAgbGV0IHNvcnRcbiAgaWYgKCFoYXNOZWFyQ29uc3RyYWludCkge1xuICAgIHNvcnQgPSBidWlsZFNvcnRQYXJhbSh7XG4gICAgICBjb25maWc6IHRoaXMucGF5bG9hZC5jb25maWcsXG4gICAgICBmaWVsZHM6IHZlcnNpb25GaWVsZHMsXG4gICAgICBsb2NhbGUsXG4gICAgICBzb3J0OiBzb3J0QXJnIHx8ICctdXBkYXRlZEF0JyxcbiAgICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHF1ZXJ5ID0gYXdhaXQgTW9kZWwuYnVpbGRRdWVyeSh7XG4gICAgZ2xvYmFsU2x1ZzogZ2xvYmFsLFxuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQsXG4gICAgd2hlcmUsXG4gIH0pXG5cbiAgLy8gdXNlRXN0aW1hdGVkQ291bnQgaXMgZmFzdGVyLCBidXQgbm90IGFjY3VyYXRlLCBhcyBpdCBpZ25vcmVzIGFueSBmaWx0ZXJzLiBJdCBpcyB0aHVzIHNldCB0byB0cnVlIGlmIHRoZXJlIGFyZSBubyBmaWx0ZXJzLlxuICBjb25zdCB1c2VFc3RpbWF0ZWRDb3VudCA9IGhhc05lYXJDb25zdHJhaW50IHx8ICFxdWVyeSB8fCBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb2Zmc2V0OiBza2lwLFxuICAgIG9wdGlvbnMsXG4gICAgcGFnZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIHNvcnQsXG4gICAgdXNlRXN0aW1hdGVkQ291bnQsXG4gIH1cblxuICBpZiAoIXVzZUVzdGltYXRlZENvdW50KSB7XG4gICAgLy8gSW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGNvdW50RG9jdW1lbnRzIHF1ZXJ5IHdoaWNoIGlzIHVzZWQgaWYgdXNlRXN0aW1hdGVkQ291bnQgaXMgc2V0IHRvIGZhbHNlIGJ5IGFkZGluZyBhIGhpbnQuXG4gICAgcGFnaW5hdGlvbk9wdGlvbnMudXNlQ3VzdG9tQ291bnRGbiA9ICgpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgIE1vZGVsLmNvdW50RG9jdW1lbnRzKHF1ZXJ5LCB7XG4gICAgICAgICAgaGludDogeyBfaWQ6IDEgfSxcbiAgICAgICAgfSksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgaWYgKGxpbWl0ID4gMCkge1xuICAgIHBhZ2luYXRpb25PcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgICAvLyBsaW1pdCBtdXN0IGFsc28gYmUgc2V0IGhlcmUsIGl0J3MgaWdub3JlZCB3aGVuIHBhZ2luYXRpb24gaXMgZmFsc2VcbiAgICBwYWdpbmF0aW9uT3B0aW9ucy5vcHRpb25zLmxpbWl0ID0gbGltaXRcbiAgfVxuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IE1vZGVsLnBhZ2luYXRlKHF1ZXJ5LCBwYWdpbmF0aW9uT3B0aW9ucylcbiAgY29uc3QgZG9jcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0LmRvY3MpKVxuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzdWx0LFxuICAgIGRvY3M6IGRvY3MubWFwKChkb2MpID0+IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZG9jLmlkID0gZG9jLl9pZFxuICAgICAgcmV0dXJuIHNhbml0aXplSW50ZXJuYWxGaWVsZHMoZG9jKVxuICAgIH0pLFxuICB9XG59XG4iXSwibmFtZXMiOlsiZmluZEdsb2JhbFZlcnNpb25zIiwiZ2xvYmFsIiwibGltaXQiLCJsb2NhbGUiLCJwYWdlIiwicGFnaW5hdGlvbiIsInJlcSIsInNraXAiLCJzb3J0Iiwic29ydEFyZyIsIndoZXJlIiwiTW9kZWwiLCJ2ZXJzaW9ucyIsInZlcnNpb25GaWVsZHMiLCJidWlsZFZlcnNpb25HbG9iYWxGaWVsZHMiLCJwYXlsb2FkIiwiZ2xvYmFscyIsImNvbmZpZyIsImZpbmQiLCJzbHVnIiwib3B0aW9ucyIsIndpdGhTZXNzaW9uIiwidHJhbnNhY3Rpb25JRCIsImhhc05lYXJDb25zdHJhaW50IiwiY29uc3RyYWludHMiLCJmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyIsInNvbWUiLCJwcm9wIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImJ1aWxkU29ydFBhcmFtIiwiZmllbGRzIiwidGltZXN0YW1wcyIsInF1ZXJ5IiwiYnVpbGRRdWVyeSIsImdsb2JhbFNsdWciLCJ1c2VFc3RpbWF0ZWRDb3VudCIsImxlbmd0aCIsInBhZ2luYXRpb25PcHRpb25zIiwiZm9yY2VDb3VudEZuIiwibGVhbiIsImxlYW5XaXRoSWQiLCJvZmZzZXQiLCJ1c2VDdXN0b21Db3VudEZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb3VudERvY3VtZW50cyIsImhpbnQiLCJfaWQiLCJyZXN1bHQiLCJwYWdpbmF0ZSIsImRvY3MiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJtYXAiLCJkb2MiLCJpZCIsInNhbml0aXplSW50ZXJuYWxGaWVsZHMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBYWFBOzs7ZUFBQUE7OzswQkFUMkI7MEJBQ0M7Z0NBSVY7K0VBQ0k7NkJBQ1A7Ozs7OztBQUVyQixNQUFNQSxxQkFBeUMsZUFBZUEsbUJBRW5FLEVBQ0VDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxNQUFNLEVBQ05DLElBQUksRUFDSkMsVUFBVSxFQUNWQyxNQUFNLENBQUMsQ0FBbUIsRUFDMUJDLElBQUksRUFDSkMsTUFBTUMsT0FBTyxFQUNiQyxLQUFLLEVBQ047SUFFRCxNQUFNQyxRQUFRLElBQUksQ0FBQ0MsUUFBUSxDQUFDWCxPQUFPO0lBQ25DLE1BQU1ZLGdCQUFnQkMsSUFBQUEsa0NBQXdCLEVBQzVDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRUMsSUFBSSxFQUFFLEdBQUtBLFNBQVNsQjtJQUUxRCxNQUFNbUIsVUFBVTtRQUNkLEdBQUdDLElBQUFBLHdCQUFXLEVBQUMsSUFBSSxFQUFFZixJQUFJZ0IsYUFBYSxDQUFDO1FBQ3ZDcEI7UUFDQUs7SUFDRjtJQUVBLElBQUlnQixvQkFBb0I7SUFFeEIsSUFBSWIsT0FBTztRQUNULE1BQU1jLGNBQWNDLElBQUFBLGlDQUF1QixFQUFDZjtRQUM1Q2Esb0JBQW9CQyxZQUFZRSxJQUFJLENBQUMsQ0FBQ0MsT0FBU0MsT0FBT0MsSUFBSSxDQUFDRixNQUFNRCxJQUFJLENBQUMsQ0FBQ0ksTUFBUUEsUUFBUTtJQUN6RjtJQUVBLElBQUl0QjtJQUNKLElBQUksQ0FBQ2UsbUJBQW1CO1FBQ3RCZixPQUFPdUIsSUFBQUEsOEJBQWMsRUFBQztZQUNwQmQsUUFBUSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0UsTUFBTTtZQUMzQmUsUUFBUW5CO1lBQ1JWO1lBQ0FLLE1BQU1DLFdBQVc7WUFDakJ3QixZQUFZO1FBQ2Q7SUFDRjtJQUVBLE1BQU1DLFFBQVEsTUFBTXZCLE1BQU13QixVQUFVLENBQUM7UUFDbkNDLFlBQVluQztRQUNaRTtRQUNBWSxTQUFTLElBQUksQ0FBQ0EsT0FBTztRQUNyQkw7SUFDRjtJQUVBLDRIQUE0SDtJQUM1SCxNQUFNMkIsb0JBQW9CZCxxQkFBcUIsQ0FBQ1csU0FBU04sT0FBT0MsSUFBSSxDQUFDSyxPQUFPSSxNQUFNLEtBQUs7SUFDdkYsTUFBTUMsb0JBQXFDO1FBQ3pDQyxjQUFjakI7UUFDZGtCLE1BQU07UUFDTkMsWUFBWTtRQUNaQyxRQUFRcEM7UUFDUmE7UUFDQWhCO1FBQ0FDO1FBQ0FHO1FBQ0E2QjtJQUNGO0lBRUEsSUFBSSxDQUFDQSxtQkFBbUI7UUFDdEIsMkhBQTJIO1FBQzNIRSxrQkFBa0JLLGdCQUFnQixHQUFHO1lBQ25DLE9BQU9DLFFBQVFDLE9BQU8sQ0FDcEJuQyxNQUFNb0MsY0FBYyxDQUFDYixPQUFPO2dCQUMxQmMsTUFBTTtvQkFBRUMsS0FBSztnQkFBRTtZQUNqQjtRQUVKO0lBQ0Y7SUFFQSxJQUFJL0MsUUFBUSxHQUFHO1FBQ2JxQyxrQkFBa0JyQyxLQUFLLEdBQUdBO1FBQzFCLHFFQUFxRTtRQUNyRXFDLGtCQUFrQm5CLE9BQU8sQ0FBQ2xCLEtBQUssR0FBR0E7SUFDcEM7SUFFQSxNQUFNZ0QsU0FBUyxNQUFNdkMsTUFBTXdDLFFBQVEsQ0FBQ2pCLE9BQU9LO0lBQzNDLE1BQU1hLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDTCxPQUFPRSxJQUFJO0lBRWxELE9BQU87UUFDTCxHQUFHRixNQUFNO1FBQ1RFLE1BQU1BLEtBQUtJLEdBQUcsQ0FBQyxDQUFDQztZQUNkLDZDQUE2QztZQUM3Q0EsSUFBSUMsRUFBRSxHQUFHRCxJQUFJUixHQUFHO1lBQ2hCLE9BQU9VLElBQUFBLCtCQUFzQixFQUFDRjtRQUNoQztJQUNGO0FBQ0YifQ==