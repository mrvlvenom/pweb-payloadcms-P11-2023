"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "find", {
    enumerable: true,
    get: function() {
        return find;
    }
});
const _database = require("payload/database");
const _buildSortParam = require("./queries/buildSortParam");
const _sanitizeInternalFields = /*#__PURE__*/ _interop_require_default(require("./utilities/sanitizeInternalFields"));
const _withSession = require("./withSession");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const find = async function find({ collection, limit, locale, page, pagination, req = {}, sort: sortArg, where }) {
    const Model = this.collections[collection];
    const collectionConfig = this.payload.collections[collection].config;
    const options = (0, _withSession.withSession)(this, req.transactionID);
    let hasNearConstraint = false;
    if (where) {
        const constraints = (0, _database.flattenWhereToOperators)(where);
        hasNearConstraint = constraints.some((prop)=>Object.keys(prop).some((key)=>key === 'near'));
    }
    let sort;
    if (!hasNearConstraint) {
        sort = (0, _buildSortParam.buildSortParam)({
            config: this.payload.config,
            fields: collectionConfig.fields,
            locale,
            sort: sortArg || collectionConfig.defaultSort,
            timestamps: true
        });
    }
    const query = await Model.buildQuery({
        locale,
        payload: this.payload,
        where
    });
    // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.
    const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0;
    const paginationOptions = {
        forceCountFn: hasNearConstraint,
        lean: true,
        leanWithId: true,
        options,
        page,
        pagination,
        sort,
        useEstimatedCount
    };
    if (!useEstimatedCount) {
        // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding a hint.
        paginationOptions.useCustomCountFn = ()=>{
            return Promise.resolve(Model.countDocuments(query, {
                hint: {
                    _id: 1
                }
            }));
        };
    }
    if (limit > 0) {
        paginationOptions.limit = limit;
        // limit must also be set here, it's ignored when pagination is false
        paginationOptions.options.limit = limit;
    }
    const result = await Model.paginate(query, paginationOptions);
    const docs = JSON.parse(JSON.stringify(result.docs));
    return {
        ...result,
        docs: docs.map((doc)=>{
            // eslint-disable-next-line no-param-reassign
            doc.id = doc._id;
            return (0, _sanitizeInternalFields.default)(doc);
        })
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9maW5kLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGFnaW5hdGVPcHRpb25zIH0gZnJvbSAnbW9uZ29vc2UnXG5pbXBvcnQgdHlwZSB7IEZpbmQgfSBmcm9tICdwYXlsb2FkL2RhdGFiYXNlJ1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkUmVxdWVzdCB9IGZyb20gJ3BheWxvYWQvdHlwZXMnXG5cbmltcG9ydCB7IGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzIH0gZnJvbSAncGF5bG9hZC9kYXRhYmFzZSdcblxuaW1wb3J0IHR5cGUgeyBNb25nb29zZUFkYXB0ZXIgfSBmcm9tICcuJ1xuXG5pbXBvcnQgeyBidWlsZFNvcnRQYXJhbSB9IGZyb20gJy4vcXVlcmllcy9idWlsZFNvcnRQYXJhbSdcbmltcG9ydCBzYW5pdGl6ZUludGVybmFsRmllbGRzIGZyb20gJy4vdXRpbGl0aWVzL3Nhbml0aXplSW50ZXJuYWxGaWVsZHMnXG5pbXBvcnQgeyB3aXRoU2Vzc2lvbiB9IGZyb20gJy4vd2l0aFNlc3Npb24nXG5cbmV4cG9ydCBjb25zdCBmaW5kOiBGaW5kID0gYXN5bmMgZnVuY3Rpb24gZmluZChcbiAgdGhpczogTW9uZ29vc2VBZGFwdGVyLFxuICB7IGNvbGxlY3Rpb24sIGxpbWl0LCBsb2NhbGUsIHBhZ2UsIHBhZ2luYXRpb24sIHJlcSA9IHt9IGFzIFBheWxvYWRSZXF1ZXN0LCBzb3J0OiBzb3J0QXJnLCB3aGVyZSB9LFxuKSB7XG4gIGNvbnN0IE1vZGVsID0gdGhpcy5jb2xsZWN0aW9uc1tjb2xsZWN0aW9uXVxuICBjb25zdCBjb2xsZWN0aW9uQ29uZmlnID0gdGhpcy5wYXlsb2FkLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25dLmNvbmZpZ1xuICBjb25zdCBvcHRpb25zID0gd2l0aFNlc3Npb24odGhpcywgcmVxLnRyYW5zYWN0aW9uSUQpXG5cbiAgbGV0IGhhc05lYXJDb25zdHJhaW50ID0gZmFsc2VcblxuICBpZiAod2hlcmUpIHtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IGZsYXR0ZW5XaGVyZVRvT3BlcmF0b3JzKHdoZXJlKVxuICAgIGhhc05lYXJDb25zdHJhaW50ID0gY29uc3RyYWludHMuc29tZSgocHJvcCkgPT4gT2JqZWN0LmtleXMocHJvcCkuc29tZSgoa2V5KSA9PiBrZXkgPT09ICduZWFyJykpXG4gIH1cblxuICBsZXQgc29ydFxuICBpZiAoIWhhc05lYXJDb25zdHJhaW50KSB7XG4gICAgc29ydCA9IGJ1aWxkU29ydFBhcmFtKHtcbiAgICAgIGNvbmZpZzogdGhpcy5wYXlsb2FkLmNvbmZpZyxcbiAgICAgIGZpZWxkczogY29sbGVjdGlvbkNvbmZpZy5maWVsZHMsXG4gICAgICBsb2NhbGUsXG4gICAgICBzb3J0OiBzb3J0QXJnIHx8IGNvbGxlY3Rpb25Db25maWcuZGVmYXVsdFNvcnQsXG4gICAgICB0aW1lc3RhbXBzOiB0cnVlLFxuICAgIH0pXG4gIH1cblxuICBjb25zdCBxdWVyeSA9IGF3YWl0IE1vZGVsLmJ1aWxkUXVlcnkoe1xuICAgIGxvY2FsZSxcbiAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQsXG4gICAgd2hlcmUsXG4gIH0pXG5cbiAgLy8gdXNlRXN0aW1hdGVkQ291bnQgaXMgZmFzdGVyLCBidXQgbm90IGFjY3VyYXRlLCBhcyBpdCBpZ25vcmVzIGFueSBmaWx0ZXJzLiBJdCBpcyB0aHVzIHNldCB0byB0cnVlIGlmIHRoZXJlIGFyZSBubyBmaWx0ZXJzLlxuICBjb25zdCB1c2VFc3RpbWF0ZWRDb3VudCA9IGhhc05lYXJDb25zdHJhaW50IHx8ICFxdWVyeSB8fCBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwXG4gIGNvbnN0IHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0ZU9wdGlvbnMgPSB7XG4gICAgZm9yY2VDb3VudEZuOiBoYXNOZWFyQ29uc3RyYWludCxcbiAgICBsZWFuOiB0cnVlLFxuICAgIGxlYW5XaXRoSWQ6IHRydWUsXG4gICAgb3B0aW9ucyxcbiAgICBwYWdlLFxuICAgIHBhZ2luYXRpb24sXG4gICAgc29ydCxcbiAgICB1c2VFc3RpbWF0ZWRDb3VudCxcbiAgfVxuXG4gIGlmICghdXNlRXN0aW1hdGVkQ291bnQpIHtcbiAgICAvLyBJbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY291bnREb2N1bWVudHMgcXVlcnkgd2hpY2ggaXMgdXNlZCBpZiB1c2VFc3RpbWF0ZWRDb3VudCBpcyBzZXQgdG8gZmFsc2UgYnkgYWRkaW5nIGEgaGludC5cbiAgICBwYWdpbmF0aW9uT3B0aW9ucy51c2VDdXN0b21Db3VudEZuID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShcbiAgICAgICAgTW9kZWwuY291bnREb2N1bWVudHMocXVlcnksIHtcbiAgICAgICAgICBoaW50OiB7IF9pZDogMSB9LFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBpZiAobGltaXQgPiAwKSB7XG4gICAgcGFnaW5hdGlvbk9wdGlvbnMubGltaXQgPSBsaW1pdFxuICAgIC8vIGxpbWl0IG11c3QgYWxzbyBiZSBzZXQgaGVyZSwgaXQncyBpZ25vcmVkIHdoZW4gcGFnaW5hdGlvbiBpcyBmYWxzZVxuICAgIHBhZ2luYXRpb25PcHRpb25zLm9wdGlvbnMubGltaXQgPSBsaW1pdFxuICB9XG5cbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgTW9kZWwucGFnaW5hdGUocXVlcnksIHBhZ2luYXRpb25PcHRpb25zKVxuICBjb25zdCBkb2NzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQuZG9jcykpXG5cbiAgcmV0dXJuIHtcbiAgICAuLi5yZXN1bHQsXG4gICAgZG9jczogZG9jcy5tYXAoKGRvYykgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBkb2MuaWQgPSBkb2MuX2lkXG4gICAgICByZXR1cm4gc2FuaXRpemVJbnRlcm5hbEZpZWxkcyhkb2MpXG4gICAgfSksXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmaW5kIiwiY29sbGVjdGlvbiIsImxpbWl0IiwibG9jYWxlIiwicGFnZSIsInBhZ2luYXRpb24iLCJyZXEiLCJzb3J0Iiwic29ydEFyZyIsIndoZXJlIiwiTW9kZWwiLCJjb2xsZWN0aW9ucyIsImNvbGxlY3Rpb25Db25maWciLCJwYXlsb2FkIiwiY29uZmlnIiwib3B0aW9ucyIsIndpdGhTZXNzaW9uIiwidHJhbnNhY3Rpb25JRCIsImhhc05lYXJDb25zdHJhaW50IiwiY29uc3RyYWludHMiLCJmbGF0dGVuV2hlcmVUb09wZXJhdG9ycyIsInNvbWUiLCJwcm9wIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImJ1aWxkU29ydFBhcmFtIiwiZmllbGRzIiwiZGVmYXVsdFNvcnQiLCJ0aW1lc3RhbXBzIiwicXVlcnkiLCJidWlsZFF1ZXJ5IiwidXNlRXN0aW1hdGVkQ291bnQiLCJsZW5ndGgiLCJwYWdpbmF0aW9uT3B0aW9ucyIsImZvcmNlQ291bnRGbiIsImxlYW4iLCJsZWFuV2l0aElkIiwidXNlQ3VzdG9tQ291bnRGbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiY291bnREb2N1bWVudHMiLCJoaW50IiwiX2lkIiwicmVzdWx0IiwicGFnaW5hdGUiLCJkb2NzIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwibWFwIiwiZG9jIiwiaWQiLCJzYW5pdGl6ZUludGVybmFsRmllbGRzIl0sIm1hcHBpbmdzIjoiOzs7OytCQVlhQTs7O2VBQUFBOzs7MEJBUjJCO2dDQUlUOytFQUNJOzZCQUNQOzs7Ozs7QUFFckIsTUFBTUEsT0FBYSxlQUFlQSxLQUV2QyxFQUFFQyxVQUFVLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxDQUFDLENBQW1CLEVBQUVDLE1BQU1DLE9BQU8sRUFBRUMsS0FBSyxFQUFFO0lBRWpHLE1BQU1DLFFBQVEsSUFBSSxDQUFDQyxXQUFXLENBQUNWLFdBQVc7SUFDMUMsTUFBTVcsbUJBQW1CLElBQUksQ0FBQ0MsT0FBTyxDQUFDRixXQUFXLENBQUNWLFdBQVcsQ0FBQ2EsTUFBTTtJQUNwRSxNQUFNQyxVQUFVQyxJQUFBQSx3QkFBVyxFQUFDLElBQUksRUFBRVYsSUFBSVcsYUFBYTtJQUVuRCxJQUFJQyxvQkFBb0I7SUFFeEIsSUFBSVQsT0FBTztRQUNULE1BQU1VLGNBQWNDLElBQUFBLGlDQUF1QixFQUFDWDtRQUM1Q1Msb0JBQW9CQyxZQUFZRSxJQUFJLENBQUMsQ0FBQ0MsT0FBU0MsT0FBT0MsSUFBSSxDQUFDRixNQUFNRCxJQUFJLENBQUMsQ0FBQ0ksTUFBUUEsUUFBUTtJQUN6RjtJQUVBLElBQUlsQjtJQUNKLElBQUksQ0FBQ1csbUJBQW1CO1FBQ3RCWCxPQUFPbUIsSUFBQUEsOEJBQWMsRUFBQztZQUNwQlosUUFBUSxJQUFJLENBQUNELE9BQU8sQ0FBQ0MsTUFBTTtZQUMzQmEsUUFBUWYsaUJBQWlCZSxNQUFNO1lBQy9CeEI7WUFDQUksTUFBTUMsV0FBV0ksaUJBQWlCZ0IsV0FBVztZQUM3Q0MsWUFBWTtRQUNkO0lBQ0Y7SUFFQSxNQUFNQyxRQUFRLE1BQU1wQixNQUFNcUIsVUFBVSxDQUFDO1FBQ25DNUI7UUFDQVUsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFDckJKO0lBQ0Y7SUFFQSw0SEFBNEg7SUFDNUgsTUFBTXVCLG9CQUFvQmQscUJBQXFCLENBQUNZLFNBQVNQLE9BQU9DLElBQUksQ0FBQ00sT0FBT0csTUFBTSxLQUFLO0lBQ3ZGLE1BQU1DLG9CQUFxQztRQUN6Q0MsY0FBY2pCO1FBQ2RrQixNQUFNO1FBQ05DLFlBQVk7UUFDWnRCO1FBQ0FYO1FBQ0FDO1FBQ0FFO1FBQ0F5QjtJQUNGO0lBRUEsSUFBSSxDQUFDQSxtQkFBbUI7UUFDdEIsMkhBQTJIO1FBQzNIRSxrQkFBa0JJLGdCQUFnQixHQUFHO1lBQ25DLE9BQU9DLFFBQVFDLE9BQU8sQ0FDcEI5QixNQUFNK0IsY0FBYyxDQUFDWCxPQUFPO2dCQUMxQlksTUFBTTtvQkFBRUMsS0FBSztnQkFBRTtZQUNqQjtRQUVKO0lBQ0Y7SUFFQSxJQUFJekMsUUFBUSxHQUFHO1FBQ2JnQyxrQkFBa0JoQyxLQUFLLEdBQUdBO1FBQzFCLHFFQUFxRTtRQUNyRWdDLGtCQUFrQm5CLE9BQU8sQ0FBQ2IsS0FBSyxHQUFHQTtJQUNwQztJQUVBLE1BQU0wQyxTQUFTLE1BQU1sQyxNQUFNbUMsUUFBUSxDQUFDZixPQUFPSTtJQUMzQyxNQUFNWSxPQUFPQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLFNBQVMsQ0FBQ0wsT0FBT0UsSUFBSTtJQUVsRCxPQUFPO1FBQ0wsR0FBR0YsTUFBTTtRQUNURSxNQUFNQSxLQUFLSSxHQUFHLENBQUMsQ0FBQ0M7WUFDZCw2Q0FBNkM7WUFDN0NBLElBQUlDLEVBQUUsR0FBR0QsSUFBSVIsR0FBRztZQUNoQixPQUFPVSxJQUFBQSwrQkFBc0IsRUFBQ0Y7UUFDaEM7SUFDRjtBQUNGIn0=