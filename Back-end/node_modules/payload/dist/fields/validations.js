"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    number: function() {
        return number;
    },
    text: function() {
        return text;
    },
    password: function() {
        return password;
    },
    email: function() {
        return email;
    },
    textarea: function() {
        return textarea;
    },
    code: function() {
        return code;
    },
    json: function() {
        return json;
    },
    checkbox: function() {
        return checkbox;
    },
    date: function() {
        return date;
    },
    richText: function() {
        return richText;
    },
    upload: function() {
        return upload;
    },
    relationship: function() {
        return relationship;
    },
    array: function() {
        return array;
    },
    select: function() {
        return select;
    },
    radio: function() {
        return radio;
    },
    blocks: function() {
        return blocks;
    },
    point: function() {
        return point;
    },
    default: function() {
        return _default;
    }
});
const _canUseDOM = /*#__PURE__*/ _interop_require_default(require("../utilities/canUseDOM"));
const _getIDType = require("../utilities/getIDType");
const _isValidID = require("../utilities/isValidID");
const _types = require("./config/types");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const number = (value, { hasMany, max, maxRows, min, minRows, required, t })=>{
    const toValidate = Array.isArray(value) ? value : [
        value
    ];
    // eslint-disable-next-line no-restricted-syntax
    for (const valueToValidate of toValidate){
        const floatValue = parseFloat(valueToValidate);
        if (value && typeof floatValue !== 'number' || required && Number.isNaN(floatValue) || value && Number.isNaN(floatValue)) {
            return t('validation:enterNumber');
        }
        if (typeof max === 'number' && floatValue > max) {
            return t('validation:greaterThanMax', {
                label: t('value'),
                max,
                value
            });
        }
        if (typeof min === 'number' && floatValue < min) {
            return t('validation:lessThanMin', {
                label: t('value'),
                min,
                value
            });
        }
        if (required && typeof floatValue !== 'number') {
            return t('validation:required');
        }
    }
    if (required && toValidate.length === 0) {
        return t('validation:required');
    }
    if (hasMany === true) {
        if (minRows && toValidate.length < minRows) {
            return t('validation:lessThanMin', {
                label: t('rows'),
                min: minRows,
                value: toValidate.length
            });
        }
        if (maxRows && toValidate.length > maxRows) {
            return t('validation:greaterThanMax', {
                label: t('rows'),
                max: maxRows,
                value: toValidate.length
            });
        }
    }
    return true;
};
const text = (value, { config, maxLength: fieldMaxLength, minLength, payload, required, t })=>{
    let maxLength;
    if (typeof config?.defaultMaxTextLength === 'number') maxLength = config.defaultMaxTextLength;
    if (typeof fieldMaxLength === 'number') maxLength = fieldMaxLength;
    if (value && maxLength && value.length > maxLength) {
        return t('validation:shorterThanMax', {
            maxLength
        });
    }
    if (value && minLength && value?.length < minLength) {
        return t('validation:longerThanMin', {
            minLength
        });
    }
    if (required) {
        if (typeof value !== 'string' || value?.length === 0) {
            return t('validation:required');
        }
    }
    return true;
};
const password = (value, { config, maxLength: fieldMaxLength, minLength, payload, required, t })=>{
    let maxLength;
    if (typeof config?.defaultMaxTextLength === 'number') maxLength = config.defaultMaxTextLength;
    if (typeof fieldMaxLength === 'number') maxLength = fieldMaxLength;
    if (value && maxLength && value.length > maxLength) {
        return t('validation:shorterThanMax', {
            maxLength
        });
    }
    if (value && minLength && value.length < minLength) {
        return t('validation:longerThanMin', {
            minLength
        });
    }
    if (required && !value) {
        return t('validation:required');
    }
    return true;
};
const email = (value, { required, t })=>{
    if (value && !/\S[^\s@]*@\S+\.\S+/.test(value) || !value && required) {
        return t('validation:emailAddress');
    }
    return true;
};
const textarea = (value, { config, maxLength: fieldMaxLength, minLength, payload, required, t })=>{
    let maxLength;
    if (typeof config?.defaultMaxTextLength === 'number') maxLength = config.defaultMaxTextLength;
    if (typeof fieldMaxLength === 'number') maxLength = fieldMaxLength;
    if (value && maxLength && value.length > maxLength) {
        return t('validation:shorterThanMax', {
            maxLength
        });
    }
    if (value && minLength && value.length < minLength) {
        return t('validation:longerThanMin', {
            minLength
        });
    }
    if (required && !value) {
        return t('validation:required');
    }
    return true;
};
const code = (value, { required, t })=>{
    if (required && value === undefined) {
        return t('validation:required');
    }
    return true;
};
const json = (value, { jsonError, required, t })=>{
    if (required && !value) {
        return t('validation:required');
    }
    if (jsonError !== undefined) {
        return t('validation:invalidInput');
    }
    return true;
};
const checkbox = (value, { required, t })=>{
    if (value && typeof value !== 'boolean' || required && typeof value !== 'boolean') {
        return t('validation:trueOrFalse');
    }
    return true;
};
const date = (value, { required, t })=>{
    if (value && !isNaN(Date.parse(value.toString()))) {
        /* eslint-disable-line */ return true;
    }
    if (value) {
        return t('validation:notValidDate', {
            value
        });
    }
    if (required) {
        return t('validation:required');
    }
    return true;
};
const richText = async (value, options)=>{
    const editor = options?.editor;
    return await editor.validate(value, options);
};
const validateFilterOptions = async (value, { id, data, filterOptions, payload, relationTo, siblingData, t, user })=>{
    if (!_canUseDOM.default && typeof filterOptions !== 'undefined' && value) {
        const options = {};
        const collections = typeof relationTo === 'string' ? [
            relationTo
        ] : relationTo;
        const values = Array.isArray(value) ? value : [
            value
        ];
        await Promise.all(collections.map(async (collection)=>{
            const optionFilter = typeof filterOptions === 'function' ? await filterOptions({
                id,
                data,
                relationTo: collection,
                siblingData,
                user
            }) : filterOptions;
            const valueIDs = [];
            values.forEach((val)=>{
                if (typeof val === 'object' && val?.value) {
                    valueIDs.push(val.value);
                }
                if (typeof val === 'string' || typeof val === 'number') {
                    valueIDs.push(val);
                }
            });
            if (valueIDs.length > 0) {
                const findWhere = {
                    and: [
                        {
                            id: {
                                in: valueIDs
                            }
                        }
                    ]
                };
                if (optionFilter) findWhere.and.push(optionFilter);
                const result = await payload.find({
                    collection,
                    depth: 0,
                    limit: 0,
                    pagination: false,
                    where: findWhere
                });
                options[collection] = result.docs.map((doc)=>doc.id);
            } else {
                options[collection] = [];
            }
        }));
        const invalidRelationships = values.filter((val)=>{
            let collection;
            let requestedID;
            if (typeof relationTo === 'string') {
                collection = relationTo;
                if (typeof val === 'string' || typeof val === 'number') {
                    requestedID = val;
                }
            }
            if (Array.isArray(relationTo) && typeof val === 'object' && val?.relationTo) {
                collection = val.relationTo;
                requestedID = val.value;
            }
            return options[collection].indexOf(requestedID) === -1;
        });
        if (invalidRelationships.length > 0) {
            return invalidRelationships.reduce((err, invalid, i)=>{
                return `${err} ${JSON.stringify(invalid)}${invalidRelationships.length === i + 1 ? ',' : ''} `;
            }, t('validation:invalidSelections'));
        }
        return true;
    }
    return true;
};
const upload = (value, options)=>{
    if (!value && options.required) {
        return options.t('validation:required');
    }
    if (!_canUseDOM.default && typeof value !== 'undefined' && value !== null) {
        const idField = options?.config?.collections?.find((collection)=>collection.slug === options.relationTo)?.fields?.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
        const type = (0, _getIDType.getIDType)(idField, options?.payload?.db?.defaultIDType);
        if (!(0, _isValidID.isValidID)(value, type)) {
            return options.t('validation:validUploadID');
        }
    }
    return validateFilterOptions(value, options);
};
const relationship = async (value, options)=>{
    const { config, maxRows, minRows, payload, relationTo, required, t } = options;
    if ((!value || Array.isArray(value) && value.length === 0) && required) {
        return t('validation:required');
    }
    if (Array.isArray(value)) {
        if (minRows && value.length < minRows) {
            return t('validation:lessThanMin', {
                label: t('rows'),
                min: minRows,
                value: value.length
            });
        }
        if (maxRows && value.length > maxRows) {
            return t('validation:greaterThanMax', {
                label: t('rows'),
                max: maxRows,
                value: value.length
            });
        }
    }
    if (!_canUseDOM.default && typeof value !== 'undefined' && value !== null) {
        const values = Array.isArray(value) ? value : [
            value
        ];
        const invalidRelationships = values.filter((val)=>{
            let collectionSlug;
            let requestedID;
            if (typeof relationTo === 'string') {
                collectionSlug = relationTo;
                // custom id
                if (val) {
                    requestedID = val;
                }
            }
            if (Array.isArray(relationTo) && typeof val === 'object' && val?.relationTo) {
                collectionSlug = val.relationTo;
                requestedID = val.value;
            }
            if (requestedID === null) return false;
            const idField = config?.collections?.find((collection)=>collection.slug === collectionSlug)?.fields?.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
            const type = (0, _getIDType.getIDType)(idField, payload?.db?.defaultIDType);
            return !(0, _isValidID.isValidID)(requestedID, type);
        });
        if (invalidRelationships.length > 0) {
            return `This relationship field has the following invalid relationships: ${invalidRelationships.map((err, invalid)=>{
                return `${err} ${JSON.stringify(invalid)}`;
            }).join(', ')}`;
        }
    }
    return validateFilterOptions(value, options);
};
const array = (value, { maxRows, minRows, required, t })=>{
    const arrayLength = Array.isArray(value) ? value.length : 0;
    if (minRows && arrayLength < minRows) {
        return t('validation:requiresAtLeast', {
            count: minRows,
            label: t('rows')
        });
    }
    if (maxRows && arrayLength > maxRows) {
        return t('validation:requiresNoMoreThan', {
            count: maxRows,
            label: t('rows')
        });
    }
    if (!arrayLength && required) {
        return t('validation:requiresAtLeast', {
            count: 1,
            label: t('row')
        });
    }
    return true;
};
const select = (value, { hasMany, options, required, t })=>{
    if (Array.isArray(value) && value.some((input)=>!options.some((option)=>option === input || typeof option !== 'string' && option?.value === input))) {
        return t('validation:invalidSelection');
    }
    if (typeof value === 'string' && !options.some((option)=>option === value || typeof option !== 'string' && option.value === value)) {
        return t('validation:invalidSelection');
    }
    if (required && (typeof value === 'undefined' || value === null || hasMany && Array.isArray(value) && value?.length === 0)) {
        return t('validation:required');
    }
    return true;
};
const radio = (value, { options, required, t })=>{
    if (value) {
        const valueMatchesOption = options.some((option)=>option === value || typeof option !== 'string' && option.value === value);
        return valueMatchesOption || t('validation:invalidSelection');
    }
    return required ? t('validation:required') : true;
};
const blocks = (value, { maxRows, minRows, required, t })=>{
    const arrayLength = Array.isArray(value) ? value.length : 0;
    if (minRows && arrayLength < minRows) {
        return t('validation:requiresAtLeast', {
            count: minRows,
            label: t('rows')
        });
    }
    if (maxRows && arrayLength > maxRows) {
        return t('validation:requiresNoMoreThan', {
            count: maxRows,
            label: t('rows')
        });
    }
    if (!arrayLength && required) {
        return t('validation:requiresAtLeast', {
            count: 1,
            label: t('row')
        });
    }
    return true;
};
const point = (value = [
    '',
    ''
], { required, t })=>{
    const lng = parseFloat(String(value[0]));
    const lat = parseFloat(String(value[1]));
    if (required && (value[0] && value[1] && typeof lng !== 'number' && typeof lat !== 'number' || Number.isNaN(lng) || Number.isNaN(lat) || Array.isArray(value) && value.length !== 2)) {
        return t('validation:requiresTwoNumbers');
    }
    if (value[1] && Number.isNaN(lng) || value[0] && Number.isNaN(lat)) {
        return t('validation:invalidInput');
    }
    return true;
};
const _default = {
    array,
    blocks,
    checkbox,
    code,
    date,
    email,
    json,
    number,
    password,
    point,
    radio,
    relationship,
    richText,
    select,
    text,
    textarea,
    upload
};

//# sourceMappingURL=data:application/json;base64,