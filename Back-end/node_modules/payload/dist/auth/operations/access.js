"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _getEntityPolicies = require("../../utilities/getEntityPolicies");
const _adminInit = require("../../utilities/telemetry/events/adminInit");
const allOperations = [
    'create',
    'read',
    'update',
    'delete'
];
async function accessOperation(args) {
    const { req, req: { payload: { config }, user } } = args;
    (0, _adminInit.adminInit)(req);
    const results = {};
    const isLoggedIn = !!user;
    const userCollectionConfig = user && user.collection ? config.collections.find((collection)=>collection.slug === user.collection) : null;
    if (userCollectionConfig) {
        results.canAccessAdmin = userCollectionConfig.access.admin ? await userCollectionConfig.access.admin(args) : isLoggedIn;
    } else {
        results.canAccessAdmin = false;
    }
    await Promise.all(config.collections.map(async (collection)=>{
        const collectionOperations = [
            ...allOperations
        ];
        if (collection.auth && typeof collection.auth.maxLoginAttempts !== 'undefined' && collection.auth.maxLoginAttempts !== 0) {
            collectionOperations.push('unlock');
        }
        if (collection.versions) {
            collectionOperations.push('readVersions');
        }
        const collectionPolicy = await (0, _getEntityPolicies.getEntityPolicies)({
            entity: collection,
            operations: collectionOperations,
            req,
            type: 'collection'
        });
        results.collections = {
            ...results.collections,
            [collection.slug]: collectionPolicy
        };
    }));
    await Promise.all(config.globals.map(async (global)=>{
        const globalOperations = [
            'read',
            'update'
        ];
        if (global.versions) {
            globalOperations.push('readVersions');
        }
        const globalPolicy = await (0, _getEntityPolicies.getEntityPolicies)({
            entity: global,
            operations: globalOperations,
            req,
            type: 'global'
        });
        results.globals = {
            ...results.globals,
            [global.slug]: globalPolicy
        };
    }));
    return results;
}
const _default = accessOperation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hdXRoL29wZXJhdGlvbnMvYWNjZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUGF5bG9hZFJlcXVlc3QgfSBmcm9tICcuLi8uLi9leHByZXNzL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBBbGxPcGVyYXRpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFBlcm1pc3Npb25zIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmltcG9ydCB7IGdldEVudGl0eVBvbGljaWVzIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2dldEVudGl0eVBvbGljaWVzJ1xuaW1wb3J0IHsgYWRtaW5Jbml0IGFzIGFkbWluSW5pdFRlbGVtZXRyeSB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy90ZWxlbWV0cnkvZXZlbnRzL2FkbWluSW5pdCdcblxuY29uc3QgYWxsT3BlcmF0aW9uczogQWxsT3BlcmF0aW9uc1tdID0gWydjcmVhdGUnLCAncmVhZCcsICd1cGRhdGUnLCAnZGVsZXRlJ11cblxudHlwZSBBcmd1bWVudHMgPSB7XG4gIHJlcTogUGF5bG9hZFJlcXVlc3Rcbn1cblxuYXN5bmMgZnVuY3Rpb24gYWNjZXNzT3BlcmF0aW9uKGFyZ3M6IEFyZ3VtZW50cyk6IFByb21pc2U8UGVybWlzc2lvbnM+IHtcbiAgY29uc3Qge1xuICAgIHJlcSxcbiAgICByZXE6IHtcbiAgICAgIHBheWxvYWQ6IHsgY29uZmlnIH0sXG4gICAgICB1c2VyLFxuICAgIH0sXG4gIH0gPSBhcmdzXG5cbiAgYWRtaW5Jbml0VGVsZW1ldHJ5KHJlcSlcblxuICBjb25zdCByZXN1bHRzID0ge30gYXMgUGVybWlzc2lvbnNcblxuICBjb25zdCBpc0xvZ2dlZEluID0gISF1c2VyXG4gIGNvbnN0IHVzZXJDb2xsZWN0aW9uQ29uZmlnID1cbiAgICB1c2VyICYmIHVzZXIuY29sbGVjdGlvblxuICAgICAgPyBjb25maWcuY29sbGVjdGlvbnMuZmluZCgoY29sbGVjdGlvbikgPT4gY29sbGVjdGlvbi5zbHVnID09PSB1c2VyLmNvbGxlY3Rpb24pXG4gICAgICA6IG51bGxcblxuICBpZiAodXNlckNvbGxlY3Rpb25Db25maWcpIHtcbiAgICByZXN1bHRzLmNhbkFjY2Vzc0FkbWluID0gdXNlckNvbGxlY3Rpb25Db25maWcuYWNjZXNzLmFkbWluXG4gICAgICA/IGF3YWl0IHVzZXJDb2xsZWN0aW9uQ29uZmlnLmFjY2Vzcy5hZG1pbihhcmdzKVxuICAgICAgOiBpc0xvZ2dlZEluXG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0cy5jYW5BY2Nlc3NBZG1pbiA9IGZhbHNlXG4gIH1cblxuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBjb25maWcuY29sbGVjdGlvbnMubWFwKGFzeW5jIChjb2xsZWN0aW9uKSA9PiB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uT3BlcmF0aW9ucyA9IFsuLi5hbGxPcGVyYXRpb25zXVxuXG4gICAgICBpZiAoXG4gICAgICAgIGNvbGxlY3Rpb24uYXV0aCAmJlxuICAgICAgICB0eXBlb2YgY29sbGVjdGlvbi5hdXRoLm1heExvZ2luQXR0ZW1wdHMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIGNvbGxlY3Rpb24uYXV0aC5tYXhMb2dpbkF0dGVtcHRzICE9PSAwXG4gICAgICApIHtcbiAgICAgICAgY29sbGVjdGlvbk9wZXJhdGlvbnMucHVzaCgndW5sb2NrJylcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbGxlY3Rpb24udmVyc2lvbnMpIHtcbiAgICAgICAgY29sbGVjdGlvbk9wZXJhdGlvbnMucHVzaCgncmVhZFZlcnNpb25zJylcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29sbGVjdGlvblBvbGljeSA9IGF3YWl0IGdldEVudGl0eVBvbGljaWVzKHtcbiAgICAgICAgZW50aXR5OiBjb2xsZWN0aW9uLFxuICAgICAgICBvcGVyYXRpb25zOiBjb2xsZWN0aW9uT3BlcmF0aW9ucyxcbiAgICAgICAgcmVxLFxuICAgICAgICB0eXBlOiAnY29sbGVjdGlvbicsXG4gICAgICB9KVxuICAgICAgcmVzdWx0cy5jb2xsZWN0aW9ucyA9IHtcbiAgICAgICAgLi4ucmVzdWx0cy5jb2xsZWN0aW9ucyxcbiAgICAgICAgW2NvbGxlY3Rpb24uc2x1Z106IGNvbGxlY3Rpb25Qb2xpY3ksXG4gICAgICB9XG4gICAgfSksXG4gIClcblxuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBjb25maWcuZ2xvYmFscy5tYXAoYXN5bmMgKGdsb2JhbCkgPT4ge1xuICAgICAgY29uc3QgZ2xvYmFsT3BlcmF0aW9uczogQWxsT3BlcmF0aW9uc1tdID0gWydyZWFkJywgJ3VwZGF0ZSddXG5cbiAgICAgIGlmIChnbG9iYWwudmVyc2lvbnMpIHtcbiAgICAgICAgZ2xvYmFsT3BlcmF0aW9ucy5wdXNoKCdyZWFkVmVyc2lvbnMnKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBnbG9iYWxQb2xpY3kgPSBhd2FpdCBnZXRFbnRpdHlQb2xpY2llcyh7XG4gICAgICAgIGVudGl0eTogZ2xvYmFsLFxuICAgICAgICBvcGVyYXRpb25zOiBnbG9iYWxPcGVyYXRpb25zLFxuICAgICAgICByZXEsXG4gICAgICAgIHR5cGU6ICdnbG9iYWwnLFxuICAgICAgfSlcbiAgICAgIHJlc3VsdHMuZ2xvYmFscyA9IHtcbiAgICAgICAgLi4ucmVzdWx0cy5nbG9iYWxzLFxuICAgICAgICBbZ2xvYmFsLnNsdWddOiBnbG9iYWxQb2xpY3ksXG4gICAgICB9XG4gICAgfSksXG4gIClcblxuICByZXR1cm4gcmVzdWx0c1xufVxuXG5leHBvcnQgZGVmYXVsdCBhY2Nlc3NPcGVyYXRpb25cbiJdLCJuYW1lcyI6WyJhbGxPcGVyYXRpb25zIiwiYWNjZXNzT3BlcmF0aW9uIiwiYXJncyIsInJlcSIsInBheWxvYWQiLCJjb25maWciLCJ1c2VyIiwiYWRtaW5Jbml0VGVsZW1ldHJ5IiwicmVzdWx0cyIsImlzTG9nZ2VkSW4iLCJ1c2VyQ29sbGVjdGlvbkNvbmZpZyIsImNvbGxlY3Rpb24iLCJjb2xsZWN0aW9ucyIsImZpbmQiLCJzbHVnIiwiY2FuQWNjZXNzQWRtaW4iLCJhY2Nlc3MiLCJhZG1pbiIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjb2xsZWN0aW9uT3BlcmF0aW9ucyIsImF1dGgiLCJtYXhMb2dpbkF0dGVtcHRzIiwicHVzaCIsInZlcnNpb25zIiwiY29sbGVjdGlvblBvbGljeSIsImdldEVudGl0eVBvbGljaWVzIiwiZW50aXR5Iiwib3BlcmF0aW9ucyIsInR5cGUiLCJnbG9iYWxzIiwiZ2xvYmFsIiwiZ2xvYmFsT3BlcmF0aW9ucyIsImdsb2JhbFBvbGljeSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE2RkE7OztlQUFBOzs7bUNBekZrQzsyQkFDYztBQUVoRCxNQUFNQSxnQkFBaUM7SUFBQztJQUFVO0lBQVE7SUFBVTtDQUFTO0FBTTdFLGVBQWVDLGdCQUFnQkMsSUFBZTtJQUM1QyxNQUFNLEVBQ0pDLEdBQUcsRUFDSEEsS0FBSyxFQUNIQyxTQUFTLEVBQUVDLE1BQU0sRUFBRSxFQUNuQkMsSUFBSSxFQUNMLEVBQ0YsR0FBR0o7SUFFSkssSUFBQUEsb0JBQWtCLEVBQUNKO0lBRW5CLE1BQU1LLFVBQVUsQ0FBQztJQUVqQixNQUFNQyxhQUFhLENBQUMsQ0FBQ0g7SUFDckIsTUFBTUksdUJBQ0pKLFFBQVFBLEtBQUtLLFVBQVUsR0FDbkJOLE9BQU9PLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDLENBQUNGLGFBQWVBLFdBQVdHLElBQUksS0FBS1IsS0FBS0ssVUFBVSxJQUMzRTtJQUVOLElBQUlELHNCQUFzQjtRQUN4QkYsUUFBUU8sY0FBYyxHQUFHTCxxQkFBcUJNLE1BQU0sQ0FBQ0MsS0FBSyxHQUN0RCxNQUFNUCxxQkFBcUJNLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDZixRQUN4Q087SUFDTixPQUFPO1FBQ0xELFFBQVFPLGNBQWMsR0FBRztJQUMzQjtJQUVBLE1BQU1HLFFBQVFDLEdBQUcsQ0FDZmQsT0FBT08sV0FBVyxDQUFDUSxHQUFHLENBQUMsT0FBT1Q7UUFDNUIsTUFBTVUsdUJBQXVCO2VBQUlyQjtTQUFjO1FBRS9DLElBQ0VXLFdBQVdXLElBQUksSUFDZixPQUFPWCxXQUFXVyxJQUFJLENBQUNDLGdCQUFnQixLQUFLLGVBQzVDWixXQUFXVyxJQUFJLENBQUNDLGdCQUFnQixLQUFLLEdBQ3JDO1lBQ0FGLHFCQUFxQkcsSUFBSSxDQUFDO1FBQzVCO1FBRUEsSUFBSWIsV0FBV2MsUUFBUSxFQUFFO1lBQ3ZCSixxQkFBcUJHLElBQUksQ0FBQztRQUM1QjtRQUVBLE1BQU1FLG1CQUFtQixNQUFNQyxJQUFBQSxvQ0FBaUIsRUFBQztZQUMvQ0MsUUFBUWpCO1lBQ1JrQixZQUFZUjtZQUNabEI7WUFDQTJCLE1BQU07UUFDUjtRQUNBdEIsUUFBUUksV0FBVyxHQUFHO1lBQ3BCLEdBQUdKLFFBQVFJLFdBQVc7WUFDdEIsQ0FBQ0QsV0FBV0csSUFBSSxDQUFDLEVBQUVZO1FBQ3JCO0lBQ0Y7SUFHRixNQUFNUixRQUFRQyxHQUFHLENBQ2ZkLE9BQU8wQixPQUFPLENBQUNYLEdBQUcsQ0FBQyxPQUFPWTtRQUN4QixNQUFNQyxtQkFBb0M7WUFBQztZQUFRO1NBQVM7UUFFNUQsSUFBSUQsT0FBT1AsUUFBUSxFQUFFO1lBQ25CUSxpQkFBaUJULElBQUksQ0FBQztRQUN4QjtRQUVBLE1BQU1VLGVBQWUsTUFBTVAsSUFBQUEsb0NBQWlCLEVBQUM7WUFDM0NDLFFBQVFJO1lBQ1JILFlBQVlJO1lBQ1o5QjtZQUNBMkIsTUFBTTtRQUNSO1FBQ0F0QixRQUFRdUIsT0FBTyxHQUFHO1lBQ2hCLEdBQUd2QixRQUFRdUIsT0FBTztZQUNsQixDQUFDQyxPQUFPbEIsSUFBSSxDQUFDLEVBQUVvQjtRQUNqQjtJQUNGO0lBR0YsT0FBTzFCO0FBQ1Q7TUFFQSxXQUFlUCJ9