"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    hasTransport: function() {
        return hasTransport;
    },
    hasTransportOptions: function() {
        return hasTransportOptions;
    }
});
function hasTransport(emailConfig) {
    return emailConfig.transport !== undefined;
}
function hasTransportOptions(emailConfig) {
    return emailConfig.transportOptions !== undefined;
}

//# sourceMappingURL=data:application/json;base64,