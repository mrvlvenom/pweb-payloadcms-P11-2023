"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    endpointsSchema: function() {
        return endpointsSchema;
    },
    default: function() {
        return _default;
    }
});
const _joi = /*#__PURE__*/ _interop_require_default(require("joi"));
const _adminViewSchema = require("./shared/adminViewSchema");
const _componentSchema = require("./shared/componentSchema");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const component = _joi.default.alternatives().try(_joi.default.object().unknown(), _joi.default.func());
const endpointsSchema = _joi.default.alternatives().try(_joi.default.array().items(_joi.default.object({
    custom: _joi.default.object().pattern(_joi.default.string(), _joi.default.any()),
    handler: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.func()), _joi.default.func()),
    method: _joi.default.string().valid('get', 'head', 'post', 'put', 'patch', 'delete', 'connect', 'options'),
    path: _joi.default.string(),
    root: _joi.default.bool()
})), _joi.default.boolean());
const _default = _joi.default.object({
    admin: _joi.default.object({
        autoLogin: _joi.default.alternatives().try(_joi.default.object().keys({
            email: _joi.default.string(),
            password: _joi.default.string(),
            prefillOnly: _joi.default.boolean()
        }), _joi.default.boolean()),
        avatar: _joi.default.alternatives().try(_joi.default.string(), component),
        buildPath: _joi.default.string(),
        bundler: {
            build: _joi.default.func(),
            dev: _joi.default.func(),
            serve: _joi.default.func()
        },
        components: _joi.default.object().keys({
            Nav: component,
            afterDashboard: _joi.default.array().items(component),
            afterLogin: _joi.default.array().items(component),
            afterNavLinks: _joi.default.array().items(component),
            beforeDashboard: _joi.default.array().items(component),
            beforeLogin: _joi.default.array().items(component),
            beforeNavLinks: _joi.default.array().items(component),
            graphics: _joi.default.object({
                Icon: component,
                Logo: component
            }),
            logout: _joi.default.object({
                Button: component
            }),
            providers: _joi.default.array().items(component),
            views: _joi.default.alternatives().try(_joi.default.object({
                Account: _joi.default.alternatives().try(component, _adminViewSchema.adminViewSchema),
                Dashboard: _joi.default.alternatives().try(component, _adminViewSchema.adminViewSchema)
            }), _joi.default.object().pattern(_joi.default.string(), component))
        }),
        css: _joi.default.string(),
        dateFormat: _joi.default.string(),
        disable: _joi.default.bool(),
        inactivityRoute: _joi.default.string(),
        indexHTML: _joi.default.string(),
        livePreview: _joi.default.object({
            ..._componentSchema.livePreviewSchema,
            collections: _joi.default.array().items(_joi.default.string()),
            globals: _joi.default.array().items(_joi.default.string())
        }),
        logoutRoute: _joi.default.string(),
        meta: _joi.default.object().keys({
            favicon: _joi.default.string(),
            ogImage: _joi.default.string(),
            titleSuffix: _joi.default.string()
        }),
        user: _joi.default.string(),
        vite: _joi.default.func(),
        webpack: _joi.default.func()
    }),
    collections: _joi.default.array(),
    cookiePrefix: _joi.default.string(),
    cors: [
        _joi.default.string().valid('*'),
        _joi.default.array().items(_joi.default.string())
    ],
    csrf: _joi.default.array().items(_joi.default.string().allow('')).sparse(),
    custom: _joi.default.object().pattern(_joi.default.string(), _joi.default.any()),
    db: _joi.default.any(),
    debug: _joi.default.boolean(),
    defaultDepth: _joi.default.number().min(0).max(30),
    defaultMaxTextLength: _joi.default.number(),
    editor: _joi.default.object().required().keys({
        CellComponent: component.required(),
        FieldComponent: component.required(),
        afterReadPromise: _joi.default.func().optional(),
        populationPromise: _joi.default.func().optional(),
        validate: _joi.default.func().required()
    }).unknown(),
    email: _joi.default.object(),
    endpoints: endpointsSchema,
    express: _joi.default.object().keys({
        compression: _joi.default.object(),
        json: _joi.default.object(),
        middleware: _joi.default.array().items(_joi.default.func()),
        postMiddleware: _joi.default.array().items(_joi.default.func()),
        preMiddleware: _joi.default.array().items(_joi.default.func())
    }),
    globals: _joi.default.array(),
    graphQL: _joi.default.object().keys({
        disable: _joi.default.boolean(),
        disablePlaygroundInProduction: _joi.default.boolean(),
        maxComplexity: _joi.default.number(),
        mutations: _joi.default.function(),
        queries: _joi.default.function(),
        schemaOutputFile: _joi.default.string()
    }),
    hooks: _joi.default.object().keys({
        afterError: _joi.default.func()
    }),
    i18n: _joi.default.object(),
    indexSortableFields: _joi.default.boolean(),
    local: _joi.default.boolean(),
    localization: _joi.default.alternatives().try(_joi.default.object().keys({
        defaultLocale: _joi.default.string(),
        fallback: _joi.default.boolean(),
        localeCodes: _joi.default.array().items(_joi.default.string()),
        locales: _joi.default.alternatives().try(_joi.default.array().items(_joi.default.object().keys({
            code: _joi.default.string(),
            label: _joi.default.string(),
            rtl: _joi.default.boolean(),
            toString: _joi.default.func()
        })), _joi.default.array().items(_joi.default.string()))
    }), _joi.default.boolean()),
    maxDepth: _joi.default.number().min(0).max(100),
    onInit: _joi.default.func(),
    plugins: _joi.default.array().items(_joi.default.func()),
    rateLimit: _joi.default.object().keys({
        max: _joi.default.number(),
        skip: _joi.default.func(),
        trustProxy: _joi.default.boolean(),
        window: _joi.default.number()
    }),
    routes: _joi.default.object({
        admin: _joi.default.string(),
        api: _joi.default.string(),
        graphQL: _joi.default.string(),
        graphQLPlayground: _joi.default.string()
    }),
    serverURL: _joi.default.string().uri().allow('').custom((value, helper)=>{
        const urlWithoutProtocol = value.split('//')[1];
        if (!urlWithoutProtocol) {
            return helper.message({
                custom: 'You need to include either "https://" or "http://" in your serverURL.'
            });
        }
        if (urlWithoutProtocol.indexOf('/') > -1) {
            return helper.message({
                custom: 'Your serverURL cannot have a path. It can only contain a protocol, a domain, and an optional port.'
            });
        }
        return value;
    }),
    telemetry: _joi.default.boolean(),
    typescript: _joi.default.object({
        declare: _joi.default.boolean(),
        outputFile: _joi.default.string()
    }),
    upload: _joi.default.object()
});

//# sourceMappingURL=data:application/json;base64,