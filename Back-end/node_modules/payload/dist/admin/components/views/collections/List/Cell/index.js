"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _reactrouterdom = require("react-router-dom");
const _types = require("../../../../../../fields/config/types");
const _getTranslation = require("../../../../../../utilities/getTranslation");
const _Config = require("../../../../utilities/Config");
const _RenderCustomComponent = /*#__PURE__*/ _interop_require_default(require("../../../../utilities/RenderCustomComponent"));
const _fieldtypes = /*#__PURE__*/ _interop_require_default(require("./field-types"));
const _Code = /*#__PURE__*/ _interop_require_default(require("./field-types/Code"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DefaultCell = (props)=>{
    const { cellData, className, collection: { slug }, collection, field, link = true, onClick, rowData: { id } = {}, rowData } = props;
    const { routes: { admin } } = (0, _Config.useConfig)();
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    let WrapElement = 'span';
    const wrapElementProps = {
        className
    };
    if (link) {
        WrapElement = _reactrouterdom.Link;
        wrapElementProps.to = `${admin}/collections/${slug}/${id}`;
    }
    if (typeof onClick === 'function') {
        WrapElement = 'button';
        wrapElementProps.type = 'button';
        wrapElementProps.onClick = ()=>{
            onClick(props);
        };
    }
    if (field.name === 'id') {
        return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(_Code.default, {
            collection: collection,
            data: `ID: ${cellData}`,
            field: field,
            rowData: rowData,
            nowrap: true
        }));
    }
    let CellComponent = cellData && _fieldtypes.default[field.type];
    if (!CellComponent) {
        if (collection.upload && (0, _types.fieldAffectsData)(field) && field.name === 'filename') {
            CellComponent = _fieldtypes.default.File;
        } else {
            return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, (cellData === '' || typeof cellData === 'undefined') && 'label' in field && t('noLabel', {
                label: (0, _getTranslation.getTranslation)(typeof field.label === 'function' ? 'data' : field.label || 'data', i18n)
            }), typeof cellData === 'string' && cellData, typeof cellData === 'number' && cellData, typeof cellData === 'object' && JSON.stringify(cellData));
        }
    }
    return /*#__PURE__*/ _react.default.createElement(WrapElement, wrapElementProps, /*#__PURE__*/ _react.default.createElement(CellComponent, {
        collection: collection,
        data: cellData,
        field: field,
        rowData: rowData
    }));
};
const Cell = (props)=>{
    const { cellData, className, colIndex, collection, field: { admin: { components: { Cell: CustomCell } = {} } = {} }, field, link, onClick, rowData } = props;
    return /*#__PURE__*/ _react.default.createElement(_RenderCustomComponent.default, {
        CustomComponent: CustomCell,
        DefaultComponent: DefaultCell,
        componentProps: {
            cellData,
            className,
            colIndex,
            collection,
            field,
            link,
            onClick,
            rowData
        }
    });
};
const _default = Cell;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL2NvbGxlY3Rpb25zL0xpc3QvQ2VsbC9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5cbmltcG9ydCB0eXBlIHsgQ2VsbENvbXBvbmVudFByb3BzLCBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IENvZGVGaWVsZCwgZmllbGRBZmZlY3RzRGF0YSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCB7IHVzZUNvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdGllcy9Db25maWcnXG5pbXBvcnQgUmVuZGVyQ3VzdG9tQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdGllcy9SZW5kZXJDdXN0b21Db21wb25lbnQnXG5pbXBvcnQgY2VsbENvbXBvbmVudHMgZnJvbSAnLi9maWVsZC10eXBlcydcbmltcG9ydCBDb2RlQ2VsbCBmcm9tICcuL2ZpZWxkLXR5cGVzL0NvZGUnXG5cbmNvbnN0IERlZmF1bHRDZWxsOiBSZWFjdC5GQzxQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNlbGxEYXRhLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xsZWN0aW9uOiB7IHNsdWcgfSxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGZpZWxkLFxuICAgIGxpbmsgPSB0cnVlLFxuICAgIG9uQ2xpY2ssXG4gICAgcm93RGF0YTogeyBpZCB9ID0ge30sXG4gICAgcm93RGF0YSxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3Qge1xuICAgIHJvdXRlczogeyBhZG1pbiB9LFxuICB9ID0gdXNlQ29uZmlnKClcbiAgY29uc3QgeyBpMThuLCB0IH0gPSB1c2VUcmFuc2xhdGlvbignZ2VuZXJhbCcpXG5cbiAgbGV0IFdyYXBFbGVtZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPGFueT4gfCBzdHJpbmcgPSAnc3BhbidcblxuICBjb25zdCB3cmFwRWxlbWVudFByb3BzOiB7XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXG4gICAgb25DbGljaz86ICgpID0+IHZvaWRcbiAgICB0bz86IHN0cmluZ1xuICAgIHR5cGU/OiAnYnV0dG9uJ1xuICB9ID0ge1xuICAgIGNsYXNzTmFtZSxcbiAgfVxuXG4gIGlmIChsaW5rKSB7XG4gICAgV3JhcEVsZW1lbnQgPSBMaW5rXG4gICAgd3JhcEVsZW1lbnRQcm9wcy50byA9IGAke2FkbWlufS9jb2xsZWN0aW9ucy8ke3NsdWd9LyR7aWR9YFxuICB9XG5cbiAgaWYgKHR5cGVvZiBvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgV3JhcEVsZW1lbnQgPSAnYnV0dG9uJ1xuICAgIHdyYXBFbGVtZW50UHJvcHMudHlwZSA9ICdidXR0b24nXG4gICAgd3JhcEVsZW1lbnRQcm9wcy5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgb25DbGljayhwcm9wcylcbiAgICB9XG4gIH1cblxuICBpZiAoZmllbGQubmFtZSA9PT0gJ2lkJykge1xuICAgIHJldHVybiAoXG4gICAgICA8V3JhcEVsZW1lbnQgey4uLndyYXBFbGVtZW50UHJvcHN9PlxuICAgICAgICA8Q29kZUNlbGxcbiAgICAgICAgICBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufVxuICAgICAgICAgIGRhdGE9e2BJRDogJHtjZWxsRGF0YX1gfVxuICAgICAgICAgIGZpZWxkPXtmaWVsZCBhcyBDb2RlRmllbGR9XG4gICAgICAgICAgcm93RGF0YT17cm93RGF0YX1cbiAgICAgICAgICBub3dyYXBcbiAgICAgICAgLz5cbiAgICAgIDwvV3JhcEVsZW1lbnQ+XG4gICAgKVxuICB9XG5cbiAgbGV0IENlbGxDb21wb25lbnQ6IFJlYWN0LkZDPENlbGxDb21wb25lbnRQcm9wcz4gPSBjZWxsRGF0YSAmJiBjZWxsQ29tcG9uZW50c1tmaWVsZC50eXBlXVxuXG4gIGlmICghQ2VsbENvbXBvbmVudCkge1xuICAgIGlmIChjb2xsZWN0aW9uLnVwbG9hZCAmJiBmaWVsZEFmZmVjdHNEYXRhKGZpZWxkKSAmJiBmaWVsZC5uYW1lID09PSAnZmlsZW5hbWUnKSB7XG4gICAgICBDZWxsQ29tcG9uZW50ID0gY2VsbENvbXBvbmVudHMuRmlsZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8V3JhcEVsZW1lbnQgey4uLndyYXBFbGVtZW50UHJvcHN9PlxuICAgICAgICAgIHsoY2VsbERhdGEgPT09ICcnIHx8IHR5cGVvZiBjZWxsRGF0YSA9PT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICAnbGFiZWwnIGluIGZpZWxkICYmXG4gICAgICAgICAgICB0KCdub0xhYmVsJywge1xuICAgICAgICAgICAgICBsYWJlbDogZ2V0VHJhbnNsYXRpb24oXG4gICAgICAgICAgICAgICAgdHlwZW9mIGZpZWxkLmxhYmVsID09PSAnZnVuY3Rpb24nID8gJ2RhdGEnIDogZmllbGQubGFiZWwgfHwgJ2RhdGEnLFxuICAgICAgICAgICAgICAgIGkxOG4sXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICB7dHlwZW9mIGNlbGxEYXRhID09PSAnc3RyaW5nJyAmJiBjZWxsRGF0YX1cbiAgICAgICAgICB7dHlwZW9mIGNlbGxEYXRhID09PSAnbnVtYmVyJyAmJiBjZWxsRGF0YX1cbiAgICAgICAgICB7dHlwZW9mIGNlbGxEYXRhID09PSAnb2JqZWN0JyAmJiBKU09OLnN0cmluZ2lmeShjZWxsRGF0YSl9XG4gICAgICAgIDwvV3JhcEVsZW1lbnQ+XG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8V3JhcEVsZW1lbnQgey4uLndyYXBFbGVtZW50UHJvcHN9PlxuICAgICAgPENlbGxDb21wb25lbnQgY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gZGF0YT17Y2VsbERhdGF9IGZpZWxkPXtmaWVsZH0gcm93RGF0YT17cm93RGF0YX0gLz5cbiAgICA8L1dyYXBFbGVtZW50PlxuICApXG59XG5cbmNvbnN0IENlbGw6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgY2VsbERhdGEsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbEluZGV4LFxuICAgIGNvbGxlY3Rpb24sXG4gICAgZmllbGQ6IHsgYWRtaW46IHsgY29tcG9uZW50czogeyBDZWxsOiBDdXN0b21DZWxsIH0gPSB7fSB9ID0ge30gfSxcbiAgICBmaWVsZCxcbiAgICBsaW5rLFxuICAgIG9uQ2xpY2ssXG4gICAgcm93RGF0YSxcbiAgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8UmVuZGVyQ3VzdG9tQ29tcG9uZW50XG4gICAgICBDdXN0b21Db21wb25lbnQ9e0N1c3RvbUNlbGx9XG4gICAgICBEZWZhdWx0Q29tcG9uZW50PXtEZWZhdWx0Q2VsbH1cbiAgICAgIGNvbXBvbmVudFByb3BzPXtcbiAgICAgICAge1xuICAgICAgICAgIGNlbGxEYXRhLFxuICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICBjb2xJbmRleCxcbiAgICAgICAgICBjb2xsZWN0aW9uLFxuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIGxpbmssXG4gICAgICAgICAgb25DbGljayxcbiAgICAgICAgICByb3dEYXRhLFxuICAgICAgICB9IGFzIFByb3BzXG4gICAgICB9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBDZWxsXG4iXSwibmFtZXMiOlsiRGVmYXVsdENlbGwiLCJwcm9wcyIsImNlbGxEYXRhIiwiY2xhc3NOYW1lIiwiY29sbGVjdGlvbiIsInNsdWciLCJmaWVsZCIsImxpbmsiLCJvbkNsaWNrIiwicm93RGF0YSIsImlkIiwicm91dGVzIiwiYWRtaW4iLCJ1c2VDb25maWciLCJpMThuIiwidCIsInVzZVRyYW5zbGF0aW9uIiwiV3JhcEVsZW1lbnQiLCJ3cmFwRWxlbWVudFByb3BzIiwiTGluayIsInRvIiwidHlwZSIsIm5hbWUiLCJDb2RlQ2VsbCIsImRhdGEiLCJub3dyYXAiLCJDZWxsQ29tcG9uZW50IiwiY2VsbENvbXBvbmVudHMiLCJ1cGxvYWQiLCJmaWVsZEFmZmVjdHNEYXRhIiwiRmlsZSIsImxhYmVsIiwiZ2V0VHJhbnNsYXRpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiQ2VsbCIsImNvbEluZGV4IiwiY29tcG9uZW50cyIsIkN1c3RvbUNlbGwiLCJSZW5kZXJDdXN0b21Db21wb25lbnQiLCJDdXN0b21Db21wb25lbnQiLCJEZWZhdWx0Q29tcG9uZW50IiwiY29tcG9uZW50UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7K0JBcUlBOzs7ZUFBQTs7OzhEQXJJa0I7OEJBQ2E7Z0NBQ1Y7dUJBSXVCO2dDQUNiO3dCQUNMOzhFQUNRO21FQUNQOzZEQUNOOzs7Ozs7QUFFckIsTUFBTUEsY0FBK0IsQ0FBQ0M7SUFDcEMsTUFBTSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsWUFBWSxFQUFFQyxJQUFJLEVBQUUsRUFDcEJELFVBQVUsRUFDVkUsS0FBSyxFQUNMQyxPQUFPLElBQUksRUFDWEMsT0FBTyxFQUNQQyxTQUFTLEVBQUVDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUNwQkQsT0FBTyxFQUNSLEdBQUdSO0lBRUosTUFBTSxFQUNKVSxRQUFRLEVBQUVDLEtBQUssRUFBRSxFQUNsQixHQUFHQyxJQUFBQSxpQkFBUztJQUNiLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxDQUFDLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWMsRUFBQztJQUVuQyxJQUFJQyxjQUFpRDtJQUVyRCxNQUFNQyxtQkFLRjtRQUNGZjtJQUNGO0lBRUEsSUFBSUksTUFBTTtRQUNSVSxjQUFjRSxvQkFBSTtRQUNsQkQsaUJBQWlCRSxFQUFFLEdBQUcsQ0FBQyxFQUFFUixNQUFNLGFBQWEsRUFBRVAsS0FBSyxDQUFDLEVBQUVLLEdBQUcsQ0FBQztJQUM1RDtJQUVBLElBQUksT0FBT0YsWUFBWSxZQUFZO1FBQ2pDUyxjQUFjO1FBQ2RDLGlCQUFpQkcsSUFBSSxHQUFHO1FBQ3hCSCxpQkFBaUJWLE9BQU8sR0FBRztZQUN6QkEsUUFBUVA7UUFDVjtJQUNGO0lBRUEsSUFBSUssTUFBTWdCLElBQUksS0FBSyxNQUFNO1FBQ3ZCLHFCQUNFLDZCQUFDTCxhQUFnQkMsZ0NBQ2YsNkJBQUNLLGFBQVE7WUFDUG5CLFlBQVlBO1lBQ1pvQixNQUFNLENBQUMsSUFBSSxFQUFFdEIsU0FBUyxDQUFDO1lBQ3ZCSSxPQUFPQTtZQUNQRyxTQUFTQTtZQUNUZ0IsUUFBQUE7O0lBSVI7SUFFQSxJQUFJQyxnQkFBOEN4QixZQUFZeUIsbUJBQWMsQ0FBQ3JCLE1BQU1lLElBQUksQ0FBQztJQUV4RixJQUFJLENBQUNLLGVBQWU7UUFDbEIsSUFBSXRCLFdBQVd3QixNQUFNLElBQUlDLElBQUFBLHVCQUFnQixFQUFDdkIsVUFBVUEsTUFBTWdCLElBQUksS0FBSyxZQUFZO1lBQzdFSSxnQkFBZ0JDLG1CQUFjLENBQUNHLElBQUk7UUFDckMsT0FBTztZQUNMLHFCQUNFLDZCQUFDYixhQUFnQkMsa0JBQ2QsQUFBQ2hCLENBQUFBLGFBQWEsTUFBTSxPQUFPQSxhQUFhLFdBQVUsS0FDakQsV0FBV0ksU0FDWFMsRUFBRSxXQUFXO2dCQUNYZ0IsT0FBT0MsSUFBQUEsOEJBQWMsRUFDbkIsT0FBTzFCLE1BQU15QixLQUFLLEtBQUssYUFBYSxTQUFTekIsTUFBTXlCLEtBQUssSUFBSSxRQUM1RGpCO1lBRUosSUFDRCxPQUFPWixhQUFhLFlBQVlBLFVBQ2hDLE9BQU9BLGFBQWEsWUFBWUEsVUFDaEMsT0FBT0EsYUFBYSxZQUFZK0IsS0FBS0MsU0FBUyxDQUFDaEM7UUFHdEQ7SUFDRjtJQUVBLHFCQUNFLDZCQUFDZSxhQUFnQkMsZ0NBQ2YsNkJBQUNRO1FBQWN0QixZQUFZQTtRQUFZb0IsTUFBTXRCO1FBQVVJLE9BQU9BO1FBQU9HLFNBQVNBOztBQUdwRjtBQUVBLE1BQU0wQixPQUF3QixDQUFDbEM7SUFDN0IsTUFBTSxFQUNKQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVGlDLFFBQVEsRUFDUmhDLFVBQVUsRUFDVkUsT0FBTyxFQUFFTSxPQUFPLEVBQUV5QixZQUFZLEVBQUVGLE1BQU1HLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFDaEVoQyxLQUFLLEVBQ0xDLElBQUksRUFDSkMsT0FBTyxFQUNQQyxPQUFPLEVBQ1IsR0FBR1I7SUFFSixxQkFDRSw2QkFBQ3NDLDhCQUFxQjtRQUNwQkMsaUJBQWlCRjtRQUNqQkcsa0JBQWtCekM7UUFDbEIwQyxnQkFDRTtZQUNFeEM7WUFDQUM7WUFDQWlDO1lBQ0FoQztZQUNBRTtZQUNBQztZQUNBQztZQUNBQztRQUNGOztBQUlSO01BRUEsV0FBZTBCIn0=