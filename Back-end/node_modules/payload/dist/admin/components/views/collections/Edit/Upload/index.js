"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    editDrawerSlug: function() {
        return editDrawerSlug;
    },
    sizePreviewSlug: function() {
        return sizePreviewSlug;
    },
    UploadActions: function() {
        return UploadActions;
    },
    Upload: function() {
        return Upload;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _isImage = /*#__PURE__*/ _interop_require_default(require("../../../../../../uploads/isImage"));
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Button"));
const _Drawer = require("../../../../elements/Drawer");
const _Dropzone = require("../../../../elements/Dropzone");
const _EditUpload = require("../../../../elements/EditUpload");
const _FileDetails = /*#__PURE__*/ _interop_require_default(require("../../../../elements/FileDetails"));
const _PreviewSizes = /*#__PURE__*/ _interop_require_default(require("../../../../elements/PreviewSizes"));
const _Thumbnail = /*#__PURE__*/ _interop_require_default(require("../../../../elements/Thumbnail"));
const _Error = /*#__PURE__*/ _interop_require_default(require("../../../../forms/Error"));
const _context = require("../../../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../../../forms/Form/reduceFieldsToValues"));
const _shared = require("../../../../forms/field-types/shared");
const _useField = /*#__PURE__*/ _interop_require_default(require("../../../../forms/useField"));
const _DocumentInfo = require("../../../../utilities/DocumentInfo");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'file-field';
const editDrawerSlug = 'edit-upload';
const sizePreviewSlug = 'preview-sizes';
const validate = (value)=>{
    if (!value && value !== undefined) {
        return 'A file is required.';
    }
    return true;
};
const UploadActions = ({ canEdit, showSizePreviews })=>{
    const { t } = (0, _reacti18next.useTranslation)('upload');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__file-mutation`
    }, showSizePreviews && /*#__PURE__*/ _react.default.createElement(_Drawer.DrawerToggler, {
        className: `${baseClass}__previewSizes`,
        slug: sizePreviewSlug
    }, t('upload:previewSizes')), canEdit && /*#__PURE__*/ _react.default.createElement(_Drawer.DrawerToggler, {
        className: `${baseClass}__edit`,
        slug: editDrawerSlug
    }, t('upload:editImage')));
};
const Upload = (props)=>{
    const submitted = (0, _context.useFormSubmitted)();
    const { collection, internalState, onChange, updatedAt } = props;
    const [replacingFile, setReplacingFile] = (0, _react.useState)(false);
    const [fileSrc, setFileSrc] = (0, _react.useState)(null);
    const { t } = (0, _reacti18next.useTranslation)([
        'upload',
        'general'
    ]);
    const [doc, setDoc] = (0, _react.useState)((0, _reduceFieldsToValues.default)(internalState || {}, true));
    const { docPermissions } = (0, _DocumentInfo.useDocumentInfo)();
    const { errorMessage, setValue, showError, value } = (0, _useField.default)({
        path: 'file',
        validate
    });
    const handleFileNameChange = (e)=>{
        const updatedFileName = e.target.value;
        if (value) {
            const fileValue = value;
            // Creating a new File object with updated properties
            const newFile = new File([
                fileValue
            ], updatedFileName, {
                type: fileValue.type
            });
            setValue(newFile) // Updating the state with the new File object
            ;
        }
    };
    const handleFileSelection = _react.default.useCallback((files)=>{
        const fileToUpload = files?.[0];
        setValue(fileToUpload);
    }, [
        setValue
    ]);
    const handleFileRemoval = (0, _react.useCallback)(()=>{
        setReplacingFile(true);
        setValue(null);
        setFileSrc('');
    }, [
        setValue
    ]);
    (0, _react.useEffect)(()=>{
        setDoc((0, _reduceFieldsToValues.default)(internalState || {}, true));
        setReplacingFile(false);
    }, [
        internalState
    ]);
    (0, _react.useEffect)(()=>{
        if (value instanceof File) {
            const fileReader = new FileReader();
            fileReader.onload = (e)=>{
                const imgSrc = e.target?.result;
                if (typeof imgSrc === 'string') {
                    setFileSrc(imgSrc);
                }
            };
            fileReader.readAsDataURL(value);
        }
        if (typeof onChange === 'function') {
            onChange(value);
        }
    }, [
        value,
        onChange,
        updatedAt
    ]);
    const canRemoveUpload = docPermissions?.update?.permission && 'delete' in docPermissions && docPermissions?.delete?.permission;
    const hasImageSizes = collection?.upload?.imageSizes?.length > 0;
    const hasResizeOptions = Boolean(collection?.upload?.resizeOptions);
    const { collection: { upload: { crop: showCrop = true, focalPoint = true } } = {} } = props;
    const showFocalPoint = focalPoint && (hasImageSizes || hasResizeOptions);
    const lastSubmittedTime = submitted ? new Date().toISOString() : null;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    }), doc.filename && !replacingFile && /*#__PURE__*/ _react.default.createElement(_FileDetails.default, {
        canEdit: showCrop || showFocalPoint,
        collection: collection,
        doc: doc,
        handleRemove: canRemoveUpload ? handleFileRemoval : undefined,
        hasImageSizes: hasImageSizes,
        imageCacheTag: lastSubmittedTime
    }), (!doc.filename || replacingFile) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__upload`
    }, !value && /*#__PURE__*/ _react.default.createElement(_Dropzone.Dropzone, {
        className: `${baseClass}__dropzone`,
        mimeTypes: collection?.upload?.mimeTypes,
        onChange: handleFileSelection
    }), value && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__thumbnail-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Thumbnail.default, {
        fileSrc: (0, _isImage.default)(value.type) ? fileSrc : null
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__file-adjustments`
    }, /*#__PURE__*/ _react.default.createElement("input", {
        className: `${baseClass}__filename`,
        onChange: handleFileNameChange,
        type: "text",
        value: value.name
    }), (0, _isImage.default)(value.type) && /*#__PURE__*/ _react.default.createElement(UploadActions, {
        canEdit: showCrop || showFocalPoint,
        showSizePreviews: hasImageSizes && doc.filename && !replacingFile
    })), /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "icon-label",
        className: `${baseClass}__remove`,
        icon: "x",
        iconStyle: "with-border",
        onClick: handleFileRemoval,
        round: true,
        tooltip: t('general:cancel')
    }))), (value || doc.filename) && /*#__PURE__*/ _react.default.createElement(_Drawer.Drawer, {
        header: null,
        slug: editDrawerSlug
    }, /*#__PURE__*/ _react.default.createElement(_EditUpload.EditUpload, {
        doc: doc || undefined,
        fileName: value?.name || doc?.filename,
        fileSrc: fileSrc || doc?.url,
        imageCacheTag: lastSubmittedTime,
        showCrop: showCrop,
        showFocalPoint: showFocalPoint
    })), doc && hasImageSizes && /*#__PURE__*/ _react.default.createElement(_Drawer.Drawer, {
        className: `${baseClass}__previewDrawer`,
        hoverTitle: true,
        slug: sizePreviewSlug,
        title: t('upload:sizesFor', {
            label: doc?.filename
        })
    }, /*#__PURE__*/ _react.default.createElement(_PreviewSizes.default, {
        collection: collection,
        doc: doc
    })));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL2NvbGxlY3Rpb25zL0VkaXQvVXBsb2FkL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCBpc0ltYWdlIGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL3VwbG9hZHMvaXNJbWFnZSdcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudHMvQnV0dG9uJ1xuaW1wb3J0IHsgRHJhd2VyLCBEcmF3ZXJUb2dnbGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudHMvRHJhd2VyJ1xuaW1wb3J0IHsgRHJvcHpvbmUgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50cy9Ecm9wem9uZSdcbmltcG9ydCB7IEVkaXRVcGxvYWQgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50cy9FZGl0VXBsb2FkJ1xuaW1wb3J0IEZpbGVEZXRhaWxzIGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRzL0ZpbGVEZXRhaWxzJ1xuaW1wb3J0IFByZXZpZXdTaXplcyBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50cy9QcmV2aWV3U2l6ZXMnXG5pbXBvcnQgVGh1bWJuYWlsIGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRzL1RodW1ibmFpbCdcbmltcG9ydCBFcnJvciBmcm9tICcuLi8uLi8uLi8uLi9mb3Jtcy9FcnJvcidcbmltcG9ydCB7IHVzZUZvcm1TdWJtaXR0ZWQgfSBmcm9tICcuLi8uLi8uLi8uLi9mb3Jtcy9Gb3JtL2NvbnRleHQnXG5pbXBvcnQgcmVkdWNlRmllbGRzVG9WYWx1ZXMgZnJvbSAnLi4vLi4vLi4vLi4vZm9ybXMvRm9ybS9yZWR1Y2VGaWVsZHNUb1ZhbHVlcydcbmltcG9ydCB7IGZpZWxkQmFzZUNsYXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vZm9ybXMvZmllbGQtdHlwZXMvc2hhcmVkJ1xuaW1wb3J0IHVzZUZpZWxkIGZyb20gJy4uLy4uLy4uLy4uL2Zvcm1zL3VzZUZpZWxkJ1xuaW1wb3J0IHsgdXNlRG9jdW1lbnRJbmZvIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0aWVzL0RvY3VtZW50SW5mbydcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAnZmlsZS1maWVsZCdcbmV4cG9ydCBjb25zdCBlZGl0RHJhd2VyU2x1ZyA9ICdlZGl0LXVwbG9hZCdcbmV4cG9ydCBjb25zdCBzaXplUHJldmlld1NsdWcgPSAncHJldmlldy1zaXplcydcblxuY29uc3QgdmFsaWRhdGUgPSAodmFsdWUpID0+IHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICdBIGZpbGUgaXMgcmVxdWlyZWQuJ1xuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGNvbnN0IFVwbG9hZEFjdGlvbnMgPSAoeyBjYW5FZGl0LCBzaG93U2l6ZVByZXZpZXdzIH0pID0+IHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbigndXBsb2FkJylcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fZmlsZS1tdXRhdGlvbmB9PlxuICAgICAge3Nob3dTaXplUHJldmlld3MgJiYgKFxuICAgICAgICA8RHJhd2VyVG9nZ2xlciBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3ByZXZpZXdTaXplc2B9IHNsdWc9e3NpemVQcmV2aWV3U2x1Z30+XG4gICAgICAgICAge3QoJ3VwbG9hZDpwcmV2aWV3U2l6ZXMnKX1cbiAgICAgICAgPC9EcmF3ZXJUb2dnbGVyPlxuICAgICAgKX1cbiAgICAgIHtjYW5FZGl0ICYmIChcbiAgICAgICAgPERyYXdlclRvZ2dsZXIgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19lZGl0YH0gc2x1Zz17ZWRpdERyYXdlclNsdWd9PlxuICAgICAgICAgIHt0KCd1cGxvYWQ6ZWRpdEltYWdlJyl9XG4gICAgICAgIDwvRHJhd2VyVG9nZ2xlcj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGNvbnN0IFVwbG9hZDogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHN1Ym1pdHRlZCA9IHVzZUZvcm1TdWJtaXR0ZWQoKVxuICBjb25zdCB7IGNvbGxlY3Rpb24sIGludGVybmFsU3RhdGUsIG9uQ2hhbmdlLCB1cGRhdGVkQXQgfSA9IHByb3BzXG4gIGNvbnN0IFtyZXBsYWNpbmdGaWxlLCBzZXRSZXBsYWNpbmdGaWxlXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbZmlsZVNyYywgc2V0RmlsZVNyY10gPSB1c2VTdGF0ZTxudWxsIHwgc3RyaW5nPihudWxsKVxuICBjb25zdCB7IHQgfSA9IHVzZVRyYW5zbGF0aW9uKFsndXBsb2FkJywgJ2dlbmVyYWwnXSlcbiAgY29uc3QgW2RvYywgc2V0RG9jXSA9IHVzZVN0YXRlKHJlZHVjZUZpZWxkc1RvVmFsdWVzKGludGVybmFsU3RhdGUgfHwge30sIHRydWUpKVxuICBjb25zdCB7IGRvY1Blcm1pc3Npb25zIH0gPSB1c2VEb2N1bWVudEluZm8oKVxuICBjb25zdCB7IGVycm9yTWVzc2FnZSwgc2V0VmFsdWUsIHNob3dFcnJvciwgdmFsdWUgfSA9IHVzZUZpZWxkPEZpbGU+KHtcbiAgICBwYXRoOiAnZmlsZScsXG4gICAgdmFsaWRhdGUsXG4gIH0pXG5cbiAgY29uc3QgaGFuZGxlRmlsZU5hbWVDaGFuZ2UgPSAoZTogUmVhY3QuQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB1cGRhdGVkRmlsZU5hbWUgPSBlLnRhcmdldC52YWx1ZVxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgY29uc3QgZmlsZVZhbHVlID0gdmFsdWVcbiAgICAgIC8vIENyZWF0aW5nIGEgbmV3IEZpbGUgb2JqZWN0IHdpdGggdXBkYXRlZCBwcm9wZXJ0aWVzXG4gICAgICBjb25zdCBuZXdGaWxlID0gbmV3IEZpbGUoW2ZpbGVWYWx1ZV0sIHVwZGF0ZWRGaWxlTmFtZSwgeyB0eXBlOiBmaWxlVmFsdWUudHlwZSB9KVxuICAgICAgc2V0VmFsdWUobmV3RmlsZSkgLy8gVXBkYXRpbmcgdGhlIHN0YXRlIHdpdGggdGhlIG5ldyBGaWxlIG9iamVjdFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZUZpbGVTZWxlY3Rpb24gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZmlsZXM6IEZpbGVMaXN0KSA9PiB7XG4gICAgICBjb25zdCBmaWxlVG9VcGxvYWQgPSBmaWxlcz8uWzBdXG4gICAgICBzZXRWYWx1ZShmaWxlVG9VcGxvYWQpXG4gICAgfSxcbiAgICBbc2V0VmFsdWVdLFxuICApXG5cbiAgY29uc3QgaGFuZGxlRmlsZVJlbW92YWwgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0UmVwbGFjaW5nRmlsZSh0cnVlKVxuICAgIHNldFZhbHVlKG51bGwpXG4gICAgc2V0RmlsZVNyYygnJylcbiAgfSwgW3NldFZhbHVlXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldERvYyhyZWR1Y2VGaWVsZHNUb1ZhbHVlcyhpbnRlcm5hbFN0YXRlIHx8IHt9LCB0cnVlKSlcbiAgICBzZXRSZXBsYWNpbmdGaWxlKGZhbHNlKVxuICB9LCBbaW50ZXJuYWxTdGF0ZV0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBpbWdTcmMgPSBlLnRhcmdldD8ucmVzdWx0XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbWdTcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgc2V0RmlsZVNyYyhpbWdTcmMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTCh2YWx1ZSlcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvbkNoYW5nZSh2YWx1ZSlcbiAgICB9XG4gIH0sIFt2YWx1ZSwgb25DaGFuZ2UsIHVwZGF0ZWRBdF0pXG5cbiAgY29uc3QgY2FuUmVtb3ZlVXBsb2FkID1cbiAgICBkb2NQZXJtaXNzaW9ucz8udXBkYXRlPy5wZXJtaXNzaW9uICYmXG4gICAgJ2RlbGV0ZScgaW4gZG9jUGVybWlzc2lvbnMgJiZcbiAgICBkb2NQZXJtaXNzaW9ucz8uZGVsZXRlPy5wZXJtaXNzaW9uXG5cbiAgY29uc3QgaGFzSW1hZ2VTaXplcyA9IGNvbGxlY3Rpb24/LnVwbG9hZD8uaW1hZ2VTaXplcz8ubGVuZ3RoID4gMFxuICBjb25zdCBoYXNSZXNpemVPcHRpb25zID0gQm9vbGVhbihjb2xsZWN0aW9uPy51cGxvYWQ/LnJlc2l6ZU9wdGlvbnMpXG5cbiAgY29uc3QgeyBjb2xsZWN0aW9uOiB7IHVwbG9hZDogeyBjcm9wOiBzaG93Q3JvcCA9IHRydWUsIGZvY2FsUG9pbnQgPSB0cnVlIH0gfSA9IHt9IH0gPSBwcm9wc1xuXG4gIGNvbnN0IHNob3dGb2NhbFBvaW50ID0gZm9jYWxQb2ludCAmJiAoaGFzSW1hZ2VTaXplcyB8fCBoYXNSZXNpemVPcHRpb25zKVxuXG4gIGNvbnN0IGxhc3RTdWJtaXR0ZWRUaW1lID0gc3VibWl0dGVkID8gbmV3IERhdGUoKS50b0lTT1N0cmluZygpIDogbnVsbFxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e1tmaWVsZEJhc2VDbGFzcywgYmFzZUNsYXNzXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpfT5cbiAgICAgIDxFcnJvciBtZXNzYWdlPXtlcnJvck1lc3NhZ2V9IHNob3dFcnJvcj17c2hvd0Vycm9yfSAvPlxuXG4gICAgICB7ZG9jLmZpbGVuYW1lICYmICFyZXBsYWNpbmdGaWxlICYmIChcbiAgICAgICAgPEZpbGVEZXRhaWxzXG4gICAgICAgICAgY2FuRWRpdD17c2hvd0Nyb3AgfHwgc2hvd0ZvY2FsUG9pbnR9XG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBkb2M9e2RvY31cbiAgICAgICAgICBoYW5kbGVSZW1vdmU9e2NhblJlbW92ZVVwbG9hZCA/IGhhbmRsZUZpbGVSZW1vdmFsIDogdW5kZWZpbmVkfVxuICAgICAgICAgIGhhc0ltYWdlU2l6ZXM9e2hhc0ltYWdlU2l6ZXN9XG4gICAgICAgICAgaW1hZ2VDYWNoZVRhZz17bGFzdFN1Ym1pdHRlZFRpbWV9XG4gICAgICAgIC8+XG4gICAgICApfVxuXG4gICAgICB7KCFkb2MuZmlsZW5hbWUgfHwgcmVwbGFjaW5nRmlsZSkgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fdXBsb2FkYH0+XG4gICAgICAgICAgeyF2YWx1ZSAmJiAoXG4gICAgICAgICAgICA8RHJvcHpvbmVcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19kcm9wem9uZWB9XG4gICAgICAgICAgICAgIG1pbWVUeXBlcz17Y29sbGVjdGlvbj8udXBsb2FkPy5taW1lVHlwZXN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVGaWxlU2VsZWN0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuXG4gICAgICAgICAge3ZhbHVlICYmIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3RodW1ibmFpbC13cmFwYH0+XG4gICAgICAgICAgICAgICAgPFRodW1ibmFpbCBmaWxlU3JjPXtpc0ltYWdlKHZhbHVlLnR5cGUpID8gZmlsZVNyYyA6IG51bGx9IC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fZmlsZS1hZGp1c3RtZW50c2B9PlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19maWxlbmFtZWB9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlRmlsZU5hbWVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dmFsdWUubmFtZX1cbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAge2lzSW1hZ2UodmFsdWUudHlwZSkgJiYgKFxuICAgICAgICAgICAgICAgICAgPFVwbG9hZEFjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgY2FuRWRpdD17c2hvd0Nyb3AgfHwgc2hvd0ZvY2FsUG9pbnR9XG4gICAgICAgICAgICAgICAgICAgIHNob3dTaXplUHJldmlld3M9e2hhc0ltYWdlU2l6ZXMgJiYgZG9jLmZpbGVuYW1lICYmICFyZXBsYWNpbmdGaWxlfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgIGJ1dHRvblN0eWxlPVwiaWNvbi1sYWJlbFwiXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19yZW1vdmVgfVxuICAgICAgICAgICAgICAgIGljb249XCJ4XCJcbiAgICAgICAgICAgICAgICBpY29uU3R5bGU9XCJ3aXRoLWJvcmRlclwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlRmlsZVJlbW92YWx9XG4gICAgICAgICAgICAgICAgcm91bmRcbiAgICAgICAgICAgICAgICB0b29sdGlwPXt0KCdnZW5lcmFsOmNhbmNlbCcpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG5cbiAgICAgIHsodmFsdWUgfHwgZG9jLmZpbGVuYW1lKSAmJiAoXG4gICAgICAgIDxEcmF3ZXIgaGVhZGVyPXtudWxsfSBzbHVnPXtlZGl0RHJhd2VyU2x1Z30+XG4gICAgICAgICAgPEVkaXRVcGxvYWRcbiAgICAgICAgICAgIGRvYz17ZG9jIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIGZpbGVOYW1lPXt2YWx1ZT8ubmFtZSB8fCBkb2M/LmZpbGVuYW1lfVxuICAgICAgICAgICAgZmlsZVNyYz17ZmlsZVNyYyB8fCBkb2M/LnVybH1cbiAgICAgICAgICAgIGltYWdlQ2FjaGVUYWc9e2xhc3RTdWJtaXR0ZWRUaW1lfVxuICAgICAgICAgICAgc2hvd0Nyb3A9e3Nob3dDcm9wfVxuICAgICAgICAgICAgc2hvd0ZvY2FsUG9pbnQ9e3Nob3dGb2NhbFBvaW50fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRHJhd2VyPlxuICAgICAgKX1cbiAgICAgIHtkb2MgJiYgaGFzSW1hZ2VTaXplcyAmJiAoXG4gICAgICAgIDxEcmF3ZXJcbiAgICAgICAgICBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3ByZXZpZXdEcmF3ZXJgfVxuICAgICAgICAgIGhvdmVyVGl0bGVcbiAgICAgICAgICBzbHVnPXtzaXplUHJldmlld1NsdWd9XG4gICAgICAgICAgdGl0bGU9e3QoJ3VwbG9hZDpzaXplc0ZvcicsIHsgbGFiZWw6IGRvYz8uZmlsZW5hbWUgfSl9XG4gICAgICAgID5cbiAgICAgICAgICA8UHJldmlld1NpemVzIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IGRvYz17ZG9jfSAvPlxuICAgICAgICA8L0RyYXdlcj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJlZGl0RHJhd2VyU2x1ZyIsInNpemVQcmV2aWV3U2x1ZyIsIlVwbG9hZEFjdGlvbnMiLCJVcGxvYWQiLCJiYXNlQ2xhc3MiLCJ2YWxpZGF0ZSIsInZhbHVlIiwidW5kZWZpbmVkIiwiY2FuRWRpdCIsInNob3dTaXplUHJldmlld3MiLCJ0IiwidXNlVHJhbnNsYXRpb24iLCJkaXYiLCJjbGFzc05hbWUiLCJEcmF3ZXJUb2dnbGVyIiwic2x1ZyIsInByb3BzIiwic3VibWl0dGVkIiwidXNlRm9ybVN1Ym1pdHRlZCIsImNvbGxlY3Rpb24iLCJpbnRlcm5hbFN0YXRlIiwib25DaGFuZ2UiLCJ1cGRhdGVkQXQiLCJyZXBsYWNpbmdGaWxlIiwic2V0UmVwbGFjaW5nRmlsZSIsInVzZVN0YXRlIiwiZmlsZVNyYyIsInNldEZpbGVTcmMiLCJkb2MiLCJzZXREb2MiLCJyZWR1Y2VGaWVsZHNUb1ZhbHVlcyIsImRvY1Blcm1pc3Npb25zIiwidXNlRG9jdW1lbnRJbmZvIiwiZXJyb3JNZXNzYWdlIiwic2V0VmFsdWUiLCJzaG93RXJyb3IiLCJ1c2VGaWVsZCIsInBhdGgiLCJoYW5kbGVGaWxlTmFtZUNoYW5nZSIsImUiLCJ1cGRhdGVkRmlsZU5hbWUiLCJ0YXJnZXQiLCJmaWxlVmFsdWUiLCJuZXdGaWxlIiwiRmlsZSIsInR5cGUiLCJoYW5kbGVGaWxlU2VsZWN0aW9uIiwiUmVhY3QiLCJ1c2VDYWxsYmFjayIsImZpbGVzIiwiZmlsZVRvVXBsb2FkIiwiaGFuZGxlRmlsZVJlbW92YWwiLCJ1c2VFZmZlY3QiLCJmaWxlUmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImltZ1NyYyIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJjYW5SZW1vdmVVcGxvYWQiLCJ1cGRhdGUiLCJwZXJtaXNzaW9uIiwiZGVsZXRlIiwiaGFzSW1hZ2VTaXplcyIsInVwbG9hZCIsImltYWdlU2l6ZXMiLCJsZW5ndGgiLCJoYXNSZXNpemVPcHRpb25zIiwiQm9vbGVhbiIsInJlc2l6ZU9wdGlvbnMiLCJjcm9wIiwic2hvd0Nyb3AiLCJmb2NhbFBvaW50Iiwic2hvd0ZvY2FsUG9pbnQiLCJsYXN0U3VibWl0dGVkVGltZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImZpZWxkQmFzZUNsYXNzIiwiZmlsdGVyIiwiam9pbiIsIkVycm9yIiwibWVzc2FnZSIsImZpbGVuYW1lIiwiRmlsZURldGFpbHMiLCJoYW5kbGVSZW1vdmUiLCJpbWFnZUNhY2hlVGFnIiwiRHJvcHpvbmUiLCJtaW1lVHlwZXMiLCJGcmFnbWVudCIsIlRodW1ibmFpbCIsImlzSW1hZ2UiLCJpbnB1dCIsIm5hbWUiLCJCdXR0b24iLCJidXR0b25TdHlsZSIsImljb24iLCJpY29uU3R5bGUiLCJvbkNsaWNrIiwicm91bmQiLCJ0b29sdGlwIiwiRHJhd2VyIiwiaGVhZGVyIiwiRWRpdFVwbG9hZCIsImZpbGVOYW1lIiwidXJsIiwiaG92ZXJUaXRsZSIsInRpdGxlIiwibGFiZWwiLCJQcmV2aWV3U2l6ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBc0JhQSxjQUFjO2VBQWRBOztJQUNBQyxlQUFlO2VBQWZBOztJQVVBQyxhQUFhO2VBQWJBOztJQWtCQUMsTUFBTTtlQUFOQTs7OytEQW5EMkM7OEJBQ3pCO2dFQUlYOytEQUNEO3dCQUNtQjswQkFDYjs0QkFDRTtvRUFDSDtxRUFDQztrRUFDSDs4REFDSjt5QkFDZTs2RUFDQTt3QkFDRjtpRUFDVjs4QkFDVztRQUN6Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRVAsTUFBTUMsWUFBWTtBQUNYLE1BQU1KLGlCQUFpQjtBQUN2QixNQUFNQyxrQkFBa0I7QUFFL0IsTUFBTUksV0FBVyxDQUFDQztJQUNoQixJQUFJLENBQUNBLFNBQVNBLFVBQVVDLFdBQVc7UUFDakMsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUO0FBRU8sTUFBTUwsZ0JBQWdCLENBQUMsRUFBRU0sT0FBTyxFQUFFQyxnQkFBZ0IsRUFBRTtJQUN6RCxNQUFNLEVBQUVDLENBQUMsRUFBRSxHQUFHQyxJQUFBQSw0QkFBYyxFQUFD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