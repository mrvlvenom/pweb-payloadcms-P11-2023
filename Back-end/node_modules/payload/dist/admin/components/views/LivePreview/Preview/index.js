"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreview", {
    enumerable: true,
    get: function() {
        return LivePreview;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _context = require("../../../forms/Form/context");
const _reduceFieldsToValues = /*#__PURE__*/ _interop_require_default(require("../../../forms/Form/reduceFieldsToValues"));
const _context1 = require("../Context/context");
const _Device = require("../Device");
const _IFrame = require("../IFrame");
const _Toolbar = require("../Toolbar");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview-window';
const LivePreview = (props)=>{
    const { appIsReady, iframeHasLoaded, iframeRef, popupRef, previewWindowType, setIframeHasLoaded, url } = (0, _context1.useLivePreviewContext)();
    const { breakpoint, fieldSchemaJSON } = (0, _context1.useLivePreviewContext)();
    const prevWindowType = _react.default.useRef();
    const [fields] = (0, _context.useAllFormFields)();
    // The preview could either be an iframe embedded on the page
    // Or it could be a separate popup window
    // We need to transmit data to both accordingly
    (0, _react.useEffect)(()=>{
        // For performance, do no reduce fields to values until after the iframe or popup has loaded
        if (fields && window && 'postMessage' in window && appIsReady) {
            const values = (0, _reduceFieldsToValues.default)(fields, true);
            // To reduce on large `postMessage` payloads, only send `fieldSchemaToJSON` one time
            // To do this, the underlying JS function maintains a cache of this value
            // So we need to send it through each time the window type changes
            // But only once per window type change, not on every render, because this is a potentially large obj
            const shouldSendSchema = !prevWindowType.current || prevWindowType.current !== previewWindowType;
            prevWindowType.current = previewWindowType;
            const message = JSON.stringify({
                data: values,
                fieldSchemaJSON: shouldSendSchema ? fieldSchemaJSON : undefined,
                type: 'payload-live-preview'
            });
            // Post message to external popup window
            if (previewWindowType === 'popup' && popupRef.current) {
                popupRef.current.postMessage(message, url);
            }
            // Post message to embedded iframe
            if (previewWindowType === 'iframe' && iframeRef.current) {
                iframeRef.current.contentWindow?.postMessage(message, url);
            }
        }
    }, [
        fields,
        url,
        iframeHasLoaded,
        previewWindowType,
        popupRef,
        appIsReady,
        iframeRef,
        setIframeHasLoaded,
        fieldSchemaJSON
    ]);
    if (previewWindowType === 'iframe') {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: [
                baseClass,
                breakpoint && breakpoint !== 'responsive' && `${baseClass}--has-breakpoint`
            ].filter(Boolean).join(' ')
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__wrapper`
        }, /*#__PURE__*/ _react.default.createElement(_Toolbar.LivePreviewToolbar, props), /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__main`
        }, /*#__PURE__*/ _react.default.createElement(_Device.DeviceContainer, null, /*#__PURE__*/ _react.default.createElement(_IFrame.IFrame, {
            ref: iframeRef,
            setIframeHasLoaded: setIframeHasLoaded,
            url: url
        })))));
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL3ZpZXdzL0xpdmVQcmV2aWV3L1ByZXZpZXcvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBFZGl0Vmlld1Byb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnXG5cbmltcG9ydCB7IHVzZUFsbEZvcm1GaWVsZHMgfSBmcm9tICcuLi8uLi8uLi9mb3Jtcy9Gb3JtL2NvbnRleHQnXG5pbXBvcnQgcmVkdWNlRmllbGRzVG9WYWx1ZXMgZnJvbSAnLi4vLi4vLi4vZm9ybXMvRm9ybS9yZWR1Y2VGaWVsZHNUb1ZhbHVlcydcbmltcG9ydCB7IHVzZUxpdmVQcmV2aWV3Q29udGV4dCB9IGZyb20gJy4uL0NvbnRleHQvY29udGV4dCdcbmltcG9ydCB7IERldmljZUNvbnRhaW5lciB9IGZyb20gJy4uL0RldmljZSdcbmltcG9ydCB7IElGcmFtZSB9IGZyb20gJy4uL0lGcmFtZSdcbmltcG9ydCB7IExpdmVQcmV2aWV3VG9vbGJhciB9IGZyb20gJy4uL1Rvb2xiYXInXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2xpdmUtcHJldmlldy13aW5kb3cnXG5cbmV4cG9ydCBjb25zdCBMaXZlUHJldmlldzogUmVhY3QuRkM8RWRpdFZpZXdQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGFwcElzUmVhZHksXG4gICAgaWZyYW1lSGFzTG9hZGVkLFxuICAgIGlmcmFtZVJlZixcbiAgICBwb3B1cFJlZixcbiAgICBwcmV2aWV3V2luZG93VHlwZSxcbiAgICBzZXRJZnJhbWVIYXNMb2FkZWQsXG4gICAgdXJsLFxuICB9ID0gdXNlTGl2ZVByZXZpZXdDb250ZXh0KClcblxuICBjb25zdCB7IGJyZWFrcG9pbnQsIGZpZWxkU2NoZW1hSlNPTiB9ID0gdXNlTGl2ZVByZXZpZXdDb250ZXh0KClcblxuICBjb25zdCBwcmV2V2luZG93VHlwZSA9XG4gICAgUmVhY3QudXNlUmVmPFJldHVyblR5cGU8dHlwZW9mIHVzZUxpdmVQcmV2aWV3Q29udGV4dD5bJ3ByZXZpZXdXaW5kb3dUeXBlJ10+KClcblxuICBjb25zdCBbZmllbGRzXSA9IHVzZUFsbEZvcm1GaWVsZHMoKVxuXG4gIC8vIFRoZSBwcmV2aWV3IGNvdWxkIGVpdGhlciBiZSBhbiBpZnJhbWUgZW1iZWRkZWQgb24gdGhlIHBhZ2VcbiAgLy8gT3IgaXQgY291bGQgYmUgYSBzZXBhcmF0ZSBwb3B1cCB3aW5kb3dcbiAgLy8gV2UgbmVlZCB0byB0cmFuc21pdCBkYXRhIHRvIGJvdGggYWNjb3JkaW5nbHlcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBGb3IgcGVyZm9ybWFuY2UsIGRvIG5vIHJlZHVjZSBmaWVsZHMgdG8gdmFsdWVzIHVudGlsIGFmdGVyIHRoZSBpZnJhbWUgb3IgcG9wdXAgaGFzIGxvYWRlZFxuICAgIGlmIChmaWVsZHMgJiYgd2luZG93ICYmICdwb3N0TWVzc2FnZScgaW4gd2luZG93ICYmIGFwcElzUmVhZHkpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IHJlZHVjZUZpZWxkc1RvVmFsdWVzKGZpZWxkcywgdHJ1ZSlcblxuICAgICAgLy8gVG8gcmVkdWNlIG9uIGxhcmdlIGBwb3N0TWVzc2FnZWAgcGF5bG9hZHMsIG9ubHkgc2VuZCBgZmllbGRTY2hlbWFUb0pTT05gIG9uZSB0aW1lXG4gICAgICAvLyBUbyBkbyB0aGlzLCB0aGUgdW5kZXJseWluZyBKUyBmdW5jdGlvbiBtYWludGFpbnMgYSBjYWNoZSBvZiB0aGlzIHZhbHVlXG4gICAgICAvLyBTbyB3ZSBuZWVkIHRvIHNlbmQgaXQgdGhyb3VnaCBlYWNoIHRpbWUgdGhlIHdpbmRvdyB0eXBlIGNoYW5nZXNcbiAgICAgIC8vIEJ1dCBvbmx5IG9uY2UgcGVyIHdpbmRvdyB0eXBlIGNoYW5nZSwgbm90IG9uIGV2ZXJ5IHJlbmRlciwgYmVjYXVzZSB0aGlzIGlzIGEgcG90ZW50aWFsbHkgbGFyZ2Ugb2JqXG4gICAgICBjb25zdCBzaG91bGRTZW5kU2NoZW1hID1cbiAgICAgICAgIXByZXZXaW5kb3dUeXBlLmN1cnJlbnQgfHwgcHJldldpbmRvd1R5cGUuY3VycmVudCAhPT0gcHJldmlld1dpbmRvd1R5cGVcblxuICAgICAgcHJldldpbmRvd1R5cGUuY3VycmVudCA9IHByZXZpZXdXaW5kb3dUeXBlXG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGE6IHZhbHVlcyxcbiAgICAgICAgZmllbGRTY2hlbWFKU09OOiBzaG91bGRTZW5kU2NoZW1hID8gZmllbGRTY2hlbWFKU09OIDogdW5kZWZpbmVkLFxuICAgICAgICB0eXBlOiAncGF5bG9hZC1saXZlLXByZXZpZXcnLFxuICAgICAgfSlcblxuICAgICAgLy8gUG9zdCBtZXNzYWdlIHRvIGV4dGVybmFsIHBvcHVwIHdpbmRvd1xuICAgICAgaWYgKHByZXZpZXdXaW5kb3dUeXBlID09PSAncG9wdXAnICYmIHBvcHVwUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcG9wdXBSZWYuY3VycmVudC5wb3N0TWVzc2FnZShtZXNzYWdlLCB1cmwpXG4gICAgICB9XG5cbiAgICAgIC8vIFBvc3QgbWVzc2FnZSB0byBlbWJlZGRlZCBpZnJhbWVcbiAgICAgIGlmIChwcmV2aWV3V2luZG93VHlwZSA9PT0gJ2lmcmFtZScgJiYgaWZyYW1lUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgaWZyYW1lUmVmLmN1cnJlbnQuY29udGVudFdpbmRvdz8ucG9zdE1lc3NhZ2UobWVzc2FnZSwgdXJsKVxuICAgICAgfVxuICAgIH1cbiAgfSwgW1xuICAgIGZpZWxkcyxcbiAgICB1cmwsXG4gICAgaWZyYW1lSGFzTG9hZGVkLFxuICAgIHByZXZpZXdXaW5kb3dUeXBlLFxuICAgIHBvcHVwUmVmLFxuICAgIGFwcElzUmVhZHksXG4gICAgaWZyYW1lUmVmLFxuICAgIHNldElmcmFtZUhhc0xvYWRlZCxcbiAgICBmaWVsZFNjaGVtYUpTT04sXG4gIF0pXG5cbiAgaWYgKHByZXZpZXdXaW5kb3dUeXBlID09PSAnaWZyYW1lJykge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICAgIGJhc2VDbGFzcyxcbiAgICAgICAgICBicmVha3BvaW50ICYmIGJyZWFrcG9pbnQgIT09ICdyZXNwb25zaXZlJyAmJiBgJHtiYXNlQ2xhc3N9LS1oYXMtYnJlYWtwb2ludGAsXG4gICAgICAgIF1cbiAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3dyYXBwZXJgfT5cbiAgICAgICAgICA8TGl2ZVByZXZpZXdUb29sYmFyIHsuLi5wcm9wc30gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fbWFpbmB9PlxuICAgICAgICAgICAgPERldmljZUNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPElGcmFtZSByZWY9e2lmcmFtZVJlZn0gc2V0SWZyYW1lSGFzTG9hZGVkPXtzZXRJZnJhbWVIYXNMb2FkZWR9IHVybD17dXJsfSAvPlxuICAgICAgICAgICAgPC9EZXZpY2VDb250YWluZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iXSwibmFtZXMiOlsiTGl2ZVByZXZpZXciLCJiYXNlQ2xhc3MiLCJwcm9wcyIsImFwcElzUmVhZHkiLCJpZnJhbWVIYXNMb2FkZWQiLCJpZnJhbWVSZWYiLCJwb3B1cFJlZiIsInByZXZpZXdXaW5kb3dUeXBlIiwic2V0SWZyYW1lSGFzTG9hZGVkIiwidXJsIiwidXNlTGl2ZVByZXZpZXdDb250ZXh0IiwiYnJlYWtwb2ludCIsImZpZWxkU2NoZW1hSlNPTiIsInByZXZXaW5kb3dUeXBlIiwiUmVhY3QiLCJ1c2VSZWYiLCJmaWVsZHMiLCJ1c2VBbGxGb3JtRmllbGRzIiwidXNlRWZmZWN0Iiwid2luZG93IiwidmFsdWVzIiwicmVkdWNlRmllbGRzVG9WYWx1ZXMiLCJzaG91bGRTZW5kU2NoZW1hIiwiY3VycmVudCIsIm1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInVuZGVmaW5lZCIsInR5cGUiLCJwb3N0TWVzc2FnZSIsImNvbnRlbnRXaW5kb3ciLCJkaXYiLCJjbGFzc05hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkxpdmVQcmV2aWV3VG9vbGJhciIsIkRldmljZUNvbnRhaW5lciIsIklGcmFtZSIsInJlZiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFjYUE7OztlQUFBQTs7OytEQWRvQjt5QkFJQTs2RUFDQTswQkFDSzt3QkFDTjt3QkFDVDt5QkFDWTtRQUM1Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRVAsTUFBTUMsWUFBWTtBQUVYLE1BQU1ELGNBQXVDLENBQUNFO0lBQ25ELE1BQU0sRUFDSkMsVUFBVSxFQUNWQyxlQUFlLEVBQ2ZDLFNBQVMsRUFDVEMsUUFBUSxFQUNSQyxpQkFBaUIsRUFDakJDLGtCQUFrQixFQUNsQkMsR0FBRyxFQUNKLEdBQUdDLElBQUFBLCtCQUFxQjtJQUV6QixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsZUFBZSxFQUFFLEdBQUdGLElBQUFBLCtCQUFxQjtJQUU3RCxNQUFNRyxpQkFDSkMsY0FBSyxDQUFDQyxNQUFNO0lBRWQsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUFBLHlCQUFnQjtJQUVqQyw2REFBNkQ7SUFDN0QseUNBQXlDO0lBQ3pDLCtDQUErQztJQUMvQ0MsSUFBQUEsZ0JBQVMsRUFBQztRQUNSLDRGQUE0RjtRQUM1RixJQUFJRixVQUFVRyxVQUFVLGlCQUFpQkEsVUFBVWhCLFlBQVk7WUFDN0QsTUFBTWlCLFNBQVNDLElBQUFBLDZCQUFvQixFQUFDTCxRQUFRO1lBRTVDLG9GQUFvRjtZQUNwRix5RUFBeUU7WUFDekUsa0VBQWtFO1lBQ2xFLHFHQUFxRztZQUNyRyxNQUFNTSxtQkFDSixDQUFDVCxlQUFlVSxPQUFPLElBQUlWLGVBQWVVLE9BQU8sS0FBS2hCO1lBRXhETSxlQUFlVSxPQUFPLEdBQUdoQjtZQUV6QixNQUFNaUIsVUFBVUMsS0FBS0MsU0FBUyxDQUFDO2dCQUM3QkMsTUFBTVA7Z0JBQ05SLGlCQUFpQlUsbUJBQW1CVixrQkFBa0JnQjtnQkFDdERDLE1BQU07WUFDUjtZQUVBLHdDQUF3QztZQUN4QyxJQUFJdEIsc0JBQXNCLFdBQVdELFNBQVNpQixPQUFPLEVBQUU7Z0JBQ3JEakIsU0FBU2lCLE9BQU8sQ0FBQ08sV0FBVyxDQUFDTixTQUFTZjtZQUN4QztZQUVBLGtDQUFrQztZQUNsQyxJQUFJRixzQkFBc0IsWUFBWUYsVUFBVWtCLE9BQU8sRUFBRTtnQkFDdkRsQixVQUFVa0IsT0FBTyxDQUFDUSxhQUFhLEVBQUVELFlBQVlOLFNBQVNmO1lBQ3hEO1FBQ0Y7SUFDRixHQUFHO1FBQ0RPO1FBQ0FQO1FBQ0FMO1FBQ0FHO1FBQ0FEO1FBQ0FIO1FBQ0FFO1FBQ0FHO1FBQ0FJO0tBQ0Q7SUFFRCxJQUFJTCxzQkFBc0IsVUFBVTtRQUNsQyxxQkFDRSw2QkFBQ3lCO1lBQ0NDLFdBQVc7Z0JBQ1RoQztnQkFDQVUsY0FBY0EsZUFBZSxnQkFBZ0IsQ0FBQyxFQUFFVixVQUFVLGdCQUFnQixDQUFDO2FBQzVFLENBQ0VpQyxNQUFNLENBQUNDLFNBQ1BDLElBQUksQ0FBQzt5QkFFUiw2QkFBQ0o7WUFBSUMsV0FBVyxDQUFDLEVBQUVoQyxVQUFVLFNBQVMsQ0FBQzt5QkFDckMsNkJBQUNvQywyQkFBa0IsRUFBS25DLHNCQUN4Qiw2QkFBQzhCO1lBQUlDLFdBQVcsQ0FBQyxFQUFFaEMsVUFBVSxNQUFNLENBQUM7eUJBQ2xDLDZCQUFDcUMsdUJBQWUsc0JBQ2QsNkJBQUNDLGNBQU07WUFBQ0MsS0FBS25DO1lBQVdHLG9CQUFvQkE7WUFBb0JDLEtBQUtBOztJQU1qRjtBQUNGIn0=