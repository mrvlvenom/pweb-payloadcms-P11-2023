"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreviewProvider", {
    enumerable: true,
    get: function() {
        return LivePreviewProvider;
    }
});
const _core = require("@dnd-kit/core");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _fieldSchemaToJSON = require("../../../../../utilities/fieldSchemaToJSON");
const _collisionDetection = require("./collisionDetection");
const _context = require("./context");
const _sizeReducer = require("./sizeReducer");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const LivePreviewProvider = (props)=>{
    const { breakpoints, children, isPopupOpen, openPopupWindow, popupRef, url } = props;
    const [previewWindowType, setPreviewWindowType] = (0, _react.useState)('iframe');
    const [appIsReady, setAppIsReady] = (0, _react.useState)(false);
    const iframeRef = _react.default.useRef(null);
    const [iframeHasLoaded, setIframeHasLoaded] = (0, _react.useState)(false);
    const [zoom, setZoom] = (0, _react.useState)(1);
    const [position, setPosition] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const [size, setSize] = _react.default.useReducer(_sizeReducer.sizeReducer, {
        height: 0,
        width: 0
    });
    const [measuredDeviceSize, setMeasuredDeviceSize] = (0, _react.useState)({
        height: 0,
        width: 0
    });
    const [breakpoint, setBreakpoint] = _react.default.useState('responsive');
    const [fieldSchemaJSON] = (0, _react.useState)(()=>{
        let fields;
        if ('collection' in props) {
            const { collection } = props;
            fields = collection.fields;
        }
        if ('global' in props) {
            const { global } = props;
            fields = global.fields;
        }
        return (0, _fieldSchemaToJSON.fieldSchemaToJSON)(fields);
    });
    // The toolbar needs to freely drag and drop around the page
    const handleDragEnd = (ev)=>{
        // only update position if the toolbar is completely within the preview area
        // otherwise reset it back to the previous position
        // TODO: reset to the nearest edge of the preview area
        if (ev.over && ev.over.id === 'live-preview-area') {
            const newPos = {
                x: position.x + ev.delta.x,
                y: position.y + ev.delta.y
            };
            setPosition(newPos);
        } else {
        // reset
        }
    };
    const setWidth = (0, _react.useCallback)((width)=>{
        setSize({
            type: 'width',
            value: width
        });
    }, [
        setSize
    ]);
    const setHeight = (0, _react.useCallback)((height)=>{
        setSize({
            type: 'height',
            value: height
        });
    }, [
        setSize
    ]);
    // explicitly set new width and height when as new breakpoints are selected
    // exclude `custom` breakpoint as it is handled by the `setWidth` and `setHeight` directly
    (0, _react.useEffect)(()=>{
        const foundBreakpoint = breakpoints?.find((bp)=>bp.name === breakpoint);
        if (foundBreakpoint && breakpoint !== 'responsive' && breakpoint !== 'custom' && typeof foundBreakpoint?.width === 'number' && typeof foundBreakpoint?.height === 'number') {
            setSize({
                type: 'reset',
                value: {
                    height: foundBreakpoint.height,
                    width: foundBreakpoint.width
                }
            });
        }
    }, [
        breakpoint,
        breakpoints
    ]);
    // Receive the `ready` message from the popup window
    // This indicates that the app is ready to receive `window.postMessage` events
    // This is also the only cross-origin way of detecting when a popup window has loaded
    // Unlike iframe elements which have an `onLoad` handler, there is no way to access `window.open` on popups
    (0, _react.useEffect)(()=>{
        const handleMessage = (event)=>{
            if (url.startsWith(event.origin)) {
                const data = JSON.parse(event.data);
                if (data.type === 'payload-live-preview' && data.ready) {
                    setAppIsReady(true);
                }
            }
        };
        window.addEventListener('message', handleMessage);
        return ()=>{
            window.removeEventListener('message', handleMessage);
        };
    }, [
        url
    ]);
    const handleWindowChange = (0, _react.useCallback)((type)=>{
        setAppIsReady(false);
        setPreviewWindowType(type);
        if (type === 'popup') openPopupWindow();
    }, [
        openPopupWindow
    ]);
    // when the user closes the popup window, switch back to the iframe
    // the `usePopupWindow` reports the `isPopupOpen` state for us to use here
    (0, _react.useEffect)(()=>{
        if (!isPopupOpen) {
            handleWindowChange('iframe');
        }
    }, [
        isPopupOpen,
        handleWindowChange
    ]);
    return /*#__PURE__*/ _react.default.createElement(_context.LivePreviewContext.Provider, {
        value: {
            appIsReady,
            breakpoint,
            breakpoints,
            fieldSchemaJSON,
            iframeHasLoaded,
            iframeRef,
            isPopupOpen,
            measuredDeviceSize,
            openPopupWindow,
            popupRef,
            previewWindowType,
            setAppIsReady,
            setBreakpoint,
            setHeight,
            setIframeHasLoaded,
            setMeasuredDeviceSize,
            setPreviewWindowType: handleWindowChange,
            setSize,
            setToolbarPosition: setPosition,
            setWidth,
            setZoom,
            size,
            toolbarPosition: position,
            url,
            zoom
        }
    }, /*#__PURE__*/ _react.default.createElement(_core.DndContext, {
        collisionDetection: _collisionDetection.customCollisionDetection,
        onDragEnd: handleDragEnd
    }, children));
};

//# sourceMappingURL=data:application/json;base64,