"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _qs = /*#__PURE__*/ _interop_require_default(require("qs"));
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _Config = require("../../utilities/Config");
const _Locale = require("../../utilities/Locale");
const _SearchParams = require("../../utilities/SearchParams");
const _Popup = /*#__PURE__*/ _interop_require_default(require("../Popup"));
const _PopupButtonList = /*#__PURE__*/ _interop_require_wildcard(require("../Popup/PopupButtonList"));
const _LocalizerLabel = require("./LocalizerLabel");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'localizer';
const Localizer = (props)=>{
    const { className } = props;
    const config = (0, _Config.useConfig)();
    const { localization } = config;
    const locale = (0, _Locale.useLocale)();
    const searchParams = (0, _SearchParams.useSearchParams)();
    if (localization) {
        const { locales } = localization;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: [
                baseClass,
                className
            ].filter(Boolean).join(' ')
        }, /*#__PURE__*/ _react.default.createElement(_Popup.default, {
            button: /*#__PURE__*/ _react.default.createElement(_LocalizerLabel.LocalizerLabel, null),
            horizontalAlign: "right",
            render: ({ close })=>/*#__PURE__*/ _react.default.createElement(_PopupButtonList.ButtonGroup, null, /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, locale ? /*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                    active: true,
                    key: locale.code,
                    onClick: close,
                    to: {
                        search: _qs.default.stringify({
                            ...searchParams,
                            locale: locale.code
                        })
                    }
                }, locale.label, locale.label !== locale.code && ` (${locale.code})`) : null, locales.map((localeOption)=>{
                    if (locale.code === localeOption.code) return null;
                    const newParams = {
                        ...searchParams,
                        locale: localeOption.code
                    };
                    const search = _qs.default.stringify(newParams);
                    return /*#__PURE__*/ _react.default.createElement(_PopupButtonList.Button, {
                        key: localeOption.code,
                        onClick: close,
                        to: {
                            search
                        }
                    }, localeOption.label, localeOption.label !== localeOption.code && ` (${localeOption.code})`);
                }))),
            showScrollbar: true,
            size: "large"
        }));
    }
    return null;
};
const _default = Localizer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0xvY2FsaXplci9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHFzIGZyb20gJ3FzJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyB1c2VDb25maWcgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvQ29uZmlnJ1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL0xvY2FsZSdcbmltcG9ydCB7IHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9TZWFyY2hQYXJhbXMnXG5pbXBvcnQgUG9wdXAgZnJvbSAnLi4vUG9wdXAnXG5pbXBvcnQgKiBhcyBQb3B1cExpc3QgZnJvbSAnLi4vUG9wdXAvUG9wdXBCdXR0b25MaXN0J1xuaW1wb3J0IHsgTG9jYWxpemVyTGFiZWwgfSBmcm9tICcuL0xvY2FsaXplckxhYmVsJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbmNvbnN0IGJhc2VDbGFzcyA9ICdsb2NhbGl6ZXInXG5cbmNvbnN0IExvY2FsaXplcjogUmVhY3QuRkM8e1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY2xhc3NOYW1lIH0gPSBwcm9wc1xuICBjb25zdCBjb25maWcgPSB1c2VDb25maWcoKVxuICBjb25zdCB7IGxvY2FsaXphdGlvbiB9ID0gY29uZmlnXG5cbiAgY29uc3QgbG9jYWxlID0gdXNlTG9jYWxlKClcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gdXNlU2VhcmNoUGFyYW1zKClcblxuICBpZiAobG9jYWxpemF0aW9uKSB7XG4gICAgY29uc3QgeyBsb2NhbGVzIH0gPSBsb2NhbGl6YXRpb25cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17W2Jhc2VDbGFzcywgY2xhc3NOYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpfT5cbiAgICAgICAgPFBvcHVwXG4gICAgICAgICAgYnV0dG9uPXs8TG9jYWxpemVyTGFiZWwgLz59XG4gICAgICAgICAgaG9yaXpvbnRhbEFsaWduPVwicmlnaHRcIlxuICAgICAgICAgIHJlbmRlcj17KHsgY2xvc2UgfSkgPT4gKFxuICAgICAgICAgICAgPFBvcHVwTGlzdC5CdXR0b25Hcm91cD5cbiAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIHtsb2NhbGUgPyAoXG4gICAgICAgICAgICAgICAgICA8UG9wdXBMaXN0LkJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAga2V5PXtsb2NhbGUuY29kZX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2xvc2V9XG4gICAgICAgICAgICAgICAgICAgIHRvPXt7XG4gICAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBxcy5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uc2VhcmNoUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGUuY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2xvY2FsZS5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAge2xvY2FsZS5sYWJlbCAhPT0gbG9jYWxlLmNvZGUgJiYgYCAoJHtsb2NhbGUuY29kZX0pYH1cbiAgICAgICAgICAgICAgICAgIDwvUG9wdXBMaXN0LkJ1dHRvbj5cbiAgICAgICAgICAgICAgICApIDogbnVsbH1cblxuICAgICAgICAgICAgICAgIHtsb2NhbGVzLm1hcCgobG9jYWxlT3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAobG9jYWxlLmNvZGUgPT09IGxvY2FsZU9wdGlvbi5jb2RlKSByZXR1cm4gbnVsbFxuXG4gICAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnNlYXJjaFBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGVPcHRpb24uY29kZSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaCA9IHFzLnN0cmluZ2lmeShuZXdQYXJhbXMpXG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxQb3B1cExpc3QuQnV0dG9uIGtleT17bG9jYWxlT3B0aW9uLmNvZGV9IG9uQ2xpY2s9e2Nsb3NlfSB0bz17eyBzZWFyY2ggfX0+XG4gICAgICAgICAgICAgICAgICAgICAge2xvY2FsZU9wdGlvbi5sYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgICB7bG9jYWxlT3B0aW9uLmxhYmVsICE9PSBsb2NhbGVPcHRpb24uY29kZSAmJiBgICgke2xvY2FsZU9wdGlvbi5jb2RlfSlgfVxuICAgICAgICAgICAgICAgICAgICA8L1BvcHVwTGlzdC5CdXR0b24+XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICA8L1BvcHVwTGlzdC5CdXR0b25Hcm91cD5cbiAgICAgICAgICApfVxuICAgICAgICAgIHNob3dTY3JvbGxiYXJcbiAgICAgICAgICBzaXplPVwibGFyZ2VcIlxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYWxpemVyXG4iXSwibmFtZXMiOlsiYmFzZUNsYXNzIiwiTG9jYWxpemVyIiwicHJvcHMiLCJjbGFzc05hbWUiLCJjb25maWciLCJ1c2VDb25maWciLCJsb2NhbGl6YXRpb24iLCJsb2NhbGUiLCJ1c2VMb2NhbGUiLCJzZWFyY2hQYXJhbXMiLCJ1c2VTZWFyY2hQYXJhbXMiLCJsb2NhbGVzIiwiZGl2IiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJQb3B1cCIsImJ1dHRvbiIsIkxvY2FsaXplckxhYmVsIiwiaG9yaXpvbnRhbEFsaWduIiwicmVuZGVyIiwiY2xvc2UiLCJQb3B1cExpc3QiLCJCdXR0b25Hcm91cCIsIlJlYWN0IiwiRnJhZ21lbnQiLCJCdXR0b24iLCJhY3RpdmUiLCJrZXkiLCJjb2RlIiwib25DbGljayIsInRvIiwic2VhcmNoIiwicXMiLCJzdHJpbmdpZnkiLCJsYWJlbCIsIm1hcCIsImxvY2FsZU9wdGlvbiIsIm5ld1BhcmFtcyIsInNob3dTY3JvbGxiYXIiLCJzaXplIl0sIm1hcHBpbmdzIjoiOzs7OytCQWdGQTs7O2VBQUE7OzsyREFoRmU7OERBQ0c7d0JBRVE7d0JBQ0E7OEJBQ007OERBQ2Q7eUVBQ1M7Z0NBQ0k7UUFDeEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVQLE1BQU1BLFlBQVk7QUFFbEIsTUFBTUMsWUFFRCxDQUFDQztJQUNKLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUdEO0lBQ3RCLE1BQU1FLFNBQVNDLElBQUFBLGlCQUFTO0lBQ3hCLE1BQU0sRUFBRUMsWUFBWSxFQUFFLEdBQUdGO0lBRXpCLE1BQU1HLFNBQVNDLElBQUFBLGlCQUFTO0lBQ3hCLE1BQU1DLGVBQWVDLElBQUFBLDZCQUFlO0lBRXBDLElBQUlKLGNBQWM7UUFDaEIsTUFBTSxFQUFFSyxPQUFPLEVBQUUsR0FBR0w7UUFFcEIscUJBQ0UsNkJBQUNNO1lBQUlULFdBQVc7Z0JBQUNIO2dCQUFXRzthQUFVLENBQUNVLE1BQU0sQ0FBQ0MsU0FBU0MsSUFBSSxDQUFDO3lCQUMxRCw2QkFBQ0MsY0FBSztZQUNKQyxzQkFBUSw2QkFBQ0MsOEJBQWM7WUFDdkJDLGlCQUFnQjtZQUNoQkMsUUFBUSxDQUFDLEVBQUVDLEtBQUssRUFBRSxpQkFDaEIsNkJBQUNDLGlCQUFVQyxXQUFXLHNCQUNwQiw2QkFBQ0MsY0FBSyxDQUFDQyxRQUFRLFFBQ1psQix1QkFDQyw2QkFBQ2UsaUJBQVVJLE1BQU07b0JBQ2ZDLFFBQUFBO29CQUNBQyxLQUFLckIsT0FBT3NCLElBQUk7b0JBQ2hCQyxTQUFTVDtvQkFDVFUsSUFBSTt3QkFDRkMsUUFBUUMsV0FBRSxDQUFDQyxTQUFTLENBQUM7NEJBQ25CLEdBQUd6QixZQUFZOzRCQUNmRixRQUFRQSxPQUFPc0IsSUFBSTt3QkFDckI7b0JBQ0Y7bUJBRUN0QixPQUFPNEIsS0FBSyxFQUNaNUIsT0FBTzRCLEtBQUssS0FBSzVCLE9BQU9zQixJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUV0QixPQUFPc0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUVwRCxNQUVIbEIsUUFBUXlCLEdBQUcsQ0FBQyxDQUFDQztvQkFDWixJQUFJOUIsT0FBT3NCLElBQUksS0FBS1EsYUFBYVIsSUFBSSxFQUFFLE9BQU87b0JBRTlDLE1BQU1TLFlBQVk7d0JBQ2hCLEdBQUc3QixZQUFZO3dCQUNmRixRQUFROEIsYUFBYVIsSUFBSTtvQkFDM0I7b0JBQ0EsTUFBTUcsU0FBU0MsV0FBRSxDQUFDQyxTQUFTLENBQUNJO29CQUU1QixxQkFDRSw2QkFBQ2hCLGlCQUFVSSxNQUFNO3dCQUFDRSxLQUFLUyxhQUFhUixJQUFJO3dCQUFFQyxTQUFTVDt3QkFBT1UsSUFBSTs0QkFBRUM7d0JBQU87dUJBQ3BFSyxhQUFhRixLQUFLLEVBQ2xCRSxhQUFhRixLQUFLLEtBQUtFLGFBQWFSLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRVEsYUFBYVIsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFHNUU7WUFJTlUsZUFBQUE7WUFDQUMsTUFBSzs7SUFJYjtJQUVBLE9BQU87QUFDVDtNQUVBLFdBQWV2QyJ9