"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getCustomViews", {
    enumerable: true,
    get: function() {
        return getCustomViews;
    }
});
const _CustomComponent = require("../../../views/Global/Routes/CustomComponent");
const _CustomComponent1 = require("../../../views/collections/Edit/Routes/CustomComponent");
const getCustomViews = (args)=>{
    const { collection, global } = args;
    let customViews;
    if (collection) {
        const collectionViewsConfig = typeof collection?.admin?.components?.views?.Edit === 'object' && typeof collection?.admin?.components?.views?.Edit !== 'function' ? collection?.admin?.components?.views?.Edit : undefined;
        const defaultViewKeys = Object.keys(_CustomComponent1.defaultCollectionViews);
        customViews = Object.entries(collectionViewsConfig || {}).reduce((prev, [key, view])=>{
            if (defaultViewKeys.includes(key)) {
                return prev;
            }
            return [
                ...prev,
                {
                    ...view,
                    key
                }
            ];
        }, []);
    }
    if (global) {
        const globalViewsConfig = typeof global?.admin?.components?.views?.Edit === 'object' && typeof global?.admin?.components?.views?.Edit !== 'function' ? global?.admin?.components?.views?.Edit : undefined;
        const defaultViewKeys = Object.keys(_CustomComponent.defaultGlobalViews);
        customViews = Object.entries(globalViewsConfig || {}).reduce((prev, [key, view])=>{
            if (defaultViewKeys.includes(key)) {
                return prev;
            }
            return [
                ...prev,
                {
                    ...view,
                    key
                }
            ];
        }, []);
    }
    return customViews;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0RvY3VtZW50SGVhZGVyL1RhYnMvZ2V0Q3VzdG9tVmlld3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFZGl0Vmlld0NvbmZpZyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2V4cG9ydHMvY29uZmlnJ1xuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnLCBTYW5pdGl6ZWRHbG9iYWxDb25maWcgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9leHBvcnRzL3R5cGVzJ1xuXG5pbXBvcnQgeyBkZWZhdWx0R2xvYmFsVmlld3MgfSBmcm9tICcuLi8uLi8uLi92aWV3cy9HbG9iYWwvUm91dGVzL0N1c3RvbUNvbXBvbmVudCdcbmltcG9ydCB7IGRlZmF1bHRDb2xsZWN0aW9uVmlld3MgfSBmcm9tICcuLi8uLi8uLi92aWV3cy9jb2xsZWN0aW9ucy9FZGl0L1JvdXRlcy9DdXN0b21Db21wb25lbnQnXG5cbmV4cG9ydCBjb25zdCBnZXRDdXN0b21WaWV3cyA9IChhcmdzOiB7XG4gIGNvbGxlY3Rpb246IFNhbml0aXplZENvbGxlY3Rpb25Db25maWdcbiAgZ2xvYmFsOiBTYW5pdGl6ZWRHbG9iYWxDb25maWdcbn0pOiBFZGl0Vmlld0NvbmZpZ1tdID0+IHtcbiAgY29uc3QgeyBjb2xsZWN0aW9uLCBnbG9iYWwgfSA9IGFyZ3NcblxuICBsZXQgY3VzdG9tVmlld3M6IEVkaXRWaWV3Q29uZmlnW11cblxuICBpZiAoY29sbGVjdGlvbikge1xuICAgIGNvbnN0IGNvbGxlY3Rpb25WaWV3c0NvbmZpZyA9XG4gICAgICB0eXBlb2YgY29sbGVjdGlvbj8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIGNvbGxlY3Rpb24/LmFkbWluPy5jb21wb25lbnRzPy52aWV3cz8uRWRpdCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNvbGxlY3Rpb24/LmFkbWluPy5jb21wb25lbnRzPy52aWV3cz8uRWRpdFxuICAgICAgICA6IHVuZGVmaW5lZFxuXG4gICAgY29uc3QgZGVmYXVsdFZpZXdLZXlzID0gT2JqZWN0LmtleXMoZGVmYXVsdENvbGxlY3Rpb25WaWV3cylcblxuICAgIGN1c3RvbVZpZXdzID0gT2JqZWN0LmVudHJpZXMoY29sbGVjdGlvblZpZXdzQ29uZmlnIHx8IHt9KS5yZWR1Y2UoKHByZXYsIFtrZXksIHZpZXddKSA9PiB7XG4gICAgICBpZiAoZGVmYXVsdFZpZXdLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXZcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFsuLi5wcmV2LCB7IC4uLnZpZXcsIGtleSB9XVxuICAgIH0sIFtdKVxuICB9XG5cbiAgaWYgKGdsb2JhbCkge1xuICAgIGNvbnN0IGdsb2JhbFZpZXdzQ29uZmlnID1cbiAgICAgIHR5cGVvZiBnbG9iYWw/LmFkbWluPy5jb21wb25lbnRzPy52aWV3cz8uRWRpdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBnbG9iYWw/LmFkbWluPy5jb21wb25lbnRzPy52aWV3cz8uRWRpdCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGdsb2JhbD8uYWRtaW4/LmNvbXBvbmVudHM/LnZpZXdzPy5FZGl0XG4gICAgICAgIDogdW5kZWZpbmVkXG5cbiAgICBjb25zdCBkZWZhdWx0Vmlld0tleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0R2xvYmFsVmlld3MpXG5cbiAgICBjdXN0b21WaWV3cyA9IE9iamVjdC5lbnRyaWVzKGdsb2JhbFZpZXdzQ29uZmlnIHx8IHt9KS5yZWR1Y2UoKHByZXYsIFtrZXksIHZpZXddKSA9PiB7XG4gICAgICBpZiAoZGVmYXVsdFZpZXdLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXZcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFsuLi5wcmV2LCB7IC4uLnZpZXcsIGtleSB9XVxuICAgIH0sIFtdKVxuICB9XG5cbiAgcmV0dXJuIGN1c3RvbVZpZXdzXG59XG4iXSwibmFtZXMiOlsiZ2V0Q3VzdG9tVmlld3MiLCJhcmdzIiwiY29sbGVjdGlvbiIsImdsb2JhbCIsImN1c3RvbVZpZXdzIiwiY29sbGVjdGlvblZpZXdzQ29uZmlnIiwiYWRtaW4iLCJjb21wb25lbnRzIiwidmlld3MiLCJFZGl0IiwidW5kZWZpbmVkIiwiZGVmYXVsdFZpZXdLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImRlZmF1bHRDb2xsZWN0aW9uVmlld3MiLCJlbnRyaWVzIiwicmVkdWNlIiwicHJldiIsImtleSIsInZpZXciLCJpbmNsdWRlcyIsImdsb2JhbFZpZXdzQ29uZmlnIiwiZGVmYXVsdEdsb2JhbFZpZXdzIl0sIm1hcHBpbmdzIjoiOzs7OytCQU1hQTs7O2VBQUFBOzs7aUNBSHNCO2tDQUNJO0FBRWhDLE1BQU1BLGlCQUFpQixDQUFDQztJQUk3QixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFLEdBQUdGO0lBRS9CLElBQUlHO0lBRUosSUFBSUYsWUFBWTtRQUNkLE1BQU1HLHdCQUNKLE9BQU9ILFlBQVlJLE9BQU9DLFlBQVlDLE9BQU9DLFNBQVMsWUFDdEQsT0FBT1AsWUFBWUksT0FBT0MsWUFBWUMsT0FBT0MsU0FBUyxhQUNsRFAsWUFBWUksT0FBT0MsWUFBWUMsT0FBT0MsT0FDdENDO1FBRU4sTUFBTUMsa0JBQWtCQyxPQUFPQyxJQUFJLENBQUNDLHdDQUFzQjtRQUUxRFYsY0FBY1EsT0FBT0csT0FBTyxDQUFDVix5QkFBeUIsQ0FBQyxHQUFHVyxNQUFNLENBQUMsQ0FBQ0MsTUFBTSxDQUFDQyxLQUFLQyxLQUFLO1lBQ2pGLElBQUlSLGdCQUFnQlMsUUFBUSxDQUFDRixNQUFNO2dCQUNqQyxPQUFPRDtZQUNUO1lBRUEsT0FBTzttQkFBSUE7Z0JBQU07b0JBQUUsR0FBR0UsSUFBSTtvQkFBRUQ7Z0JBQUk7YUFBRTtRQUNwQyxHQUFHLEVBQUU7SUFDUDtJQUVBLElBQUlmLFFBQVE7UUFDVixNQUFNa0Isb0JBQ0osT0FBT2xCLFFBQVFHLE9BQU9DLFlBQVlDLE9BQU9DLFNBQVMsWUFDbEQsT0FBT04sUUFBUUcsT0FBT0MsWUFBWUMsT0FBT0MsU0FBUyxhQUM5Q04sUUFBUUcsT0FBT0MsWUFBWUMsT0FBT0MsT0FDbENDO1FBRU4sTUFBTUMsa0JBQWtCQyxPQUFPQyxJQUFJLENBQUNTLG1DQUFrQjtRQUV0RGxCLGNBQWNRLE9BQU9HLE9BQU8sQ0FBQ00scUJBQXFCLENBQUMsR0FBR0wsTUFBTSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsS0FBS0MsS0FBSztZQUM3RSxJQUFJUixnQkFBZ0JTLFFBQVEsQ0FBQ0YsTUFBTTtnQkFDakMsT0FBT0Q7WUFDVDtZQUVBLE9BQU87bUJBQUlBO2dCQUFNO29CQUFFLEdBQUdFLElBQUk7b0JBQUVEO2dCQUFJO2FBQUU7UUFDcEMsR0FBRyxFQUFFO0lBQ1A7SUFFQSxPQUFPZDtBQUNUIn0=