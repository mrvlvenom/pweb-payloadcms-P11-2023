"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DocumentTabs", {
    enumerable: true,
    get: function() {
        return DocumentTabs;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _Tab = require("./Tab");
const _getCustomViews = require("./getCustomViews");
require("./index.scss");
const _tabs = require("./tabs");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'doc-tabs';
const DocumentTabs = (props)=>{
    const { collection, global, isEditing } = props;
    const customViews = (0, _getCustomViews.getCustomViews)({
        collection,
        global
    });
    // Don't show tabs when creating new documents
    if (collection && isEditing || global) {
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: baseClass
        }, /*#__PURE__*/ _react.default.createElement("div", {
            className: `${baseClass}__tabs-container`
        }, /*#__PURE__*/ _react.default.createElement("ul", {
            className: `${baseClass}__tabs`
        }, _tabs.tabs?.map((Tab, index)=>{
            return /*#__PURE__*/ _react.default.createElement(_Tab.DocumentTab, {
                ...props,
                ...Tab,
                key: `tab-${index}`
            });
        }), customViews?.map((CustomView, index)=>{
            const { Tab, path } = CustomView;
            if (typeof Tab === 'function') {
                return /*#__PURE__*/ _react.default.createElement(Tab, {
                    path: path,
                    ...props,
                    key: `tab-custom-${index}`
                });
            }
            return /*#__PURE__*/ _react.default.createElement(_Tab.DocumentTab, {
                ...props,
                ...Tab,
                key: `tab-custom-${index}`
            });
        }))));
    }
    return null;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0RvY3VtZW50SGVhZGVyL1RhYnMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBEb2N1bWVudFRhYlByb3BzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHsgRG9jdW1lbnRUYWIgfSBmcm9tICcuL1RhYidcbmltcG9ydCB7IGdldEN1c3RvbVZpZXdzIH0gZnJvbSAnLi9nZXRDdXN0b21WaWV3cydcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuaW1wb3J0IHsgdGFicyB9IGZyb20gJy4vdGFicydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2RvYy10YWJzJ1xuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRUYWJzOiBSZWFjdC5GQzxEb2N1bWVudFRhYlByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IGNvbGxlY3Rpb24sIGdsb2JhbCwgaXNFZGl0aW5nIH0gPSBwcm9wc1xuICBjb25zdCBjdXN0b21WaWV3cyA9IGdldEN1c3RvbVZpZXdzKHsgY29sbGVjdGlvbiwgZ2xvYmFsIH0pXG5cbiAgLy8gRG9uJ3Qgc2hvdyB0YWJzIHdoZW4gY3JlYXRpbmcgbmV3IGRvY3VtZW50c1xuICBpZiAoKGNvbGxlY3Rpb24gJiYgaXNFZGl0aW5nKSB8fCBnbG9iYWwpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Jhc2VDbGFzc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X190YWJzLWNvbnRhaW5lcmB9PlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3RhYnNgfT5cbiAgICAgICAgICAgIHt0YWJzPy5tYXAoKFRhYiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxEb2N1bWVudFRhYiB7Li4ucHJvcHN9IHsuLi5UYWJ9IGtleT17YHRhYi0ke2luZGV4fWB9IC8+XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHtjdXN0b21WaWV3cz8ubWFwKChDdXN0b21WaWV3LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IFRhYiwgcGF0aCB9ID0gQ3VzdG9tVmlld1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgVGFiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDxUYWIgcGF0aD17cGF0aH0gey4uLnByb3BzfSBrZXk9e2B0YWItY3VzdG9tLSR7aW5kZXh9YH0gLz5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiA8RG9jdW1lbnRUYWIgey4uLnByb3BzfSB7Li4uVGFifSBrZXk9e2B0YWItY3VzdG9tLSR7aW5kZXh9YH0gLz5cbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cbiJdLCJuYW1lcyI6WyJEb2N1bWVudFRhYnMiLCJiYXNlQ2xhc3MiLCJwcm9wcyIsImNvbGxlY3Rpb24iLCJnbG9iYWwiLCJpc0VkaXRpbmciLCJjdXN0b21WaWV3cyIsImdldEN1c3RvbVZpZXdzIiwiZGl2IiwiY2xhc3NOYW1lIiwidWwiLCJ0YWJzIiwibWFwIiwiVGFiIiwiaW5kZXgiLCJEb2N1bWVudFRhYiIsImtleSIsIkN1c3RvbVZpZXciLCJwYXRoIl0sIm1hcHBpbmdzIjoiOzs7OytCQVdhQTs7O2VBQUFBOzs7OERBWEs7cUJBSVU7Z0NBQ0c7UUFDeEI7c0JBQ2M7Ozs7OztBQUVyQixNQUFNQyxZQUFZO0FBRVgsTUFBTUQsZUFBMkMsQ0FBQ0U7SUFDdkQsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFLEdBQUdIO0lBQzFDLE1BQU1JLGNBQWNDLElBQUFBLDhCQUFjLEVBQUM7UUFBRUo7UUFBWUM7SUFBTztJQUV4RCw4Q0FBOEM7SUFDOUMsSUFBSSxBQUFDRCxjQUFjRSxhQUFjRCxRQUFRO1FBQ3ZDLHFCQUNFLDZCQUFDSTtZQUFJQyxXQUFXUjt5QkFDZCw2QkFBQ087WUFBSUMsV0FBVyxDQUFDLEVBQUVSLFVBQVUsZ0JBQWdCLENBQUM7eUJBQzVDLDZCQUFDUztZQUFHRCxXQUFXLENBQUMsRUFBRVIsVUFBVSxNQUFNLENBQUM7V0FDaENVLFVBQUksRUFBRUMsSUFBSSxDQUFDQyxLQUFLQztZQUNmLHFCQUFPLDZCQUFDQyxnQkFBVztnQkFBRSxHQUFHYixLQUFLO2dCQUFHLEdBQUdXLEdBQUc7Z0JBQUVHLEtBQUssQ0FBQyxJQUFJLEVBQUVGLE1BQU0sQ0FBQzs7UUFDN0QsSUFDQ1IsYUFBYU0sSUFBSSxDQUFDSyxZQUFZSDtZQUM3QixNQUFNLEVBQUVELEdBQUcsRUFBRUssSUFBSSxFQUFFLEdBQUdEO1lBRXRCLElBQUksT0FBT0osUUFBUSxZQUFZO2dCQUM3QixxQkFBTyw2QkFBQ0E7b0JBQUlLLE1BQU1BO29CQUFPLEdBQUdoQixLQUFLO29CQUFFYyxLQUFLLENBQUMsV0FBVyxFQUFFRixNQUFNLENBQUM7O1lBQy9EO1lBRUEscUJBQU8sNkJBQUNDLGdCQUFXO2dCQUFFLEdBQUdiLEtBQUs7Z0JBQUcsR0FBR1csR0FBRztnQkFBRUcsS0FBSyxDQUFDLFdBQVcsRUFBRUYsTUFBTSxDQUFDOztRQUNwRTtJQUtWO0lBRUEsT0FBTztBQUNUIn0=