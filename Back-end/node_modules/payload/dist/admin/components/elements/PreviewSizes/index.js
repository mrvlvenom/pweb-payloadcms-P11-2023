"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _Meta = /*#__PURE__*/ _interop_require_default(require("../FileDetails/Meta"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'preview-sizes';
const sortSizes = (sizes, imageSizes)=>{
    if (!imageSizes || imageSizes.length === 0) return sizes;
    const orderedSizes = {};
    imageSizes.forEach(({ name })=>{
        if (sizes[name]) {
            orderedSizes[name] = sizes[name];
        }
    });
    return orderedSizes;
};
const PreviewSizes = ({ collection, doc, imageCacheTag })=>{
    const { upload: { imageSizes, staticURL } } = collection;
    const { sizes } = doc;
    const [orderedSizes, setOrderedSizes] = (0, _react.useState)(()=>sortSizes(sizes, imageSizes));
    const [selectedSize, setSelectedSize] = (0, _react.useState)(orderedSizes?.[imageSizes[0]?.name]?.filename ? imageSizes[0]?.name : null);
    const generateImageUrl = (filename)=>{
        return `${staticURL}/${filename}${imageCacheTag ? `?${imageCacheTag}` : ''}`;
    };
    (0, _react.useEffect)(()=>{
        setOrderedSizes(sortSizes(sizes, imageSizes));
    }, [
        sizes,
        imageSizes,
        imageCacheTag
    ]);
    const mainPreviewSrc = generateImageUrl(`${orderedSizes[selectedSize]?.filename}`);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: baseClass
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__imageWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__meta`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__sizeName`
    }, selectedSize), /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        ...selectedSize && orderedSizes[selectedSize],
        staticURL: staticURL
    })), /*#__PURE__*/ _react.default.createElement("img", {
        alt: doc.filename,
        className: `${baseClass}__preview`,
        src: mainPreviewSrc
    })), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__listWrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__list`
    }, Object.entries(orderedSizes).map(([key, val])=>{
        const selected = selectedSize === key;
        const previewSrc = generateImageUrl(val.filename);
        if (previewSrc) {
            return /*#__PURE__*/ _react.default.createElement("div", {
                className: [
                    `${baseClass}__sizeOption`,
                    selected && `${baseClass}--selected`
                ].filter(Boolean).join(' '),
                key: key,
                onClick: ()=>setSelectedSize(key),
                onKeyDown: (e)=>{
                    if (e.keyCode === 13) {
                        setSelectedSize(key);
                    }
                },
                role: "button",
                tabIndex: 0
            }, /*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__image`
            }, /*#__PURE__*/ _react.default.createElement("img", {
                alt: val.filename,
                src: previewSrc
            })), /*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__sizeMeta`
            }, /*#__PURE__*/ _react.default.createElement("div", {
                className: `${baseClass}__sizeName`
            }, key), /*#__PURE__*/ _react.default.createElement(_Meta.default, {
                ...val,
                staticURL: staticURL
            })));
        }
        return null;
    }))));
};
const _default = PreviewSizes;

//# sourceMappingURL=data:application/json;base64,