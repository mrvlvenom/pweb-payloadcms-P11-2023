"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Select", {
    enumerable: true,
    get: function() {
        return Select;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../../utilities/getTranslation");
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../../ReactSelect"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const formatOptions = (options)=>options.map((option)=>{
        if (typeof option === 'object' && (option.value || option.value === '')) {
            return option;
        }
        return {
            label: option,
            value: option
        };
    });
const Select = ({ onChange, operator, options: optionsFromProps, value })=>{
    const { i18n } = (0, _reacti18next.useTranslation)();
    const [options, setOptions] = _react.default.useState(formatOptions(optionsFromProps));
    const isMulti = [
        'in',
        'not_in'
    ].includes(operator);
    let valueToRender;
    if (isMulti && Array.isArray(value)) {
        valueToRender = value.map((val)=>{
            const matchingOption = options.find((option)=>option.value === val);
            return {
                label: matchingOption ? (0, _getTranslation.getTranslation)(matchingOption.label, i18n) : val,
                value: matchingOption?.value ?? val
            };
        });
    } else if (value) {
        const matchingOption = options.find((option)=>option.value === value);
        valueToRender = {
            label: matchingOption ? (0, _getTranslation.getTranslation)(matchingOption.label, i18n) : value,
            value: matchingOption?.value ?? value
        };
    }
    const onSelect = _react.default.useCallback((selectedOption)=>{
        let newValue;
        if (!selectedOption) {
            newValue = null;
        } else if (isMulti) {
            if (Array.isArray(selectedOption)) {
                newValue = selectedOption.map((option)=>option.value);
            } else {
                newValue = [];
            }
        } else {
            newValue = selectedOption.value;
        }
        onChange(newValue);
    }, [
        isMulti,
        onChange
    ]);
    _react.default.useEffect(()=>{
        setOptions(formatOptions(optionsFromProps));
    }, [
        optionsFromProps
    ]);
    _react.default.useEffect(()=>{
        if (!isMulti && Array.isArray(value)) {
            onChange(value[0]);
        }
    }, [
        isMulti,
        onChange,
        value
    ]);
    return /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        isMulti: isMulti,
        onChange: onSelect,
        options: options.map((option)=>({
                ...option,
                label: (0, _getTranslation.getTranslation)(option.label, i18n)
            })),
        value: valueToRender
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL1doZXJlQnVpbGRlci9Db25kaXRpb24vU2VsZWN0L2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgT3B0aW9uLCBPcHRpb25PYmplY3QgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuaW1wb3J0IFJlYWN0U2VsZWN0IGZyb20gJy4uLy4uLy4uL1JlYWN0U2VsZWN0J1xuXG5jb25zdCBmb3JtYXRPcHRpb25zID0gKG9wdGlvbnM6IE9wdGlvbltdKTogT3B0aW9uT2JqZWN0W10gPT5cbiAgb3B0aW9ucy5tYXAoKG9wdGlvbikgPT4ge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSAnb2JqZWN0JyAmJiAob3B0aW9uLnZhbHVlIHx8IG9wdGlvbi52YWx1ZSA9PT0gJycpKSB7XG4gICAgICByZXR1cm4gb3B0aW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBvcHRpb24sXG4gICAgICB2YWx1ZTogb3B0aW9uLFxuICAgIH0gYXMgT3B0aW9uT2JqZWN0XG4gIH0pXG5cbmV4cG9ydCBjb25zdCBTZWxlY3Q6IFJlYWN0LkZDPFByb3BzPiA9ICh7XG4gIG9uQ2hhbmdlLFxuICBvcGVyYXRvcixcbiAgb3B0aW9uczogb3B0aW9uc0Zyb21Qcm9wcyxcbiAgdmFsdWUsXG59KSA9PiB7XG4gIGNvbnN0IHsgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSBSZWFjdC51c2VTdGF0ZShmb3JtYXRPcHRpb25zKG9wdGlvbnNGcm9tUHJvcHMpKVxuXG4gIGNvbnN0IGlzTXVsdGkgPSBbJ2luJywgJ25vdF9pbiddLmluY2x1ZGVzKG9wZXJhdG9yKVxuICBsZXQgdmFsdWVUb1JlbmRlclxuXG4gIGlmIChpc011bHRpICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFsdWVUb1JlbmRlciA9IHZhbHVlLm1hcCgodmFsKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaGluZ09wdGlvbiA9IG9wdGlvbnMuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT09IHZhbClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsOiBtYXRjaGluZ09wdGlvbiA/IGdldFRyYW5zbGF0aW9uKG1hdGNoaW5nT3B0aW9uLmxhYmVsLCBpMThuKSA6IHZhbCxcbiAgICAgICAgdmFsdWU6IG1hdGNoaW5nT3B0aW9uPy52YWx1ZSA/PyB2YWwsXG4gICAgICB9XG4gICAgfSlcbiAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgIGNvbnN0IG1hdGNoaW5nT3B0aW9uID0gb3B0aW9ucy5maW5kKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUpXG4gICAgdmFsdWVUb1JlbmRlciA9IHtcbiAgICAgIGxhYmVsOiBtYXRjaGluZ09wdGlvbiA/IGdldFRyYW5zbGF0aW9uKG1hdGNoaW5nT3B0aW9uLmxhYmVsLCBpMThuKSA6IHZhbHVlLFxuICAgICAgdmFsdWU6IG1hdGNoaW5nT3B0aW9uPy52YWx1ZSA/PyB2YWx1ZSxcbiAgICB9XG4gIH1cblxuICBjb25zdCBvblNlbGVjdCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgICAgbGV0IG5ld1ZhbHVlXG4gICAgICBpZiAoIXNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gbnVsbFxuICAgICAgfSBlbHNlIGlmIChpc011bHRpKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc2VsZWN0ZWRPcHRpb24ubWFwKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IFtdXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc2VsZWN0ZWRPcHRpb24udmFsdWVcbiAgICAgIH1cblxuICAgICAgb25DaGFuZ2UobmV3VmFsdWUpXG4gICAgfSxcbiAgICBbaXNNdWx0aSwgb25DaGFuZ2VdLFxuICApXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRPcHRpb25zKGZvcm1hdE9wdGlvbnMob3B0aW9uc0Zyb21Qcm9wcykpXG4gIH0sIFtvcHRpb25zRnJvbVByb3BzXSlcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNNdWx0aSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgb25DaGFuZ2UodmFsdWVbMF0pXG4gICAgfVxuICB9LCBbaXNNdWx0aSwgb25DaGFuZ2UsIHZhbHVlXSlcblxuICByZXR1cm4gKFxuICAgIDxSZWFjdFNlbGVjdFxuICAgICAgaXNNdWx0aT17aXNNdWx0aX1cbiAgICAgIG9uQ2hhbmdlPXtvblNlbGVjdH1cbiAgICAgIG9wdGlvbnM9e29wdGlvbnMubWFwKChvcHRpb24pID0+ICh7IC4uLm9wdGlvbiwgbGFiZWw6IGdldFRyYW5zbGF0aW9uKG9wdGlvbi5sYWJlbCwgaTE4bikgfSkpfVxuICAgICAgdmFsdWU9e3ZhbHVlVG9SZW5kZXJ9XG4gICAgLz5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlNlbGVjdCIsImZvcm1hdE9wdGlvbnMiLCJvcHRpb25zIiwibWFwIiwib3B0aW9uIiwidmFsdWUiLCJsYWJlbCIsIm9uQ2hhbmdlIiwib3BlcmF0b3IiLCJvcHRpb25zRnJvbVByb3BzIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwic2V0T3B0aW9ucyIsIlJlYWN0IiwidXNlU3RhdGUiLCJpc011bHRpIiwiaW5jbHVkZXMiLCJ2YWx1ZVRvUmVuZGVyIiwiQXJyYXkiLCJpc0FycmF5IiwidmFsIiwibWF0Y2hpbmdPcHRpb24iLCJmaW5kIiwiZ2V0VHJhbnNsYXRpb24iLCJvblNlbGVjdCIsInVzZUNhbGxiYWNrIiwic2VsZWN0ZWRPcHRpb24iLCJuZXdWYWx1ZSIsInVzZUVmZmVjdCIsIlJlYWN0U2VsZWN0Il0sIm1hcHBpbmdzIjoiOzs7OytCQXFCYUE7OztlQUFBQTs7OzhEQXJCSzs4QkFDYTtnQ0FLQTtvRUFDUDs7Ozs7O0FBRXhCLE1BQU1DLGdCQUFnQixDQUFDQyxVQUNyQkEsUUFBUUMsR0FBRyxDQUFDLENBQUNDO1FBQ1gsSUFBSSxPQUFPQSxXQUFXLFlBQWFBLENBQUFBLE9BQU9DLEtBQUssSUFBSUQsT0FBT0MsS0FBSyxLQUFLLEVBQUMsR0FBSTtZQUN2RSxPQUFPRDtRQUNUO1FBRUEsT0FBTztZQUNMRSxPQUFPRjtZQUNQQyxPQUFPRDtRQUNUO0lBQ0Y7QUFFSyxNQUFNSixTQUEwQixDQUFDLEVBQ3RDTyxRQUFRLEVBQ1JDLFFBQVEsRUFDUk4sU0FBU08sZ0JBQWdCLEVBQ3pCSixLQUFLLEVBQ047SUFDQyxNQUFNLEVBQUVLLElBQUksRUFBRSxHQUFHQyxJQUFBQSw0QkFBYztJQUMvQixNQUFNLENBQUNULFNBQVNVLFdBQVcsR0FBR0MsY0FBSyxDQUFDQyxRQUFRLENBQUNiLGNBQWNRO0lBRTNELE1BQU1NLFVBQVU7UUFBQztRQUFNO0tBQVMsQ0FBQ0MsUUFBUSxDQUFDUjtJQUMxQyxJQUFJUztJQUVKLElBQUlGLFdBQVdHLE1BQU1DLE9BQU8sQ0FBQ2QsUUFBUTtRQUNuQ1ksZ0JBQWdCWixNQUFNRixHQUFHLENBQUMsQ0FBQ2lCO1lBQ3pCLE1BQU1DLGlCQUFpQm5CLFFBQVFvQixJQUFJLENBQUMsQ0FBQ2xCLFNBQVdBLE9BQU9DLEtBQUssS0FBS2U7WUFDakUsT0FBTztnQkFDTGQsT0FBT2UsaUJBQWlCRSxJQUFBQSw4QkFBYyxFQUFDRixlQUFlZixLQUFLLEVBQUVJLFFBQVFVO2dCQUNyRWYsT0FBT2dCLGdCQUFnQmhCLFNBQVNlO1lBQ2xDO1FBQ0Y7SUFDRixPQUFPLElBQUlmLE9BQU87UUFDaEIsTUFBTWdCLGlCQUFpQm5CLFFBQVFvQixJQUFJLENBQUMsQ0FBQ2xCLFNBQVdBLE9BQU9DLEtBQUssS0FBS0E7UUFDakVZLGdCQUFnQjtZQUNkWCxPQUFPZSxpQkFBaUJFLElBQUFBLDhCQUFjLEVBQUNGLGVBQWVmLEtBQUssRUFBRUksUUFBUUw7WUFDckVBLE9BQU9nQixnQkFBZ0JoQixTQUFTQTtRQUNsQztJQUNGO0lBRUEsTUFBTW1CLFdBQVdYLGNBQUssQ0FBQ1ksV0FBVyxDQUNoQyxDQUFDQztRQUNDLElBQUlDO1FBQ0osSUFBSSxDQUFDRCxnQkFBZ0I7WUFDbkJDLFdBQVc7UUFDYixPQUFPLElBQUlaLFNBQVM7WUFDbEIsSUFBSUcsTUFBTUMsT0FBTyxDQUFDTyxpQkFBaUI7Z0JBQ2pDQyxXQUFXRCxlQUFldkIsR0FBRyxDQUFDLENBQUNDLFNBQVdBLE9BQU9DLEtBQUs7WUFDeEQsT0FBTztnQkFDTHNCLFdBQVcsRUFBRTtZQUNmO1FBQ0YsT0FBTztZQUNMQSxXQUFXRCxlQUFlckIsS0FBSztRQUNqQztRQUVBRSxTQUFTb0I7SUFDWCxHQUNBO1FBQUNaO1FBQVNSO0tBQVM7SUFHckJNLGNBQUssQ0FBQ2UsU0FBUyxDQUFDO1FBQ2RoQixXQUFXWCxjQUFjUTtJQUMzQixHQUFHO1FBQUNBO0tBQWlCO0lBRXJCSSxjQUFLLENBQUNlLFNBQVMsQ0FBQztRQUNkLElBQUksQ0FBQ2IsV0FBV0csTUFBTUMsT0FBTyxDQUFDZCxRQUFRO1lBQ3BDRSxTQUFTRixLQUFLLENBQUMsRUFBRTtRQUNuQjtJQUNGLEdBQUc7UUFBQ1U7UUFBU1I7UUFBVUY7S0FBTTtJQUU3QixxQkFDRSw2QkFBQ3dCLG9CQUFXO1FBQ1ZkLFNBQVNBO1FBQ1RSLFVBQVVpQjtRQUNWdEIsU0FBU0EsUUFBUUMsR0FBRyxDQUFDLENBQUNDLFNBQVksQ0FBQTtnQkFBRSxHQUFHQSxNQUFNO2dCQUFFRSxPQUFPaUIsSUFBQUEsOEJBQWMsRUFBQ25CLE9BQU9FLEtBQUssRUFBRUk7WUFBTSxDQUFBO1FBQ3pGTCxPQUFPWTs7QUFHYiJ9