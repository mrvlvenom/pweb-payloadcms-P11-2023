"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _locale = /*#__PURE__*/ _interop_require_wildcard(require("date-fns/locale"));
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reactdatepicker = /*#__PURE__*/ _interop_require_wildcard(require("react-datepicker"));
require("react-datepicker/dist/react-datepicker.css");
const _reacti18next = require("react-i18next");
const _getSupportedDateLocale = require("../../../utilities/formatDate/getSupportedDateLocale");
const _Calendar = /*#__PURE__*/ _interop_require_default(require("../../icons/Calendar"));
const _X = /*#__PURE__*/ _interop_require_default(require("../../icons/X"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'date-time-picker';
const DateTime = (props)=>{
    const { displayFormat: customDisplayFormat, maxDate, maxTime, minDate, minTime, monthsToShow = 1, onChange: onChangeFromProps, pickerAppearance = 'default', placeholder: placeholderText, readOnly, timeFormat = 'h:mm aa', timeIntervals = 30, value } = props;
    // Use the user's AdminUI language preference for the locale
    const { i18n } = (0, _reacti18next.useTranslation)();
    const locale = (0, _getSupportedDateLocale.getSupportedDateLocale)(i18n.language);
    try {
        (0, _reactdatepicker.registerLocale)(locale, _locale[locale]);
    } catch (e) {
        console.warn(`Could not find DatePicker locale for ${locale}`);
    }
    let dateFormat = customDisplayFormat;
    if (!customDisplayFormat) {
        // when no displayFormat is provided, determine format based on the picker appearance
        if (pickerAppearance === 'default') dateFormat = 'MM/dd/yyyy';
        else if (pickerAppearance === 'dayAndTime') dateFormat = 'MMM d, yyy h:mm a';
        else if (pickerAppearance === 'timeOnly') dateFormat = 'h:mm a';
        else if (pickerAppearance === 'dayOnly') dateFormat = 'MMM dd';
        else if (pickerAppearance === 'monthOnly') dateFormat = 'MMMM';
    }
    const onChange = (incomingDate)=>{
        const newDate = incomingDate;
        if (newDate instanceof Date && [
            'dayOnly',
            'default',
            'monthOnly'
        ].includes(pickerAppearance)) {
            const tzOffset = incomingDate.getTimezoneOffset() / 60;
            newDate.setHours(12 - tzOffset, 0);
        }
        if (typeof onChangeFromProps === 'function') onChangeFromProps(newDate);
    };
    const dateTimePickerProps = {
        customInputRef: 'ref',
        dateFormat,
        disabled: readOnly,
        maxDate,
        maxTime,
        minDate,
        minTime,
        monthsShown: Math.min(2, monthsToShow),
        onChange,
        placeholderText,
        selected: value && new Date(value),
        showMonthYearPicker: pickerAppearance === 'monthOnly',
        showPopperArrow: false,
        showTimeSelect: pickerAppearance === 'dayAndTime' || pickerAppearance === 'timeOnly',
        timeFormat,
        timeIntervals
    };
    const classes = [
        baseClass,
        `${baseClass}__appearance--${pickerAppearance}`
    ].filter(Boolean).join(' ');
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: classes
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__icon-wrap`
    }, dateTimePickerProps.selected && /*#__PURE__*/ _react.default.createElement("button", {
        className: `${baseClass}__clear-button`,
        onClick: ()=>onChange(null),
        type: "button"
    }, /*#__PURE__*/ _react.default.createElement(_X.default, null)), /*#__PURE__*/ _react.default.createElement(_Calendar.default, null)), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__input-wrapper`
    }, /*#__PURE__*/ _react.default.createElement(_reactdatepicker.default, {
        ...dateTimePickerProps,
        dropdownMode: "select",
        locale: locale,
        popperModifiers: [
            {
                name: 'preventOverflow',
                enabled: true
            }
        ],
        showMonthDropdown: true,
        showYearDropdown: true
    })));
};
const _default = DateTime;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2VsZW1lbnRzL0RhdGVQaWNrZXIvRGF0ZVBpY2tlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgTG9jYWxlcyBmcm9tICdkYXRlLWZucy9sb2NhbGUnXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgRGF0ZVBpY2tlciwgeyByZWdpc3RlckxvY2FsZSB9IGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInXG5pbXBvcnQgJ3JlYWN0LWRhdGVwaWNrZXIvZGlzdC9yZWFjdC1kYXRlcGlja2VyLmNzcydcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGdldFN1cHBvcnRlZERhdGVMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvZm9ybWF0RGF0ZS9nZXRTdXBwb3J0ZWREYXRlTG9jYWxlJ1xuaW1wb3J0IENhbGVuZGFySWNvbiBmcm9tICcuLi8uLi9pY29ucy9DYWxlbmRhcidcbmltcG9ydCBYSWNvbiBmcm9tICcuLi8uLi9pY29ucy9YJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbmNvbnN0IGJhc2VDbGFzcyA9ICdkYXRlLXRpbWUtcGlja2VyJ1xuXG5jb25zdCBEYXRlVGltZTogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNwbGF5Rm9ybWF0OiBjdXN0b21EaXNwbGF5Rm9ybWF0LFxuICAgIG1heERhdGUsXG4gICAgbWF4VGltZSxcbiAgICBtaW5EYXRlLFxuICAgIG1pblRpbWUsXG4gICAgbW9udGhzVG9TaG93ID0gMSxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2VGcm9tUHJvcHMsXG4gICAgcGlja2VyQXBwZWFyYW5jZSA9ICdkZWZhdWx0JyxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXJUZXh0LFxuICAgIHJlYWRPbmx5LFxuICAgIHRpbWVGb3JtYXQgPSAnaDptbSBhYScsXG4gICAgdGltZUludGVydmFscyA9IDMwLFxuICAgIHZhbHVlLFxuICB9ID0gcHJvcHNcblxuICAvLyBVc2UgdGhlIHVzZXIncyBBZG1pblVJIGxhbmd1YWdlIHByZWZlcmVuY2UgZm9yIHRoZSBsb2NhbGVcbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG4gIGNvbnN0IGxvY2FsZSA9IGdldFN1cHBvcnRlZERhdGVMb2NhbGUoaTE4bi5sYW5ndWFnZSlcblxuICB0cnkge1xuICAgIHJlZ2lzdGVyTG9jYWxlKGxvY2FsZSwgTG9jYWxlc1tsb2NhbGVdKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS53YXJuKGBDb3VsZCBub3QgZmluZCBEYXRlUGlja2VyIGxvY2FsZSBmb3IgJHtsb2NhbGV9YClcbiAgfVxuXG4gIGxldCBkYXRlRm9ybWF0ID0gY3VzdG9tRGlzcGxheUZvcm1hdFxuXG4gIGlmICghY3VzdG9tRGlzcGxheUZvcm1hdCkge1xuICAgIC8vIHdoZW4gbm8gZGlzcGxheUZvcm1hdCBpcyBwcm92aWRlZCwgZGV0ZXJtaW5lIGZvcm1hdCBiYXNlZCBvbiB0aGUgcGlja2VyIGFwcGVhcmFuY2VcbiAgICBpZiAocGlja2VyQXBwZWFyYW5jZSA9PT0gJ2RlZmF1bHQnKSBkYXRlRm9ybWF0ID0gJ01NL2RkL3l5eXknXG4gICAgZWxzZSBpZiAocGlja2VyQXBwZWFyYW5jZSA9PT0gJ2RheUFuZFRpbWUnKSBkYXRlRm9ybWF0ID0gJ01NTSBkLCB5eXkgaDptbSBhJ1xuICAgIGVsc2UgaWYgKHBpY2tlckFwcGVhcmFuY2UgPT09ICd0aW1lT25seScpIGRhdGVGb3JtYXQgPSAnaDptbSBhJ1xuICAgIGVsc2UgaWYgKHBpY2tlckFwcGVhcmFuY2UgPT09ICdkYXlPbmx5JykgZGF0ZUZvcm1hdCA9ICdNTU0gZGQnXG4gICAgZWxzZSBpZiAocGlja2VyQXBwZWFyYW5jZSA9PT0gJ21vbnRoT25seScpIGRhdGVGb3JtYXQgPSAnTU1NTSdcbiAgfVxuXG4gIGNvbnN0IG9uQ2hhbmdlID0gKGluY29taW5nRGF0ZTogRGF0ZSkgPT4ge1xuICAgIGNvbnN0IG5ld0RhdGUgPSBpbmNvbWluZ0RhdGVcbiAgICBpZiAobmV3RGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgWydkYXlPbmx5JywgJ2RlZmF1bHQnLCAnbW9udGhPbmx5J10uaW5jbHVkZXMocGlja2VyQXBwZWFyYW5jZSkpIHtcbiAgICAgIGNvbnN0IHR6T2Zmc2V0ID0gaW5jb21pbmdEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLyA2MFxuICAgICAgbmV3RGF0ZS5zZXRIb3VycygxMiAtIHR6T2Zmc2V0LCAwKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9uQ2hhbmdlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSBvbkNoYW5nZUZyb21Qcm9wcyhuZXdEYXRlKVxuICB9XG5cbiAgY29uc3QgZGF0ZVRpbWVQaWNrZXJQcm9wcyA9IHtcbiAgICBjdXN0b21JbnB1dFJlZjogJ3JlZicsXG4gICAgZGF0ZUZvcm1hdCxcbiAgICBkaXNhYmxlZDogcmVhZE9ubHksXG4gICAgbWF4RGF0ZSxcbiAgICBtYXhUaW1lLFxuICAgIG1pbkRhdGUsXG4gICAgbWluVGltZSxcbiAgICBtb250aHNTaG93bjogTWF0aC5taW4oMiwgbW9udGhzVG9TaG93KSxcbiAgICBvbkNoYW5nZSxcbiAgICBwbGFjZWhvbGRlclRleHQsXG4gICAgc2VsZWN0ZWQ6IHZhbHVlICYmIG5ldyBEYXRlKHZhbHVlKSxcbiAgICBzaG93TW9udGhZZWFyUGlja2VyOiBwaWNrZXJBcHBlYXJhbmNlID09PSAnbW9udGhPbmx5JyxcbiAgICBzaG93UG9wcGVyQXJyb3c6IGZhbHNlLFxuICAgIHNob3dUaW1lU2VsZWN0OiBwaWNrZXJBcHBlYXJhbmNlID09PSAnZGF5QW5kVGltZScgfHwgcGlja2VyQXBwZWFyYW5jZSA9PT0gJ3RpbWVPbmx5JyxcbiAgICB0aW1lRm9ybWF0LFxuICAgIHRpbWVJbnRlcnZhbHMsXG4gIH1cblxuICBjb25zdCBjbGFzc2VzID0gW2Jhc2VDbGFzcywgYCR7YmFzZUNsYXNzfV9fYXBwZWFyYW5jZS0tJHtwaWNrZXJBcHBlYXJhbmNlfWBdXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5qb2luKCcgJylcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19pY29uLXdyYXBgfT5cbiAgICAgICAge2RhdGVUaW1lUGlja2VyUHJvcHMuc2VsZWN0ZWQgJiYgKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fY2xlYXItYnV0dG9uYH1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlKG51bGwpfVxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFhJY29uIC8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICl9XG4gICAgICAgIDxDYWxlbmRhckljb24gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2lucHV0LXdyYXBwZXJgfT5cbiAgICAgICAgPERhdGVQaWNrZXJcbiAgICAgICAgICB7Li4uZGF0ZVRpbWVQaWNrZXJQcm9wc31cbiAgICAgICAgICBkcm9wZG93bk1vZGU9XCJzZWxlY3RcIlxuICAgICAgICAgIGxvY2FsZT17bG9jYWxlfVxuICAgICAgICAgIHBvcHBlck1vZGlmaWVycz17W1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBzaG93TW9udGhEcm9wZG93blxuICAgICAgICAgIHNob3dZZWFyRHJvcGRvd25cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVUaW1lXG4iXSwibmFtZXMiOlsiYmFzZUNsYXNzIiwiRGF0ZVRpbWUiLCJwcm9wcyIsImRpc3BsYXlGb3JtYXQiLCJjdXN0b21EaXNwbGF5Rm9ybWF0IiwibWF4RGF0ZSIsIm1heFRpbWUiLCJtaW5EYXRlIiwibWluVGltZSIsIm1vbnRoc1RvU2hvdyIsIm9uQ2hhbmdlIiwib25DaGFuZ2VGcm9tUHJvcHMiLCJwaWNrZXJBcHBlYXJhbmNlIiwicGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlclRleHQiLCJyZWFkT25seSIsInRpbWVGb3JtYXQiLCJ0aW1lSW50ZXJ2YWxzIiwidmFsdWUiLCJpMThuIiwidXNlVHJhbnNsYXRpb24iLCJsb2NhbGUiLCJnZXRTdXBwb3J0ZWREYXRlTG9jYWxlIiwibGFuZ3VhZ2UiLCJyZWdpc3RlckxvY2FsZSIsIkxvY2FsZXMiLCJlIiwiY29uc29sZSIsIndhcm4iLCJkYXRlRm9ybWF0IiwiaW5jb21pbmdEYXRlIiwibmV3RGF0ZSIsIkRhdGUiLCJpbmNsdWRlcyIsInR6T2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXRIb3VycyIsImRhdGVUaW1lUGlja2VyUHJvcHMiLCJjdXN0b21JbnB1dFJlZiIsImRpc2FibGVkIiwibW9udGhzU2hvd24iLCJNYXRoIiwibWluIiwic2VsZWN0ZWQiLCJzaG93TW9udGhZZWFyUGlja2VyIiwic2hvd1BvcHBlckFycm93Iiwic2hvd1RpbWVTZWxlY3QiLCJjbGFzc2VzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJkaXYiLCJjbGFzc05hbWUiLCJidXR0b24iLCJvbkNsaWNrIiwidHlwZSIsIlhJY29uIiwiQ2FsZW5kYXJJY29uIiwiRGF0ZVBpY2tlciIsImRyb3Bkb3duTW9kZSIsInBvcHBlck1vZGlmaWVycyIsIm5hbWUiLCJlbmFibGVkIiwic2hvd01vbnRoRHJvcGRv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