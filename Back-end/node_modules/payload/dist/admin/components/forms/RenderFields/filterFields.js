"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "filterFields", {
    enumerable: true,
    get: function() {
        return filterFields;
    }
});
const _types = require("../../../../exports/types");
const filterFields = (args)=>{
    const { fieldSchema, fieldTypes, filter, operation, permissions, readOnly: readOnlyOverride } = args;
    return fieldSchema.reduce((acc, field)=>{
        const fieldIsPresentational = (0, _types.fieldIsPresentationalOnly)(field);
        let FieldComponent = fieldTypes[field.type];
        if (fieldIsPresentational || !field?.hidden && field?.admin?.disabled !== true) {
            if (filter && typeof filter === 'function' && filter(field) || !filter) {
                if (field.admin && 'hidden' in field.admin && field?.admin?.hidden) {
                    FieldComponent = fieldTypes.hidden;
                }
                const isFieldAffectingData = (0, _types.fieldAffectsData)(field);
                const fieldPermissions = isFieldAffectingData ? permissions?.[field.name] : permissions;
                let readOnly = field.admin && 'readOnly' in field.admin ? field.admin.readOnly : undefined;
                if (readOnlyOverride && readOnly !== false) readOnly = true;
                if (isFieldAffectingData && permissions?.[field?.name]?.read?.permission !== false || !isFieldAffectingData) {
                    if (isFieldAffectingData && permissions?.[field?.name]?.[operation]?.permission === false) {
                        readOnly = true;
                    }
                }
                if (FieldComponent) {
                    acc.push({
                        name: 'name' in field ? field.name : '',
                        FieldComponent,
                        field,
                        fieldIsPresentational,
                        fieldPermissions,
                        isFieldAffectingData,
                        readOnly
                    });
                }
            }
        }
        return acc;
    }, []);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL1JlbmRlckZpZWxkcy9maWx0ZXJGaWVsZHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IEZpZWxkUGVybWlzc2lvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9hdXRoJ1xuaW1wb3J0IHR5cGUgeyBGaWVsZCwgRmllbGRXaXRoUGF0aCB9IGZyb20gJy4uLy4uLy4uLy4uL2V4cG9ydHMvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpZWxkVHlwZXMgfSBmcm9tICcuLi9maWVsZC10eXBlcydcblxuaW1wb3J0IHsgZmllbGRBZmZlY3RzRGF0YSwgZmllbGRJc1ByZXNlbnRhdGlvbmFsT25seSB9IGZyb20gJy4uLy4uLy4uLy4uL2V4cG9ydHMvdHlwZXMnXG5cbmV4cG9ydCB0eXBlIFJlZHVjZWRGaWVsZCA9IHtcbiAgRmllbGRDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8YW55PlxuICBmaWVsZDogRmllbGRXaXRoUGF0aFxuICBmaWVsZElzUHJlc2VudGF0aW9uYWw6IGJvb2xlYW5cbiAgZmllbGRQZXJtaXNzaW9uczogRmllbGRQZXJtaXNzaW9uc1xuICBpc0ZpZWxkQWZmZWN0aW5nRGF0YTogYm9vbGVhblxuICBuYW1lOiBzdHJpbmdcbiAgcmVhZE9ubHk6IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlckZpZWxkcyA9IChhcmdzOiB7XG4gIGZpZWxkU2NoZW1hOiBGaWVsZFdpdGhQYXRoW11cbiAgZmllbGRUeXBlczogRmllbGRUeXBlc1xuICBmaWx0ZXI6IChmaWVsZDogRmllbGQpID0+IGJvb2xlYW5cbiAgb3BlcmF0aW9uPzogJ2NyZWF0ZScgfCAndXBkYXRlJ1xuICBwZXJtaXNzaW9ucz86XG4gICAgfCB7XG4gICAgICAgIFtmaWVsZDogc3RyaW5nXTogRmllbGRQZXJtaXNzaW9uc1xuICAgICAgfVxuICAgIHwgRmllbGRQZXJtaXNzaW9uc1xuICByZWFkT25seT86IGJvb2xlYW5cbn0pOiBSZWR1Y2VkRmllbGRbXSA9PiB7XG4gIGNvbnN0IHtcbiAgICBmaWVsZFNjaGVtYSxcbiAgICBmaWVsZFR5cGVzLFxuICAgIGZpbHRlcixcbiAgICBvcGVyYXRpb24sXG4gICAgcGVybWlzc2lvbnMsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5T3ZlcnJpZGUsXG4gIH0gPSBhcmdzXG5cbiAgcmV0dXJuIGZpZWxkU2NoZW1hLnJlZHVjZSgoYWNjLCBmaWVsZCk6IFJlZHVjZWRGaWVsZFtdID0+IHtcbiAgICBjb25zdCBmaWVsZElzUHJlc2VudGF0aW9uYWwgPSBmaWVsZElzUHJlc2VudGF0aW9uYWxPbmx5KGZpZWxkKVxuICAgIGxldCBGaWVsZENvbXBvbmVudCA9IGZpZWxkVHlwZXNbZmllbGQudHlwZV1cblxuICAgIGlmIChmaWVsZElzUHJlc2VudGF0aW9uYWwgfHwgKCFmaWVsZD8uaGlkZGVuICYmIGZpZWxkPy5hZG1pbj8uZGlzYWJsZWQgIT09IHRydWUpKSB7XG4gICAgICBpZiAoKGZpbHRlciAmJiB0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nICYmIGZpbHRlcihmaWVsZCkpIHx8ICFmaWx0ZXIpIHtcbiAgICAgICAgaWYgKGZpZWxkLmFkbWluICYmICdoaWRkZW4nIGluIGZpZWxkLmFkbWluICYmIGZpZWxkPy5hZG1pbj8uaGlkZGVuKSB7XG4gICAgICAgICAgRmllbGRDb21wb25lbnQgPSBmaWVsZFR5cGVzLmhpZGRlblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNGaWVsZEFmZmVjdGluZ0RhdGEgPSBmaWVsZEFmZmVjdHNEYXRhKGZpZWxkKVxuXG4gICAgICAgIGNvbnN0IGZpZWxkUGVybWlzc2lvbnMgPSBpc0ZpZWxkQWZmZWN0aW5nRGF0YSA/IHBlcm1pc3Npb25zPy5bZmllbGQubmFtZV0gOiBwZXJtaXNzaW9uc1xuXG4gICAgICAgIGxldCByZWFkT25seSA9IGZpZWxkLmFkbWluICYmICdyZWFkT25seScgaW4gZmllbGQuYWRtaW4gPyBmaWVsZC5hZG1pbi5yZWFkT25seSA6IHVuZGVmaW5lZFxuXG4gICAgICAgIGlmIChyZWFkT25seU92ZXJyaWRlICYmIHJlYWRPbmx5ICE9PSBmYWxzZSkgcmVhZE9ubHkgPSB0cnVlXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIChpc0ZpZWxkQWZmZWN0aW5nRGF0YSAmJiBwZXJtaXNzaW9ucz8uW2ZpZWxkPy5uYW1lXT8ucmVhZD8ucGVybWlzc2lvbiAhPT0gZmFsc2UpIHx8XG4gICAgICAgICAgIWlzRmllbGRBZmZlY3RpbmdEYXRhXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzRmllbGRBZmZlY3RpbmdEYXRhICYmXG4gICAgICAgICAgICBwZXJtaXNzaW9ucz8uW2ZpZWxkPy5uYW1lXT8uW29wZXJhdGlvbl0/LnBlcm1pc3Npb24gPT09IGZhbHNlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZWFkT25seSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoRmllbGRDb21wb25lbnQpIHtcbiAgICAgICAgICBhY2MucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiAnbmFtZScgaW4gZmllbGQgPyBmaWVsZC5uYW1lIDogJycsXG4gICAgICAgICAgICBGaWVsZENvbXBvbmVudCxcbiAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgZmllbGRJc1ByZXNlbnRhdGlvbmFsLFxuICAgICAgICAgICAgZmllbGRQZXJtaXNzaW9ucyxcbiAgICAgICAgICAgIGlzRmllbGRBZmZlY3RpbmdEYXRhLFxuICAgICAgICAgICAgcmVhZE9ubHksXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2NcbiAgfSwgW10pXG59XG4iXSwibmFtZXMiOlsiZmlsdGVyRmllbGRzIiwiYXJncyIsImZpZWxkU2NoZW1hIiwiZmllbGRUeXBlcyIsImZpbHRlciIsIm9wZXJhdGlvbiIsInBlcm1pc3Npb25zIiwicmVhZE9ubHkiLCJyZWFkT25seU92ZXJyaWRlIiwicmVkdWNlIiwiYWNjIiwiZmllbGQiLCJmaWVsZElzUHJlc2VudGF0aW9uYWwiLCJmaWVsZElzUHJlc2VudGF0aW9uYWxPbmx5IiwiRmllbGRDb21wb25lbnQiLCJ0eXBlIiwiaGlkZGVuIiwiYWRtaW4iLCJkaXNhYmxlZCIsImlzRmllbGRBZmZlY3RpbmdEYXRhIiwiZmllbGRBZmZlY3RzRGF0YSIsImZpZWxkUGVybWlzc2lvbnMiLCJuYW1lIiwidW5kZWZpbmVkIiwicmVhZCIsInBlcm1pc3Npb24iLCJwdXNoIl0sIm1hcHBpbmdzIjoiOzs7OytCQWtCYUE7OztlQUFBQTs7O3VCQVorQztBQVlyRCxNQUFNQSxlQUFlLENBQUNDO0lBWTNCLE1BQU0sRUFDSkMsV0FBVyxFQUNYQyxVQUFVLEVBQ1ZDLE1BQU0sRUFDTkMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLFVBQVVDLGdCQUFnQixFQUMzQixHQUFHUDtJQUVKLE9BQU9DLFlBQVlPLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUM5QixNQUFNQyx3QkFBd0JDLElBQUFBLGdDQUF5QixFQUFDRjtRQUN4RCxJQUFJRyxpQkFBaUJYLFVBQVUsQ0FBQ1EsTUFBTUksSUFBSSxDQUFDO1FBRTNDLElBQUlILHlCQUEwQixDQUFDRCxPQUFPSyxVQUFVTCxPQUFPTSxPQUFPQyxhQUFhLE1BQU87WUFDaEYsSUFBSSxBQUFDZCxVQUFVLE9BQU9BLFdBQVcsY0FBY0EsT0FBT08sVUFBVyxDQUFDUCxRQUFRO2dCQUN4RSxJQUFJTyxNQUFNTSxLQUFLLElBQUksWUFBWU4sTUFBTU0sS0FBSyxJQUFJTixPQUFPTSxPQUFPRCxRQUFRO29CQUNsRUYsaUJBQWlCWCxXQUFXYSxNQUFNO2dCQUNwQztnQkFFQSxNQUFNRyx1QkFBdUJDLElBQUFBLHVCQUFnQixFQUFDVDtnQkFFOUMsTUFBTVUsbUJBQW1CRix1QkFBdUJiLGFBQWEsQ0FBQ0ssTUFBTVcsSUFBSSxDQUFDLEdBQUdoQjtnQkFFNUUsSUFBSUMsV0FBV0ksTUFBTU0sS0FBSyxJQUFJLGNBQWNOLE1BQU1NLEtBQUssR0FBR04sTUFBTU0sS0FBSyxDQUFDVixRQUFRLEdBQUdnQjtnQkFFakYsSUFBSWYsb0JBQW9CRCxhQUFhLE9BQU9BLFdBQVc7Z0JBRXZELElBQ0UsQUFBQ1ksd0JBQXdCYixhQUFhLENBQUNLLE9BQU9XLEtBQUssRUFBRUUsTUFBTUMsZUFBZSxTQUMxRSxDQUFDTixzQkFDRDtvQkFDQSxJQUNFQSx3QkFDQWIsYUFBYSxDQUFDSyxPQUFPVyxLQUFLLEVBQUUsQ0FBQ2pCLFVBQVUsRUFBRW9CLGVBQWUsT0FDeEQ7d0JBQ0FsQixXQUFXO29CQUNiO2dCQUNGO2dCQUVBLElBQUlPLGdCQUFnQjtvQkFDbEJKLElBQUlnQixJQUFJLENBQUM7d0JBQ1BKLE1BQU0sVUFBVVgsUUFBUUEsTUFBTVcsSUFBSSxHQUFHO3dCQUNyQ1I7d0JBQ0FIO3dCQUNBQzt3QkFDQVM7d0JBQ0FGO3dCQUNBWjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7UUFFQSxPQUFPRztJQUNULEdBQUcsRUFBRTtBQUNQIn0=