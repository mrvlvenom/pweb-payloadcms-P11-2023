"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "DateTimeInput", {
    enumerable: true,
    get: function() {
        return DateTimeInput;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _DatePicker = /*#__PURE__*/ _interop_require_default(require("../../../elements/DatePicker"));
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'date-time-field';
const DateTimeInput = (props)=>{
    const { className, datePickerProps, description, errorMessage, label, onChange, path, placeholder, readOnly, required, showError, style, value, width } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            showError && `${baseClass}--has-error`,
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    })), /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: path,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__input-wrapper`,
        id: `field-${path.replace(/\./g, '__')}`
    }, /*#__PURE__*/ _react.default.createElement(_DatePicker.default, {
        ...datePickerProps,
        onChange: onChange,
        placeholder: (0, _getTranslation.getTranslation)(placeholder, i18n),
        readOnly: readOnly,
        value: value
    })), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: value
    }));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL0RhdGVUaW1lL0lucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgRGF0ZUZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZXhwb3J0cy90eXBlcydcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4uLy4uLy4uL2VsZW1lbnRzL0RhdGVQaWNrZXInXG5pbXBvcnQgRXJyb3IgZnJvbSAnLi4vLi4vRXJyb3InXG5pbXBvcnQgRmllbGREZXNjcmlwdGlvbiBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uJ1xuaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL0xhYmVsJ1xuaW1wb3J0IHsgZmllbGRCYXNlQ2xhc3MgfSBmcm9tICcuLi9zaGFyZWQnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2RhdGUtdGltZS1maWVsZCdcblxuZXhwb3J0IHR5cGUgRGF0ZVRpbWVJbnB1dFByb3BzID0gT21pdDxEYXRlRmllbGQsICdhZG1pbicgfCAnbmFtZScgfCAndHlwZSc+ICYge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgZGF0ZVBpY2tlclByb3BzPzogRGF0ZUZpZWxkWydhZG1pbiddWydkYXRlJ11cbiAgZGVzY3JpcHRpb24/OiBEZXNjcmlwdGlvblxuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmdcbiAgb25DaGFuZ2U/OiAoZTogRGF0ZSkgPT4gdm9pZFxuICBwYXRoOiBzdHJpbmdcbiAgcGxhY2Vob2xkZXI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgc3RyaW5nXG4gIHJlYWRPbmx5PzogYm9vbGVhblxuICByZXF1aXJlZD86IGJvb2xlYW5cbiAgc2hvd0Vycm9yPzogYm9vbGVhblxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgdmFsdWU/OiBEYXRlXG4gIHdpZHRoPzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBEYXRlVGltZUlucHV0OiBSZWFjdC5GQzxEYXRlVGltZUlucHV0UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgZGF0ZVBpY2tlclByb3BzLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIGVycm9yTWVzc2FnZSxcbiAgICBsYWJlbCxcbiAgICBvbkNoYW5nZSxcbiAgICBwYXRoLFxuICAgIHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5LFxuICAgIHJlcXVpcmVkLFxuICAgIHNob3dFcnJvcixcbiAgICBzdHlsZSxcbiAgICB2YWx1ZSxcbiAgICB3aWR0aCxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgZmllbGRCYXNlQ2xhc3MsXG4gICAgICAgIGJhc2VDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzaG93RXJyb3IgJiYgYCR7YmFzZUNsYXNzfS0taGFzLWVycm9yYCxcbiAgICAgICAgcmVhZE9ubHkgJiYgJ3JlYWQtb25seScsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2Vycm9yLXdyYXBgfT5cbiAgICAgICAgPEVycm9yIG1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gc2hvd0Vycm9yPXtzaG93RXJyb3J9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxMYWJlbCBodG1sRm9yPXtwYXRofSBsYWJlbD17bGFiZWx9IHJlcXVpcmVkPXtyZXF1aXJlZH0gLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19pbnB1dC13cmFwcGVyYH0gaWQ9e2BmaWVsZC0ke3BhdGgucmVwbGFjZSgvXFwuL2csICdfXycpfWB9PlxuICAgICAgICA8RGF0ZVBpY2tlclxuICAgICAgICAgIHsuLi5kYXRlUGlja2VyUHJvcHN9XG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtnZXRUcmFuc2xhdGlvbihwbGFjZWhvbGRlciwgaTE4bil9XG4gICAgICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5fVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPEZpZWxkRGVzY3JpcHRpb24gZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufSB2YWx1ZT17dmFsdWV9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cbiJdLCJuYW1lcyI6WyJEYXRlVGltZUlucHV0IiwiYmFzZUNsYXNzIiwicHJvcHMiLCJjbGFzc05hbWUiLCJkYXRlUGlja2VyUHJvcHMiLCJkZXNjcmlwdGlvbiIsImVycm9yTWVzc2FnZSIsImxhYmVsIiwib25DaGFuZ2UiLCJwYXRoIiwicGxhY2Vob2xkZXIiLCJyZWFkT25seSIsInJlcXVpcmVkIiwic2hvd0Vycm9yIiwic3R5bGUiLCJ2YWx1ZSIsIndpZHRoIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwiZGl2IiwiZmllbGRCYXNlQ2xhc3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkVycm9yIiwibWVzc2FnZSIsIkxhYmVsIiwiaHRtbEZvciIsImlkIiwicmVwbGFjZSIsIkRhdGVQaWNrZXIiLCJnZXRUcmFuc2xhdGlvbiIsIkZpZWxkRGVzY3JpcHRpb24iXSwibWFwcGluZ3MiOiI7Ozs7K0JBZ0NhQTs7O2VBQUFBOzs7OERBaENLOzhCQUNhO2dDQUtBO21FQUNSOzhEQUNMO3lFQUNXOzhEQUNYO3dCQUNhO1FBQ3hCOzs7Ozs7QUFFUCxNQUFNQyxZQUFZO0FBa0JYLE1BQU1ELGdCQUE4QyxDQUFDRTtJQUMxRCxNQUFNLEVBQ0pDLFNBQVMsRUFDVEMsZUFBZSxFQUNmQyxXQUFXLEVBQ1hDLFlBQVksRUFDWkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLElBQUksRUFDSkMsV0FBVyxFQUNYQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLEtBQUssRUFDTEMsS0FBSyxFQUNOLEdBQUdkO0lBRUosTUFBTSxFQUFFZSxJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWM7SUFFL0IscUJBQ0UsNkJBQUNDO1FBQ0NoQixXQUFXO1lBQ1RpQixzQkFBYztZQUNkbkI7WUFDQUU7WUFDQVUsYUFBYSxDQUFDLEVBQUVaLFVBQVUsV0FBVyxDQUFDO1lBQ3RDVSxZQUFZO1NBQ2IsQ0FDRVUsTUFBTSxDQUFDQyxTQUNQQyxJQUFJLENBQUM7UUFDUlQsT0FBTztZQUNMLEdBQUdBLEtBQUs7WUFDUkU7UUFDRjtxQkFFQSw2QkFBQ0c7UUFBSWhCLFdBQVcsQ0FBQyxFQUFFRixVQUFVLFlBQVksQ0FBQztxQkFDeEMsNkJBQUN1QixjQUFLO1FBQUNDLFNBQVNuQjtRQUFjTyxXQUFXQTt1QkFFM0MsNkJBQUNhLGNBQUs7UUFBQ0MsU0FBU2xCO1FBQU1GLE9BQU9BO1FBQU9LLFVBQVVBO3NCQUM5Qyw2QkFBQ087UUFBSWhCLFdBQVcsQ0FBQyxFQUFFRixVQUFVLGVBQWUsQ0FBQztRQUFFMkIsSUFBSSxDQUFDLE1BQU0sRUFBRW5CLEtBQUtvQixPQUFPLENBQUMsT0FBTyxNQUFNLENBQUM7cUJBQ3JGLDZCQUFDQyxtQkFBVTtRQUNSLEdBQUcxQixlQUFlO1FBQ25CSSxVQUFVQTtRQUNWRSxhQUFhcUIsSUFBQUEsOEJBQWMsRUFBQ3JCLGFBQWFPO1FBQ3pDTixVQUFVQTtRQUNWSSxPQUFPQTt1QkFHWCw2QkFBQ2lCLHlCQUFnQjtRQUFDM0IsYUFBYUE7UUFBYVUsT0FBT0E7O0FBR3pEIn0=