"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Button = /*#__PURE__*/ _interop_require_default(require("../../../elements/Button"));
const _DocumentDrawer = require("../../../elements/DocumentDrawer");
const _FileDetails = /*#__PURE__*/ _interop_require_default(require("../../../elements/FileDetails"));
const _ListDrawer = require("../../../elements/ListDrawer");
const _GetFilterOptions = require("../../../utilities/GetFilterOptions");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'upload';
const UploadInput = (props)=>{
    const { api = '/api', className, collection, description, errorMessage, filterOptions, label, onChange, path, readOnly, relationTo, required, serverURL = 'http://localhost:3000', showError, style, value, width } = props;
    const { i18n, t } = (0, _reacti18next.useTranslation)('fields');
    const [file, setFile] = (0, _react.useState)(undefined);
    const [missingFile, setMissingFile] = (0, _react.useState)(false);
    const [collectionSlugs] = (0, _react.useState)([
        collection?.slug
    ]);
    const [filterOptionsResult, setFilterOptionsResult] = (0, _react.useState)();
    const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = (0, _DocumentDrawer.useDocumentDrawer)({
        collectionSlug: collectionSlugs[0]
    });
    const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = (0, _ListDrawer.useListDrawer)({
        collectionSlugs,
        filterOptions: filterOptionsResult
    });
    (0, _react.useEffect)(()=>{
        if (typeof value !== 'undefined' && value !== '') {
            const fetchFile = async ()=>{
                const response = await fetch(`${serverURL}${api}/${relationTo}/${value}`, {
                    credentials: 'include',
                    headers: {
                        'Accept-Language': i18n.language
                    }
                });
                if (response.ok) {
                    const json = await response.json();
                    setFile(json);
                } else {
                    setMissingFile(true);
                    setFile(undefined);
                }
            };
            fetchFile();
        } else {
            setFile(undefined);
        }
    }, [
        value,
        relationTo,
        api,
        serverURL,
        i18n
    ]);
    const onSave = (0, _react.useCallback)((args)=>{
        setMissingFile(false);
        onChange(args.doc);
        closeDrawer();
    }, [
        onChange,
        closeDrawer
    ]);
    const onSelect = (0, _react.useCallback)((args)=>{
        setMissingFile(false);
        onChange({
            id: args.docID
        });
        closeListDrawer();
    }, [
        onChange,
        closeListDrawer
    ]);
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(_GetFilterOptions.GetFilterOptions, {
        filterOptions,
        filterOptionsResult,
        path,
        relationTo,
        setFilterOptionsResult
    }), /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), collection?.upload && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, file && !missingFile && /*#__PURE__*/ _react.default.createElement(_FileDetails.default, {
        collection: collection,
        doc: file,
        handleRemove: readOnly ? undefined : ()=>{
            onChange(null);
        }
    }), (!file || missingFile) && /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__buttons`
    }, /*#__PURE__*/ _react.default.createElement(DocumentDrawerToggler, {
        className: `${baseClass}__toggler`,
        disabled: readOnly
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        el: "div"
    }, t('uploadNewLabel', {
        label: (0, _getTranslation.getTranslation)(collection.labels.singular, i18n)
    }))), /*#__PURE__*/ _react.default.createElement(ListDrawerToggler, {
        className: `${baseClass}__toggler`,
        disabled: readOnly
    }, /*#__PURE__*/ _react.default.createElement(_Button.default, {
        buttonStyle: "secondary",
        disabled: readOnly,
        el: "div"
    }, t('chooseFromExisting'))))), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: file
    })), !readOnly && /*#__PURE__*/ _react.default.createElement(DocumentDrawer, {
        onSave: onSave
    }), !readOnly && /*#__PURE__*/ _react.default.createElement(ListDrawer, {
        onSelect: onSelect
    }));
};
const _default = UploadInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1VwbG9hZC9JbnB1dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnXG5cbmltcG9ydCB0eXBlIHsgRmllbGRUeXBlcyB9IGZyb20gJy4uJ1xuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29sbGVjdGlvbnMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBGaWx0ZXJPcHRpb25zLCBVcGxvYWRGaWVsZCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50RHJhd2VyUHJvcHMgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9Eb2N1bWVudERyYXdlci90eXBlcydcbmltcG9ydCB0eXBlIHsgTGlzdERyYXdlclByb3BzIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudHMvTGlzdERyYXdlci90eXBlcydcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBGaWx0ZXJPcHRpb25zUmVzdWx0IH0gZnJvbSAnLi4vUmVsYXRpb25zaGlwL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vLi4vZWxlbWVudHMvQnV0dG9uJ1xuaW1wb3J0IHsgdXNlRG9jdW1lbnREcmF3ZXIgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9Eb2N1bWVudERyYXdlcidcbmltcG9ydCBGaWxlRGV0YWlscyBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9GaWxlRGV0YWlscydcbmltcG9ydCB7IHVzZUxpc3REcmF3ZXIgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9MaXN0RHJhd2VyJ1xuaW1wb3J0IHsgR2V0RmlsdGVyT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdGllcy9HZXRGaWx0ZXJPcHRpb25zJ1xuaW1wb3J0IEVycm9yIGZyb20gJy4uLy4uL0Vycm9yJ1xuaW1wb3J0IEZpZWxkRGVzY3JpcHRpb24gZnJvbSAnLi4vLi4vRmllbGREZXNjcmlwdGlvbidcbmltcG9ydCBMYWJlbCBmcm9tICcuLi8uLi9MYWJlbCdcbmltcG9ydCB7IGZpZWxkQmFzZUNsYXNzIH0gZnJvbSAnLi4vc2hhcmVkJ1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5cbmNvbnN0IGJhc2VDbGFzcyA9ICd1cGxvYWQnXG5cbmV4cG9ydCB0eXBlIFVwbG9hZElucHV0UHJvcHMgPSBPbWl0PFVwbG9hZEZpZWxkLCAndHlwZSc+ICYge1xuICBhcGk/OiBzdHJpbmdcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIGNvbGxlY3Rpb24/OiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gIGRlc2NyaXB0aW9uPzogRGVzY3JpcHRpb25cbiAgZXJyb3JNZXNzYWdlPzogc3RyaW5nXG4gIGZpZWxkVHlwZXM/OiBGaWVsZFR5cGVzXG4gIGZpbHRlck9wdGlvbnM6IEZpbHRlck9wdGlvbnNcbiAgb25DaGFuZ2U/OiAoZSkgPT4gdm9pZFxuICBwYXRoOiBzdHJpbmdcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmdcbiAgcmVhZE9ubHk/OiBib29sZWFuXG4gIHJlcXVpcmVkPzogYm9vbGVhblxuICBzZXJ2ZXJVUkw/OiBzdHJpbmdcbiAgc2hvd0Vycm9yPzogYm9vbGVhblxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgdmFsdWU/OiBzdHJpbmdcbiAgd2lkdGg/OiBzdHJpbmdcbn1cblxuY29uc3QgVXBsb2FkSW5wdXQ6IFJlYWN0LkZDPFVwbG9hZElucHV0UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhcGkgPSAnL2FwaScsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbGxlY3Rpb24sXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIGZpbHRlck9wdGlvbnMsXG4gICAgbGFiZWwsXG4gICAgb25DaGFuZ2UsXG4gICAgcGF0aCxcbiAgICByZWFkT25seSxcbiAgICByZWxhdGlvblRvLFxuICAgIHJlcXVpcmVkLFxuICAgIHNlcnZlclVSTCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnLFxuICAgIHNob3dFcnJvcixcbiAgICBzdHlsZSxcbiAgICB2YWx1ZSxcbiAgICB3aWR0aCxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBpMThuLCB0IH0gPSB1c2VUcmFuc2xhdGlvbignZmllbGRzJylcblxuICBjb25zdCBbZmlsZSwgc2V0RmlsZV0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpXG4gIGNvbnN0IFttaXNzaW5nRmlsZSwgc2V0TWlzc2luZ0ZpbGVdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtjb2xsZWN0aW9uU2x1Z3NdID0gdXNlU3RhdGUoW2NvbGxlY3Rpb24/LnNsdWddKVxuICBjb25zdCBbZmlsdGVyT3B0aW9uc1Jlc3VsdCwgc2V0RmlsdGVyT3B0aW9uc1Jlc3VsdF0gPSB1c2VTdGF0ZTxGaWx0ZXJPcHRpb25zUmVzdWx0PigpXG5cbiAgY29uc3QgW0RvY3VtZW50RHJhd2VyLCBEb2N1bWVudERyYXdlclRvZ2dsZXIsIHsgY2xvc2VEcmF3ZXIgfV0gPSB1c2VEb2N1bWVudERyYXdlcih7XG4gICAgY29sbGVjdGlvblNsdWc6IGNvbGxlY3Rpb25TbHVnc1swXSxcbiAgfSlcblxuICBjb25zdCBbTGlzdERyYXdlciwgTGlzdERyYXdlclRvZ2dsZXIsIHsgY2xvc2VEcmF3ZXI6IGNsb3NlTGlzdERyYXdlciB9XSA9IHVzZUxpc3REcmF3ZXIoe1xuICAgIGNvbGxlY3Rpb25TbHVncyxcbiAgICBmaWx0ZXJPcHRpb25zOiBmaWx0ZXJPcHRpb25zUmVzdWx0LFxuICB9KVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICBjb25zdCBmZXRjaEZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7c2VydmVyVVJMfSR7YXBpfS8ke3JlbGF0aW9uVG99LyR7dmFsdWV9YCwge1xuICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6IGkxOG4ubGFuZ3VhZ2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgIHNldEZpbGUoanNvbilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRNaXNzaW5nRmlsZSh0cnVlKVxuICAgICAgICAgIHNldEZpbGUodW5kZWZpbmVkKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZldGNoRmlsZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZpbGUodW5kZWZpbmVkKVxuICAgIH1cbiAgfSwgW3ZhbHVlLCByZWxhdGlvblRvLCBhcGksIHNlcnZlclVSTCwgaTE4bl0pXG5cbiAgY29uc3Qgb25TYXZlID0gdXNlQ2FsbGJhY2s8RG9jdW1lbnREcmF3ZXJQcm9wc1snb25TYXZlJ10+KFxuICAgIChhcmdzKSA9PiB7XG4gICAgICBzZXRNaXNzaW5nRmlsZShmYWxzZSlcbiAgICAgIG9uQ2hhbmdlKGFyZ3MuZG9jKVxuICAgICAgY2xvc2VEcmF3ZXIoKVxuICAgIH0sXG4gICAgW29uQ2hhbmdlLCBjbG9zZURyYXdlcl0sXG4gIClcblxuICBjb25zdCBvblNlbGVjdCA9IHVzZUNhbGxiYWNrPExpc3REcmF3ZXJQcm9wc1snb25TZWxlY3QnXT4oXG4gICAgKGFyZ3MpID0+IHtcbiAgICAgIHNldE1pc3NpbmdGaWxlKGZhbHNlKVxuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBpZDogYXJncy5kb2NJRCxcbiAgICAgIH0pXG4gICAgICBjbG9zZUxpc3REcmF3ZXIoKVxuICAgIH0sXG4gICAgW29uQ2hhbmdlLCBjbG9zZUxpc3REcmF3ZXJdLFxuICApXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgZmllbGRCYXNlQ2xhc3MsXG4gICAgICAgIGJhc2VDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBzaG93RXJyb3IgJiYgJ2Vycm9yJyxcbiAgICAgICAgcmVhZE9ubHkgJiYgJ3JlYWQtb25seScsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEdldEZpbHRlck9wdGlvbnNcbiAgICAgICAgey4uLntcbiAgICAgICAgICBmaWx0ZXJPcHRpb25zLFxuICAgICAgICAgIGZpbHRlck9wdGlvbnNSZXN1bHQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICByZWxhdGlvblRvLFxuICAgICAgICAgIHNldEZpbHRlck9wdGlvbnNSZXN1bHQsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICAgPEVycm9yIG1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gc2hvd0Vycm9yPXtzaG93RXJyb3J9IC8+XG4gICAgICA8TGFiZWwgaHRtbEZvcj17YGZpZWxkLSR7cGF0aC5yZXBsYWNlKC9cXC4vZywgJ19fJyl9YH0gbGFiZWw9e2xhYmVsfSByZXF1aXJlZD17cmVxdWlyZWR9IC8+XG4gICAgICB7Y29sbGVjdGlvbj8udXBsb2FkICYmIChcbiAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgIHtmaWxlICYmICFtaXNzaW5nRmlsZSAmJiAoXG4gICAgICAgICAgICA8RmlsZURldGFpbHNcbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgZG9jPXtmaWxlfVxuICAgICAgICAgICAgICBoYW5kbGVSZW1vdmU9e1xuICAgICAgICAgICAgICAgIHJlYWRPbmx5XG4gICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2UobnVsbClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgICAgeyghZmlsZSB8fCBtaXNzaW5nRmlsZSkgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX3dyYXBgfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2J1dHRvbnNgfT5cbiAgICAgICAgICAgICAgICA8RG9jdW1lbnREcmF3ZXJUb2dnbGVyIGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fdG9nZ2xlcmB9IGRpc2FibGVkPXtyZWFkT25seX0+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGJ1dHRvblN0eWxlPVwic2Vjb25kYXJ5XCIgZGlzYWJsZWQ9e3JlYWRPbmx5fSBlbD1cImRpdlwiPlxuICAgICAgICAgICAgICAgICAgICB7dCgndXBsb2FkTmV3TGFiZWwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGdldFRyYW5zbGF0aW9uKGNvbGxlY3Rpb24ubGFiZWxzLnNpbmd1bGFyLCBpMThuKSxcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0RvY3VtZW50RHJhd2VyVG9nZ2xlcj5cbiAgICAgICAgICAgICAgICA8TGlzdERyYXdlclRvZ2dsZXIgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X190b2dnbGVyYH0gZGlzYWJsZWQ9e3JlYWRPbmx5fT5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gYnV0dG9uU3R5bGU9XCJzZWNvbmRhcnlcIiBkaXNhYmxlZD17cmVhZE9ubHl9IGVsPVwiZGl2XCI+XG4gICAgICAgICAgICAgICAgICAgIHt0KCdjaG9vc2VGcm9tRXhpc3RpbmcnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvTGlzdERyYXdlclRvZ2dsZXI+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8RmllbGREZXNjcmlwdGlvbiBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259IHZhbHVlPXtmaWxlfSAvPlxuICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgKX1cbiAgICAgIHshcmVhZE9ubHkgJiYgPERvY3VtZW50RHJhd2VyIG9uU2F2ZT17b25TYXZlfSAvPn1cbiAgICAgIHshcmVhZE9ubHkgJiYgPExpc3REcmF3ZXIgb25TZWxlY3Q9e29uU2VsZWN0fSAvPn1cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBVcGxvYWRJbnB1dFxuIl0sIm5hbWVzIjpbImJhc2VDbGFzcyIsIlVwbG9hZElucHV0IiwicHJvcHMiLCJhcGkiLCJjbGFzc05hbWUiLCJjb2xsZWN0aW9uIiwiZGVzY3JpcHRpb24iLCJlcnJvck1lc3NhZ2UiLCJmaWx0ZXJPcHRpb25zIiwibGFiZWwiLCJvbkNoYW5nZSIsInBhdGgiLCJyZWFkT25seSIsInJlbGF0aW9uVG8iLCJyZXF1aXJlZCIsInNlcnZlclVSTCIsInNob3dFcnJvciIsInN0eWxlIiwidmFsdWUiLCJ3aWR0aCIsImkxOG4iLCJ0IiwidXNlVHJhbnNsYXRpb24iLCJmaWxlIiwic2V0RmlsZSIsInVzZVN0YXRlIiwidW5kZWZpbmVkIiwibWlzc2luZ0ZpbGUiLCJzZXRNaXNzaW5nRmlsZSIsImNvbGxlY3Rpb25TbHVncyIsInNsdWciLCJmaWx0ZXJPcHRpb25zUmVzdWx0Iiwic2V0RmlsdGVyT3B0aW9uc1Jlc3VsdCIsIkRvY3VtZW50RHJhd2VyIiwiRG9jdW1lbnREcmF3ZXJUb2dnbGVyIiwiY2xvc2VEcmF3ZXIiLCJ1c2VEb2N1bWVudERyYXdlciIsImNvbGxlY3Rpb25TbHVnIiwiTGlzdERyYXdlciIsIkxpc3REcmF3ZXJUb2dnbGVyIiwiY2xvc2VMaXN0RHJhd2VyIiwidXNlTGlzdERyYXdlciIsInVzZUVmZmVjdCIsImZldGNoRmlsZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsImhlYWRlcnMiLCJsYW5ndWFnZSIsIm9rIiwianNvbiIsIm9uU2F2ZSIsInVzZUNhbGxiYWNrIiwiYXJncyIsImRvYyIsIm9uU2VsZWN0IiwiaWQiLCJkb2NJRCIsImRpdiIsImZpZWxkQmFzZUNsYXNzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJHZXRGaWx0ZXJPcHRpb25zIiwiRXJyb3IiLCJtZXNzYWdlIiwiTGFiZWwiLCJodG1sRm9yIiwicmVwbGFjZSIsInVwbG9hZCIsIlJlYWN0IiwiRnJhZ21lbnQiLCJGaWxlRGV0YWlscyIsImhhbmRsZVJlbW92ZSIsImRpc2FibGVkIiwiQnV0dG9uIiwiYnV0dG9uU3R5bGUiLCJlbCIsImdldFRyYW5zbGF0aW9uIiwibGFiZWxzIiwic2luZ3VsYXIiLCJGaWVsZERlc2NyaXB0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OytCQW1NQTs7O2VBQUE7OzsrREFuTXdEOzhCQUN6QjtnQ0FVQTsrREFDWjtnQ0FDZTtvRUFDVjs0QkFDTTtrQ0FDRzs4REFDZjt5RUFDVzs4REFD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