"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
require("./index.scss");
const _shared = require("../shared");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TextareaInput = (props)=>{
    const { className, description, errorMessage, label, onChange, path, placeholder, readOnly, required, rows, rtl, showError, style, value, width } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            'textarea',
            className,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement("label", {
        className: "textarea-outer",
        htmlFor: `field-${path.replace(/\./g, '__')}`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: "textarea-inner"
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: "textarea-clone",
        "data-value": value || placeholder || ''
    }), /*#__PURE__*/ _react.default.createElement("textarea", {
        className: "textarea-element",
        "data-rtl": rtl,
        disabled: readOnly,
        id: `field-${path.replace(/\./g, '__')}`,
        name: path,
        onChange: onChange,
        placeholder: (0, _getTranslation.getTranslation)(placeholder, i18n),
        rows: rows,
        value: value || ''
    }))), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: value
    }));
};
const _default = TextareaInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1RleHRhcmVhL0lucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENoYW5nZUV2ZW50IH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBUZXh0YXJlYUZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCBFcnJvciBmcm9tICcuLi8uLi9FcnJvcidcbmltcG9ydCBGaWVsZERlc2NyaXB0aW9uIGZyb20gJy4uLy4uL0ZpZWxkRGVzY3JpcHRpb24nXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vTGFiZWwnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcbmltcG9ydCB7IGZpZWxkQmFzZUNsYXNzIH0gZnJvbSAnLi4vc2hhcmVkJ1xuXG5leHBvcnQgdHlwZSBUZXh0QXJlYUlucHV0UHJvcHMgPSBPbWl0PFRleHRhcmVhRmllbGQsICd0eXBlJz4gJiB7XG4gIGNsYXNzTmFtZT86IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IERlc2NyaXB0aW9uXG4gIGVycm9yTWVzc2FnZT86IHN0cmluZ1xuICBvbkNoYW5nZT86IChlOiBDaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50PikgPT4gdm9pZFxuICBwYXRoOiBzdHJpbmdcbiAgcGxhY2Vob2xkZXI/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgc3RyaW5nXG4gIHJlYWRPbmx5PzogYm9vbGVhblxuICByZXF1aXJlZD86IGJvb2xlYW5cbiAgcm93cz86IG51bWJlclxuICBydGw/OiBib29sZWFuXG4gIHNob3dFcnJvcj86IGJvb2xlYW5cbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzXG4gIHZhbHVlPzogc3RyaW5nXG4gIHdpZHRoPzogc3RyaW5nXG59XG5cbmNvbnN0IFRleHRhcmVhSW5wdXQ6IFJlYWN0LkZDPFRleHRBcmVhSW5wdXRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBlcnJvck1lc3NhZ2UsXG4gICAgbGFiZWwsXG4gICAgb25DaGFuZ2UsXG4gICAgcGF0aCxcbiAgICBwbGFjZWhvbGRlcixcbiAgICByZWFkT25seSxcbiAgICByZXF1aXJlZCxcbiAgICByb3dzLFxuICAgIHJ0bCxcbiAgICBzaG93RXJyb3IsXG4gICAgc3R5bGUsXG4gICAgdmFsdWUsXG4gICAgd2lkdGgsXG4gIH0gPSBwcm9wc1xuXG4gIGNvbnN0IHsgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgIGZpZWxkQmFzZUNsYXNzLFxuICAgICAgICAndGV4dGFyZWEnLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHNob3dFcnJvciAmJiAnZXJyb3InLFxuICAgICAgICByZWFkT25seSAmJiAncmVhZC1vbmx5JyxcbiAgICAgIF1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbignICcpfVxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgIHdpZHRoLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8RXJyb3IgbWVzc2FnZT17ZXJyb3JNZXNzYWdlfSBzaG93RXJyb3I9e3Nob3dFcnJvcn0gLz5cbiAgICAgIDxMYWJlbCBodG1sRm9yPXtgZmllbGQtJHtwYXRoLnJlcGxhY2UoL1xcLi9nLCAnX18nKX1gfSBsYWJlbD17bGFiZWx9IHJlcXVpcmVkPXtyZXF1aXJlZH0gLz5cbiAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJ0ZXh0YXJlYS1vdXRlclwiIGh0bWxGb3I9e2BmaWVsZC0ke3BhdGgucmVwbGFjZSgvXFwuL2csICdfXycpfWB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRhcmVhLWlubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0YXJlYS1jbG9uZVwiIGRhdGEtdmFsdWU9e3ZhbHVlIHx8IHBsYWNlaG9sZGVyIHx8ICcnfSAvPlxuICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidGV4dGFyZWEtZWxlbWVudFwiXG4gICAgICAgICAgICBkYXRhLXJ0bD17cnRsfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3JlYWRPbmx5fVxuICAgICAgICAgICAgaWQ9e2BmaWVsZC0ke3BhdGgucmVwbGFjZSgvXFwuL2csICdfXycpfWB9XG4gICAgICAgICAgICBuYW1lPXtwYXRofVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2dldFRyYW5zbGF0aW9uKHBsYWNlaG9sZGVyLCBpMThuKX1cbiAgICAgICAgICAgIHJvd3M9e3Jvd3N9XG4gICAgICAgICAgICB2YWx1ZT17dmFsdWUgfHwgJyd9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPEZpZWxkRGVzY3JpcHRpb24gZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufSB2YWx1ZT17dmFsdWV9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWFJbnB1dFxuIl0sIm5hbWVzIjpbIlRleHRhcmVhSW5wdXQiLCJwcm9wcyIsImNsYXNzTmFtZSIsImRlc2NyaXB0aW9uIiwiZXJyb3JNZXNzYWdlIiwibGFiZWwiLCJvbkNoYW5nZSIsInBhdGgiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwicmVxdWlyZWQiLCJyb3dzIiwicnRsIiwic2hvd0Vycm9yIiwic3R5bGUiLCJ2YWx1ZSIsIndpZHRoIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwiZGl2IiwiZmllbGRCYXNlQ2xhc3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkVycm9yIiwibWVzc2FnZSIsIkxhYmVsIiwiaHRtbEZvciIsInJlcGxhY2UiLCJkYXRhLXZhbHVlIiwidGV4dGFyZWEiLCJkYXRhLXJ0bCIsImRpc2FibGVkIiwiaWQiLCJuYW1lIiwiZ2V0VHJhbnNsYXRpb24iLCJGaWVsZERlc2NyaXB0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OytCQTRGQTs7O2VBQUE7Ozs4REExRmtCOzhCQUNhO2dDQUtBOzhEQUNiO3lFQUNXOzhEQUNYO1FBQ1g7d0JBQ3dCOzs7Ozs7QUFtQi9CLE1BQU1BLGdCQUE4QyxDQUFDQztJQUNuRCxNQUFNLEVBQ0pDLFNBQVMsRUFDVEMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLEtBQUssRUFDTEMsUUFBUSxFQUNSQyxJQUFJLEVBQ0pDLFdBQVcsRUFDWEMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLElBQUksRUFDSkMsR0FBRyxFQUNIQyxTQUFTLEVBQ1RDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxLQUFLLEVBQ04sR0FBR2Y7SUFFSixNQUFNLEVBQUVnQixJQUFJLEVBQUUsR0FBR0MsSUFBQUEsNEJBQWM7SUFFL0IscUJBQ0UsNkJBQUNDO1FBQ0NqQixXQUFXO1lBQ1RrQixzQkFBYztZQUNkO1lBQ0FsQjtZQUNBVyxhQUFhO1lBQ2JKLFlBQVk7U0FDYixDQUNFWSxNQUFNLENBQUNDLFNBQ1BDLElBQUksQ0FBQztRQUNSVCxPQUFPO1lBQ0wsR0FBR0EsS0FBSztZQUNSRTtRQUNGO3FCQUVBLDZCQUFDUSxjQUFLO1FBQUNDLFNBQVNyQjtRQUFjUyxXQUFXQTtzQkFDekMsNkJBQUNhLGNBQUs7UUFBQ0MsU0FBUyxDQUFDLE1BQU0sRUFBRXBCLEtBQUtxQixPQUFPLENBQUMsT0FBTyxNQUFNLENBQUM7UUFBRXZCLE9BQU9BO1FBQU9LLFVBQVVBO3NCQUM5RSw2QkFBQ0w7UUFBTUgsV0FBVTtRQUFpQnlCLFNBQVMsQ0FBQyxNQUFNLEVBQUVwQixLQUFLcUIsT0FBTyxDQUFDLE9BQU8sTUFBTSxDQUFDO3FCQUM3RSw2QkFBQ1Q7UUFBSWpCLFdBQVU7cUJBQ2IsNkJBQUNpQjtRQUFJakIsV0FBVTtRQUFpQjJCLGNBQVlkLFNBQVNQLGVBQWU7c0JBQ3BFLDZCQUFDc0I7UUFDQzVCLFdBQVU7UUFDVjZCLFlBQVVuQjtRQUNWb0IsVUFBVXZCO1FBQ1Z3QixJQUFJLENBQUMsTUFBTSxFQUFFMUIsS0FBS3FCLE9BQU8sQ0FBQyxPQUFPLE1BQU0sQ0FBQztRQUN4Q00sTUFBTTNCO1FBQ05ELFVBQVVBO1FBQ1ZFLGFBQWEyQixJQUFBQSw4QkFBYyxFQUFDM0IsYUFBYVM7UUFDekNOLE1BQU1BO1FBQ05JLE9BQU9BLFNBQVM7d0JBSXRCLDZCQUFDcUIseUJBQWdCO1FBQUNqQyxhQUFhQTtRQUFhWSxPQUFPQTs7QUFHekQ7TUFFQSxXQUFlZiJ9