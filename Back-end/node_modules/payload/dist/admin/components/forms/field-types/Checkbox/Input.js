"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "CheckboxInput", {
    enumerable: true,
    get: function() {
        return CheckboxInput;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _Check = /*#__PURE__*/ _interop_require_default(require("../../../icons/Check"));
const _Line = /*#__PURE__*/ _interop_require_default(require("../../../icons/Line"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'checkbox-input';
const CheckboxInput = (props)=>{
    const { id, name, 'aria-label': ariaLabel, checked, inputRef, label, onToggle, partialChecked, readOnly, required, className } = props;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            className,
            (checked || partialChecked) && `${baseClass}--checked`,
            readOnly && `${baseClass}--read-only`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__input`
    }, /*#__PURE__*/ _react.default.createElement("input", {
        "aria-label": ariaLabel,
        defaultChecked: Boolean(checked),
        disabled: readOnly,
        id: id,
        name: name,
        onInput: onToggle,
        ref: inputRef,
        type: "checkbox"
    }), /*#__PURE__*/ _react.default.createElement("span", {
        className: `${baseClass}__icon ${!partialChecked ? 'check' : 'partial'}`
    }, !partialChecked && /*#__PURE__*/ _react.default.createElement(_Check.default, null), partialChecked && /*#__PURE__*/ _react.default.createElement(_Line.default, null))), label && /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: id,
        label: label,
        required: required
    }));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL0NoZWNrYm94L0lucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCBDaGVjayBmcm9tICcuLi8uLi8uLi9pY29ucy9DaGVjaydcbmltcG9ydCBMaW5lIGZyb20gJy4uLy4uLy4uL2ljb25zL0xpbmUnXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vTGFiZWwnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcblxuY29uc3QgYmFzZUNsYXNzID0gJ2NoZWNrYm94LWlucHV0J1xuXG50eXBlIENoZWNrYm94SW5wdXRQcm9wcyA9IHtcbiAgJ2FyaWEtbGFiZWwnPzogc3RyaW5nXG4gIGNoZWNrZWQ/OiBib29sZWFuXG4gIGlkPzogc3RyaW5nXG4gIGlucHV0UmVmPzogUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxIVE1MSW5wdXRFbGVtZW50PlxuICBsYWJlbD86IHN0cmluZ1xuICBuYW1lPzogc3RyaW5nXG4gIG9uVG9nZ2xlOiBSZWFjdC5Gb3JtRXZlbnRIYW5kbGVyPEhUTUxJbnB1dEVsZW1lbnQ+XG4gIHBhcnRpYWxDaGVja2VkPzogYm9vbGVhblxuICByZWFkT25seT86IGJvb2xlYW5cbiAgcmVxdWlyZWQ/OiBib29sZWFuXG4gIGNsYXNzTmFtZT86IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgQ2hlY2tib3hJbnB1dDogUmVhY3QuRkM8Q2hlY2tib3hJbnB1dFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgaWQsXG4gICAgbmFtZSxcbiAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICBjaGVja2VkLFxuICAgIGlucHV0UmVmLFxuICAgIGxhYmVsLFxuICAgIG9uVG9nZ2xlLFxuICAgIHBhcnRpYWxDaGVja2VkLFxuICAgIHJlYWRPbmx5LFxuICAgIHJlcXVpcmVkLFxuICAgIGNsYXNzTmFtZSxcbiAgfSA9IHByb3BzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgYmFzZUNsYXNzLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIChjaGVja2VkIHx8IHBhcnRpYWxDaGVja2VkKSAmJiBgJHtiYXNlQ2xhc3N9LS1jaGVja2VkYCxcbiAgICAgICAgcmVhZE9ubHkgJiYgYCR7YmFzZUNsYXNzfS0tcmVhZC1vbmx5YCxcbiAgICAgIF1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbignICcpfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19pbnB1dGB9PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBhcmlhLWxhYmVsPXthcmlhTGFiZWx9XG4gICAgICAgICAgZGVmYXVsdENoZWNrZWQ9e0Jvb2xlYW4oY2hlY2tlZCl9XG4gICAgICAgICAgZGlzYWJsZWQ9e3JlYWRPbmx5fVxuICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIG9uSW5wdXQ9e29uVG9nZ2xlfVxuICAgICAgICAgIHJlZj17aW5wdXRSZWZ9XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgLz5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19pY29uICR7IXBhcnRpYWxDaGVja2VkID8gJ2NoZWNrJyA6ICdwYXJ0aWFsJ31gfT5cbiAgICAgICAgICB7IXBhcnRpYWxDaGVja2VkICYmIDxDaGVjayAvPn1cbiAgICAgICAgICB7cGFydGlhbENoZWNrZWQgJiYgPExpbmUgLz59XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAge2xhYmVsICYmIDxMYWJlbCBodG1sRm9yPXtpZH0gbGFiZWw9e2xhYmVsfSByZXF1aXJlZD17cmVxdWlyZWR9IC8+fVxuICAgIDwvZGl2PlxuICApXG59XG4iXSwibmFtZXMiOlsiQ2hlY2tib3hJbnB1dCIsImJhc2VDbGFzcyIsInByb3BzIiwiaWQiLCJuYW1lIiwiYXJpYUxhYmVsIiwiY2hlY2tlZCIsImlucHV0UmVmIiwibGFiZWwiLCJvblRvZ2dsZSIsInBhcnRpYWxDaGVja2VkIiwicmVhZE9ubHkiLCJyZXF1aXJlZCIsImNsYXNzTmFtZSIsImRpdiIsImZpbHRlciIsIkJvb2xlYW4iLCJqb2luIiwiaW5wdXQiLCJhcmlhLWxhYmVsIiwiZGVmYXVsdENoZWNrZWQiLCJkaXNhYmxlZCIsIm9uSW5wdXQiLCJyZWYiLCJ0eXBlIiwic3BhbiIsIkNoZWNrIiwiTGluZSIsIkxhYmVsIiwiaHRtbEZvciJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF1QmFBOzs7ZUFBQUE7Ozs4REF2Qks7OERBRUE7NkRBQ0Q7OERBQ0M7UUFDWDs7Ozs7O0FBRVAsTUFBTUMsWUFBWTtBQWdCWCxNQUFNRCxnQkFBOEMsQ0FBQ0U7SUFDMUQsTUFBTSxFQUNKQyxFQUFFLEVBQ0ZDLElBQUksRUFDSixjQUFjQyxTQUFTLEVBQ3ZCQyxPQUFPLEVBQ1BDLFFBQVEsRUFDUkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLGNBQWMsRUFDZEMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVixHQUFHWDtJQUVKLHFCQUNFLDZCQUFDWTtRQUNDRCxXQUFXO1lBQ1RaO1lBQ0FZO1lBQ0NQLENBQUFBLFdBQVdJLGNBQWEsS0FBTSxDQUFDLEVBQUVULFVBQVUsU0FBUyxDQUFDO1lBQ3REVSxZQUFZLENBQUMsRUFBRVYsVUFBVSxXQUFXLENBQUM7U0FDdEMsQ0FDRWMsTUFBTSxDQUFDQyxTQUNQQyxJQUFJLENBQUM7cUJBRVIsNkJBQUNIO1FBQUlELFdBQVcsQ0FBQyxFQUFFWixVQUFVLE9BQU8sQ0FBQztxQkFDbkMsNkJBQUNpQjtRQUNDQyxjQUFZZDtRQUNaZSxnQkFBZ0JKLFFBQVFWO1FBQ3hCZSxVQUFVVjtRQUNWUixJQUFJQTtRQUNKQyxNQUFNQTtRQUNOa0IsU0FBU2I7UUFDVGMsS0FBS2hCO1FBQ0xpQixNQUFLO3NCQUVQLDZCQUFDQztRQUFLWixXQUFXLENBQUMsRUFBRVosVUFBVSxPQUFPLEVBQUUsQ0FBQ1MsaUJBQWlCLFVBQVUsVUFBVSxDQUFDO09BQzNFLENBQUNBLGdDQUFrQiw2QkFBQ2dCLGNBQUssU0FDekJoQixnQ0FBa0IsNkJBQUNpQixhQUFJLFdBRzNCbkIsdUJBQVMsNkJBQUNvQixjQUFLO1FBQUNDLFNBQVMxQjtRQUFJSyxPQUFPQTtRQUFPSSxVQUFVQTs7QUFHNUQifQ==