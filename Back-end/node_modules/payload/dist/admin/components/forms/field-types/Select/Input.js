"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _ReactSelect = /*#__PURE__*/ _interop_require_default(require("../../../elements/ReactSelect"));
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _shared = require("../shared");
require("./index.scss");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SelectInput = (props)=>{
    const { className, defaultValue, description, errorMessage, hasMany, isClearable, isSortable, label, onChange, options, path, readOnly, required, showError, style, value, width } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    let valueToRender = defaultValue;
    if (hasMany && Array.isArray(value)) {
        valueToRender = value.map((val)=>{
            const matchingOption = options.find((option)=>option.value === val);
            return {
                label: matchingOption ? (0, _getTranslation.getTranslation)(matchingOption.label, i18n) : val,
                value: matchingOption?.value ?? val
            };
        });
    } else if (value) {
        const matchingOption = options.find((option)=>option.value === value);
        valueToRender = {
            label: matchingOption ? (0, _getTranslation.getTranslation)(matchingOption.label, i18n) : value,
            value: matchingOption?.value ?? value
        };
    }
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            'select',
            className,
            showError && 'error',
            readOnly && 'read-only'
        ].filter(Boolean).join(' '),
        id: `field-${path.replace(/\./g, '__')}`,
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    }), /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: `field-${path.replace(/\./g, '__')}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement(_ReactSelect.default, {
        disabled: readOnly,
        isClearable: isClearable,
        isMulti: hasMany,
        isSortable: isSortable,
        onChange: onChange,
        options: options.map((option)=>({
                ...option,
                label: (0, _getTranslation.getTranslation)(option.label, i18n)
            })),
        showError: showError,
        value: valueToRender
    }), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: value
    }));
};
const _default = SelectInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1NlbGVjdC9JbnB1dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbXBvcnQgdHlwZSB7IE9wdGlvbk9iamVjdCwgU2VsZWN0RmllbGQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBPcHRpb24gfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9SZWFjdFNlbGVjdC90eXBlcydcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uL3R5cGVzJ1xuXG5pbXBvcnQgeyBnZXRUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy9nZXRUcmFuc2xhdGlvbidcbmltcG9ydCBSZWFjdFNlbGVjdCBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9SZWFjdFNlbGVjdCdcbmltcG9ydCBFcnJvciBmcm9tICcuLi8uLi9FcnJvcidcbmltcG9ydCBGaWVsZERlc2NyaXB0aW9uIGZyb20gJy4uLy4uL0ZpZWxkRGVzY3JpcHRpb24nXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vTGFiZWwnXG5pbXBvcnQgeyBmaWVsZEJhc2VDbGFzcyB9IGZyb20gJy4uL3NoYXJlZCdcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuXG5leHBvcnQgdHlwZSBTZWxlY3RJbnB1dFByb3BzID0gT21pdDxTZWxlY3RGaWVsZCwgJ29wdGlvbnMnIHwgJ3R5cGUnIHwgJ3ZhbHVlJz4gJiB7XG4gIGNsYXNzTmFtZT86IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IERlc2NyaXB0aW9uXG4gIGVycm9yTWVzc2FnZT86IHN0cmluZ1xuICBoYXNNYW55PzogYm9vbGVhblxuICBpc0NsZWFyYWJsZT86IGJvb2xlYW5cbiAgaXNTb3J0YWJsZT86IGJvb2xlYW5cbiAgb25DaGFuZ2U/OiAodmFsdWU6IE9wdGlvbikgPT4gdm9pZFxuICBvcHRpb25zPzogT3B0aW9uT2JqZWN0W11cbiAgcGF0aDogc3RyaW5nXG4gIHJlYWRPbmx5PzogYm9vbGVhblxuICByZXF1aXJlZD86IGJvb2xlYW5cbiAgc2hvd0Vycm9yPzogYm9vbGVhblxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgdmFsdWU/OiBzdHJpbmcgfCBzdHJpbmdbXVxuICB3aWR0aD86IHN0cmluZ1xufVxuXG5jb25zdCBTZWxlY3RJbnB1dDogUmVhY3QuRkM8U2VsZWN0SW5wdXRQcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZSxcbiAgICBkZWZhdWx0VmFsdWUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIGhhc01hbnksXG4gICAgaXNDbGVhcmFibGUsXG4gICAgaXNTb3J0YWJsZSxcbiAgICBsYWJlbCxcbiAgICBvbkNoYW5nZSxcbiAgICBvcHRpb25zLFxuICAgIHBhdGgsXG4gICAgcmVhZE9ubHksXG4gICAgcmVxdWlyZWQsXG4gICAgc2hvd0Vycm9yLFxuICAgIHN0eWxlLFxuICAgIHZhbHVlLFxuICAgIHdpZHRoLFxuICB9ID0gcHJvcHNcblxuICBjb25zdCB7IGkxOG4gfSA9IHVzZVRyYW5zbGF0aW9uKClcblxuICBsZXQgdmFsdWVUb1JlbmRlciA9IGRlZmF1bHRWYWx1ZVxuXG4gIGlmIChoYXNNYW55ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFsdWVUb1JlbmRlciA9IHZhbHVlLm1hcCgodmFsKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaGluZ09wdGlvbiA9IG9wdGlvbnMuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT09IHZhbClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsOiBtYXRjaGluZ09wdGlvbiA/IGdldFRyYW5zbGF0aW9uKG1hdGNoaW5nT3B0aW9uLmxhYmVsLCBpMThuKSA6IHZhbCxcbiAgICAgICAgdmFsdWU6IG1hdGNoaW5nT3B0aW9uPy52YWx1ZSA/PyB2YWwsXG4gICAgICB9XG4gICAgfSlcbiAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgIGNvbnN0IG1hdGNoaW5nT3B0aW9uID0gb3B0aW9ucy5maW5kKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUpXG4gICAgdmFsdWVUb1JlbmRlciA9IHtcbiAgICAgIGxhYmVsOiBtYXRjaGluZ09wdGlvbiA/IGdldFRyYW5zbGF0aW9uKG1hdGNoaW5nT3B0aW9uLmxhYmVsLCBpMThuKSA6IHZhbHVlLFxuICAgICAgdmFsdWU6IG1hdGNoaW5nT3B0aW9uPy52YWx1ZSA/PyB2YWx1ZSxcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICBmaWVsZEJhc2VDbGFzcyxcbiAgICAgICAgJ3NlbGVjdCcsXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgc2hvd0Vycm9yICYmICdlcnJvcicsXG4gICAgICAgIHJlYWRPbmx5ICYmICdyZWFkLW9ubHknLFxuICAgICAgXVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5qb2luKCcgJyl9XG4gICAgICBpZD17YGZpZWxkLSR7cGF0aC5yZXBsYWNlKC9cXC4vZywgJ19fJyl9YH1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEVycm9yIG1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gc2hvd0Vycm9yPXtzaG93RXJyb3J9IC8+XG4gICAgICA8TGFiZWwgaHRtbEZvcj17YGZpZWxkLSR7cGF0aC5yZXBsYWNlKC9cXC4vZywgJ19fJyl9YH0gbGFiZWw9e2xhYmVsfSByZXF1aXJlZD17cmVxdWlyZWR9IC8+XG4gICAgICA8UmVhY3RTZWxlY3RcbiAgICAgICAgZGlzYWJsZWQ9e3JlYWRPbmx5fVxuICAgICAgICBpc0NsZWFyYWJsZT17aXNDbGVhcmFibGV9XG4gICAgICAgIGlzTXVsdGk9e2hhc01hbnl9XG4gICAgICAgIGlzU29ydGFibGU9e2lzU29ydGFibGV9XG4gICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKHtcbiAgICAgICAgICAuLi5vcHRpb24sXG4gICAgICAgICAgbGFiZWw6IGdldFRyYW5zbGF0aW9uKG9wdGlvbi5sYWJlbCwgaTE4biksXG4gICAgICAgIH0pKX1cbiAgICAgICAgc2hvd0Vycm9yPXtzaG93RXJyb3J9XG4gICAgICAgIHZhbHVlPXt2YWx1ZVRvUmVuZGVyIGFzIE9wdGlvbn1cbiAgICAgIC8+XG4gICAgICA8RmllbGREZXNjcmlwdGlvbiBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259IHZhbHVlPXt2YWx1ZX0gLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dFxuIl0sIm5hbWVzIjpbIlNlbGVjdElucHV0IiwicHJvcHMiLCJjbGFzc05hbWUiLCJkZWZhdWx0VmFsdWUiLCJkZXNjcmlwdGlvbiIsImVycm9yTWVzc2FnZSIsImhhc01hbnkiLCJpc0NsZWFyYWJsZSIsImlzU29ydGFibGUiLCJsYWJlbCIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsInBhdGgiLCJyZWFkT25seSIsInJlcXVpcmVkIiwic2hvd0Vycm9yIiwic3R5bGUiLCJ2YWx1ZSIsIndpZHRoIiwiaTE4biIsInVzZVRyYW5zbGF0aW9uIiwidmFsdWVUb1JlbmRlciIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInZhbCIsIm1hdGNoaW5nT3B0aW9uIiwiZmluZCIsIm9wdGlvbiIsImdldFRyYW5zbGF0aW9uIiwiZGl2IiwiZmllbGRCYXNlQ2xhc3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImlkIiwicmVwbGFjZSIsIkVycm9yIiwibWVzc2FnZSIsIkxhYmVsIiwiaHRtbEZvciIsIlJlYWN0U2VsZWN0IiwiZGlzYWJsZWQiLCJpc011bHRpIiwiRmllbGREZXNjcmlwdGlvbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkErR0E7OztlQUFBOzs7OERBL0drQjs4QkFDYTtnQ0FNQTtvRUFDUDs4REFDTjt5RUFDVzs4REFDWDt3QkFDYTtRQUN4Qjs7Ozs7O0FBb0JQLE1BQU1BLGNBQTBDLENBQUNDO0lBQy9DLE1BQU0sRUFDSkMsU0FBUyxFQUNUQyxZQUFZLEVBQ1pDLFdBQVcsRUFDWEMsWUFBWSxFQUNaQyxPQUFPLEVBQ1BDLFdBQVcsRUFDWEMsVUFBVSxFQUNWQyxLQUFLLEVBQ0xDLFFBQVEsRUFDUkMsT0FBTyxFQUNQQyxJQUFJLEVBQ0pDLFFBQVEsRUFDUkMsUUFBUSxFQUNSQyxTQUFTLEVBQ1RDLEtBQUssRUFDTEMsS0FBSyxFQUNMQyxLQUFLLEVBQ04sR0FBR2pCO0lBRUosTUFBTSxFQUFFa0IsSUFBSSxFQUFFLEdBQUdDLElBQUFBLDRCQUFjO0lBRS9CLElBQUlDLGdCQUFnQmxCO0lBRXBCLElBQUlHLFdBQVdnQixNQUFNQyxPQUFPLENBQUNOLFFBQVE7UUFDbkNJLGdCQUFnQkosTUFBTU8sR0FBRyxDQUFDLENBQUNDO1lBQ3pCLE1BQU1DLGlCQUFpQmYsUUFBUWdCLElBQUksQ0FBQyxDQUFDQyxTQUFXQSxPQUFPWCxLQUFLLEtBQUtRO1lBQ2pFLE9BQU87Z0JBQ0xoQixPQUFPaUIsaUJBQWlCRyxJQUFBQSw4QkFBYyxFQUFDSCxlQUFlakIsS0FBSyxFQUFFVSxRQUFRTTtnQkFDckVSLE9BQU9TLGdCQUFnQlQsU0FBU1E7WUFDbEM7UUFDRjtJQUNGLE9BQU8sSUFBSVIsT0FBTztRQUNoQixNQUFNUyxpQkFBaUJmLFFBQVFnQixJQUFJLENBQUMsQ0FBQ0MsU0FBV0EsT0FBT1gsS0FBSyxLQUFLQTtRQUNqRUksZ0JBQWdCO1lBQ2RaLE9BQU9pQixpQkFBaUJHLElBQUFBLDhCQUFjLEVBQUNILGVBQWVqQixLQUFLLEVBQUVVLFFBQVFGO1lBQ3JFQSxPQUFPUyxnQkFBZ0JULFNBQVNBO1FBQ2xDO0lBQ0Y7SUFFQSxxQkFDRSw2QkFBQ2E7UUFDQzVCLFdBQVc7WUFDVDZCLHNCQUFjO1lBQ2Q7WUFDQTdCO1lBQ0FhLGFBQWE7WUFDYkYsWUFBWTtTQUNiLENBQ0VtQixNQUFNLENBQUNDLFNBQ1BDLElBQUksQ0FBQztRQUNSQyxJQUFJLENBQUMsTUFBTSxFQUFFdkIsS0FBS3dCLE9BQU8sQ0FBQyxPQUFPLE1BQU0sQ0FBQztRQUN4Q3BCLE9BQU87WUFDTCxHQUFHQSxLQUFLO1lBQ1JFO1FBQ0Y7cUJBRUEsNkJBQUNtQixjQUFLO1FBQUNDLFNBQVNqQztRQUFjVSxXQUFXQTtzQkFDekMsNkJBQUN3QixjQUFLO1FBQUNDLFNBQVMsQ0FBQyxNQUFNLEVBQUU1QixLQUFLd0IsT0FBTyxDQUFDLE9BQU8sTUFBTSxDQUFDO1FBQUUzQixPQUFPQTtRQUFPSyxVQUFVQTtzQkFDOUUsNkJBQUMyQixvQkFBVztRQUNWQyxVQUFVN0I7UUFDVk4sYUFBYUE7UUFDYm9DLFNBQVNyQztRQUNURSxZQUFZQTtRQUNaRSxVQUFVQTtRQUNWQyxTQUFTQSxRQUFRYSxHQUFHLENBQUMsQ0FBQ0ksU0FBWSxDQUFBO2dCQUNoQyxHQUFHQSxNQUFNO2dCQUNUbkIsT0FBT29CLElBQUFBLDhCQUFjLEVBQUNELE9BQU9uQixLQUFLLEVBQUVVO1lBQ3RDLENBQUE7UUFDQUosV0FBV0E7UUFDWEUsT0FBT0k7c0JBRVQsNkJBQUN1Qix5QkFBZ0I7UUFBQ3hDLGFBQWFBO1FBQWFhLE9BQU9BOztBQUd6RDtNQUVBLFdBQWVqQiJ9