"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _types = require("../../../../../fields/config/types");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _toKebabCase = /*#__PURE__*/ _interop_require_default(require("../../../../../utilities/toKebabCase"));
const _provider = require("../../../elements/Collapsible/provider");
const _ErrorPill = require("../../../elements/ErrorPill");
const _DocumentInfo = require("../../../utilities/DocumentInfo");
const _Preferences = require("../../../utilities/Preferences");
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _context = require("../../Form/context");
const _createNestedFieldPath = require("../../Form/createNestedFieldPath");
const _RenderFields = /*#__PURE__*/ _interop_require_default(require("../../RenderFields"));
const _WatchChildErrors = require("../../WatchChildErrors");
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
require("./index.scss");
const _provider1 = require("./provider");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'tabs-field';
const TabComponent = ({ isActive, parentPath, setIsActive, tab })=>{
    const { i18n } = (0, _reacti18next.useTranslation)();
    const [errorCount, setErrorCount] = (0, _react.useState)(undefined);
    const hasName = (0, _types.tabHasName)(tab);
    const submitted = (0, _context.useFormSubmitted)();
    const pathSegments = [];
    if (parentPath) pathSegments.push(parentPath);
    if (hasName) pathSegments.push(tab.name);
    const path = pathSegments.join('.');
    const tabHasErrors = submitted && errorCount > 0;
    return /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement(_WatchChildErrors.WatchChildErrors, {
        fieldSchema: hasName ? undefined : tab.fields,
        path: path,
        setErrorCount: setErrorCount
    }), /*#__PURE__*/ _react.default.createElement("button", {
        className: [
            `${baseClass}__tab-button`,
            tabHasErrors && `${baseClass}__tab-button--has-error`,
            isActive && `${baseClass}__tab-button--active`
        ].filter(Boolean).join(' '),
        onClick: setIsActive,
        type: "button"
    }, tab.label ? (0, _getTranslation.getTranslation)(tab.label, i18n) : hasName && tab.name, tabHasErrors && /*#__PURE__*/ _react.default.createElement(_ErrorPill.ErrorPill, {
        count: errorCount
    })));
};
const TabsField = (props)=>{
    const { admin: { className, readOnly }, fieldTypes, forceRender = false, indexPath, path, permissions, tabs } = props;
    const { getPreference, setPreference } = (0, _Preferences.usePreferences)();
    const { preferencesKey } = (0, _DocumentInfo.useDocumentInfo)();
    const { i18n } = (0, _reacti18next.useTranslation)();
    const isWithinCollapsible = (0, _provider.useCollapsible)();
    const [activeTabIndex, setActiveTabIndex] = (0, _react.useState)(0);
    const tabsPrefKey = `tabs-${indexPath}`;
    (0, _react.useEffect)(()=>{
        const getInitialPref = async ()=>{
            const existingPreferences = await getPreference(preferencesKey);
            const initialIndex = path ? existingPreferences?.fields?.[path]?.tabIndex : existingPreferences?.fields?.[tabsPrefKey]?.tabIndex;
            setActiveTabIndex(initialIndex || 0);
        };
        getInitialPref();
    }, [
        path,
        indexPath,
        getPreference,
        preferencesKey,
        tabsPrefKey
    ]);
    const handleTabChange = (0, _react.useCallback)(async (incomingTabIndex)=>{
        setActiveTabIndex(incomingTabIndex);
        const existingPreferences = await getPreference(preferencesKey);
        setPreference(preferencesKey, {
            ...existingPreferences,
            ...path ? {
                fields: {
                    ...existingPreferences?.fields || {},
                    [path]: {
                        ...existingPreferences?.fields?.[path],
                        tabIndex: incomingTabIndex
                    }
                }
            } : {
                fields: {
                    ...existingPreferences?.fields,
                    [tabsPrefKey]: {
                        ...existingPreferences?.fields?.[tabsPrefKey],
                        tabIndex: incomingTabIndex
                    }
                }
            }
        });
    }, [
        preferencesKey,
        getPreference,
        setPreference,
        path,
        tabsPrefKey
    ]);
    const activeTabConfig = tabs[activeTabIndex];
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            className,
            baseClass,
            isWithinCollapsible && `${baseClass}--within-collapsible`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_provider1.TabsProvider, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__tabs-wrap`
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__tabs`
    }, tabs.map((tab, tabIndex)=>{
        return /*#__PURE__*/ _react.default.createElement(TabComponent, {
            isActive: activeTabIndex === tabIndex,
            key: tabIndex,
            parentPath: path,
            setIsActive: ()=>handleTabChange(tabIndex),
            tab: tab
        });
    }))), /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__content-wrap`
    }, activeTabConfig && /*#__PURE__*/ _react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__tab`,
            activeTabConfig.label && `${baseClass}__tab-${(0, _toKebabCase.default)((0, _getTranslation.getTranslation)(activeTabConfig.label, i18n))}`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        className: `${baseClass}__description`,
        description: activeTabConfig.description,
        marginPlacement: "bottom"
    }), /*#__PURE__*/ _react.default.createElement(_RenderFields.default, {
        fieldSchema: activeTabConfig.fields.map((field)=>{
            const pathSegments = [];
            if (path) pathSegments.push(path);
            if ((0, _types.tabHasName)(activeTabConfig)) pathSegments.push(activeTabConfig.name);
            return {
                ...field,
                path: (0, _createNestedFieldPath.createNestedFieldPath)(pathSegments.join('.'), field)
            };
        }),
        fieldTypes: fieldTypes,
        forceRender: forceRender,
        indexPath: indexPath,
        key: String(activeTabConfig.label),
        margins: "small",
        permissions: (0, _types.tabHasName)(activeTabConfig) && permissions?.[activeTabConfig.name] ? permissions[activeTabConfig.name].fields : permissions,
        readOnly: readOnly
    }))))));
};
const _default = (0, _withCondition.default)(TabsField);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1RhYnMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdyZWFjdC1pMThuZXh0J1xuXG5pbXBvcnQgdHlwZSB7IFRhYiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IERvY3VtZW50UHJlZmVyZW5jZXMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9wcmVmZXJlbmNlcy90eXBlcydcbmltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQgeyB0YWJIYXNOYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuaW1wb3J0IHRvS2ViYWJDYXNlIGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxpdGllcy90b0tlYmFiQ2FzZSdcbmltcG9ydCB7IHVzZUNvbGxhcHNpYmxlIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudHMvQ29sbGFwc2libGUvcHJvdmlkZXInXG5pbXBvcnQgeyBFcnJvclBpbGwgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50cy9FcnJvclBpbGwnXG5pbXBvcnQgeyB1c2VEb2N1bWVudEluZm8gfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvRG9jdW1lbnRJbmZvJ1xuaW1wb3J0IHsgdXNlUHJlZmVyZW5jZXMgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvUHJlZmVyZW5jZXMnXG5pbXBvcnQgRmllbGREZXNjcmlwdGlvbiBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uJ1xuaW1wb3J0IHsgdXNlRm9ybVN1Ym1pdHRlZCB9IGZyb20gJy4uLy4uL0Zvcm0vY29udGV4dCdcbmltcG9ydCB7IGNyZWF0ZU5lc3RlZEZpZWxkUGF0aCB9IGZyb20gJy4uLy4uL0Zvcm0vY3JlYXRlTmVzdGVkRmllbGRQYXRoJ1xuaW1wb3J0IFJlbmRlckZpZWxkcyBmcm9tICcuLi8uLi9SZW5kZXJGaWVsZHMnXG5pbXBvcnQgeyBXYXRjaENoaWxkRXJyb3JzIH0gZnJvbSAnLi4vLi4vV2F0Y2hDaGlsZEVycm9ycydcbmltcG9ydCB3aXRoQ29uZGl0aW9uIGZyb20gJy4uLy4uL3dpdGhDb25kaXRpb24nXG5pbXBvcnQgeyBmaWVsZEJhc2VDbGFzcyB9IGZyb20gJy4uL3NoYXJlZCdcbmltcG9ydCAnLi9pbmRleC5zY3NzJ1xuaW1wb3J0IHsgVGFic1Byb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcidcblxuY29uc3QgYmFzZUNsYXNzID0gJ3RhYnMtZmllbGQnXG5cbnR5cGUgVGFiUHJvcHMgPSB7XG4gIGlzQWN0aXZlPzogYm9vbGVhblxuICBwYXJlbnRQYXRoOiBzdHJpbmdcbiAgc2V0SXNBY3RpdmU6ICgpID0+IHZvaWRcbiAgdGFiOiBUYWJcbn1cblxuY29uc3QgVGFiQ29tcG9uZW50OiBSZWFjdC5GQzxUYWJQcm9wcz4gPSAoeyBpc0FjdGl2ZSwgcGFyZW50UGF0aCwgc2V0SXNBY3RpdmUsIHRhYiB9KSA9PiB7XG4gIGNvbnN0IHsgaTE4biB9ID0gdXNlVHJhbnNsYXRpb24oKVxuICBjb25zdCBbZXJyb3JDb3VudCwgc2V0RXJyb3JDb3VudF0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpXG4gIGNvbnN0IGhhc05hbWUgPSB0YWJIYXNOYW1lKHRhYilcbiAgY29uc3Qgc3VibWl0dGVkID0gdXNlRm9ybVN1Ym1pdHRlZCgpXG5cbiAgY29uc3QgcGF0aFNlZ21lbnRzID0gW11cbiAgaWYgKHBhcmVudFBhdGgpIHBhdGhTZWdtZW50cy5wdXNoKHBhcmVudFBhdGgpXG4gIGlmIChoYXNOYW1lKSBwYXRoU2VnbWVudHMucHVzaCh0YWIubmFtZSlcbiAgY29uc3QgcGF0aCA9IHBhdGhTZWdtZW50cy5qb2luKCcuJylcbiAgY29uc3QgdGFiSGFzRXJyb3JzID0gc3VibWl0dGVkICYmIGVycm9yQ291bnQgPiAwXG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8V2F0Y2hDaGlsZEVycm9yc1xuICAgICAgICBmaWVsZFNjaGVtYT17aGFzTmFtZSA/IHVuZGVmaW5lZCA6IHRhYi5maWVsZHN9XG4gICAgICAgIHBhdGg9e3BhdGh9XG4gICAgICAgIHNldEVycm9yQ291bnQ9e3NldEVycm9yQ291bnR9XG4gICAgICAvPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgICBgJHtiYXNlQ2xhc3N9X190YWItYnV0dG9uYCxcbiAgICAgICAgICB0YWJIYXNFcnJvcnMgJiYgYCR7YmFzZUNsYXNzfV9fdGFiLWJ1dHRvbi0taGFzLWVycm9yYCxcbiAgICAgICAgICBpc0FjdGl2ZSAmJiBgJHtiYXNlQ2xhc3N9X190YWItYnV0dG9uLS1hY3RpdmVgLFxuICAgICAgICBdXG4gICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgIC5qb2luKCcgJyl9XG4gICAgICAgIG9uQ2xpY2s9e3NldElzQWN0aXZlfVxuICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgID5cbiAgICAgICAge3RhYi5sYWJlbCA/IGdldFRyYW5zbGF0aW9uKHRhYi5sYWJlbCwgaTE4bikgOiBoYXNOYW1lICYmIHRhYi5uYW1lfVxuICAgICAgICB7dGFiSGFzRXJyb3JzICYmIDxFcnJvclBpbGwgY291bnQ9e2Vycm9yQ291bnR9IC8+fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKVxufVxuXG5jb25zdCBUYWJzRmllbGQ6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgYWRtaW46IHsgY2xhc3NOYW1lLCByZWFkT25seSB9LFxuICAgIGZpZWxkVHlwZXMsXG4gICAgZm9yY2VSZW5kZXIgPSBmYWxzZSxcbiAgICBpbmRleFBhdGgsXG4gICAgcGF0aCxcbiAgICBwZXJtaXNzaW9ucyxcbiAgICB0YWJzLFxuICB9ID0gcHJvcHNcblxuICBjb25zdCB7IGdldFByZWZlcmVuY2UsIHNldFByZWZlcmVuY2UgfSA9IHVzZVByZWZlcmVuY2VzKClcbiAgY29uc3QgeyBwcmVmZXJlbmNlc0tleSB9ID0gdXNlRG9jdW1lbnRJbmZvKClcbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3QgaXNXaXRoaW5Db2xsYXBzaWJsZSA9IHVzZUNvbGxhcHNpYmxlKClcbiAgY29uc3QgW2FjdGl2ZVRhYkluZGV4LCBzZXRBY3RpdmVUYWJJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApXG4gIGNvbnN0IHRhYnNQcmVmS2V5ID0gYHRhYnMtJHtpbmRleFBhdGh9YFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZ2V0SW5pdGlhbFByZWYgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZ1ByZWZlcmVuY2VzOiBEb2N1bWVudFByZWZlcmVuY2VzID0gYXdhaXQgZ2V0UHJlZmVyZW5jZShwcmVmZXJlbmNlc0tleSlcbiAgICAgIGNvbnN0IGluaXRpYWxJbmRleCA9IHBhdGhcbiAgICAgICAgPyBleGlzdGluZ1ByZWZlcmVuY2VzPy5maWVsZHM/LltwYXRoXT8udGFiSW5kZXhcbiAgICAgICAgOiBleGlzdGluZ1ByZWZlcmVuY2VzPy5maWVsZHM/Llt0YWJzUHJlZktleV0/LnRhYkluZGV4XG4gICAgICBzZXRBY3RpdmVUYWJJbmRleChpbml0aWFsSW5kZXggfHwgMClcbiAgICB9XG4gICAgZ2V0SW5pdGlhbFByZWYoKVxuICB9LCBbcGF0aCwgaW5kZXhQYXRoLCBnZXRQcmVmZXJlbmNlLCBwcmVmZXJlbmNlc0tleSwgdGFic1ByZWZLZXldKVxuXG4gIGNvbnN0IGhhbmRsZVRhYkNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChpbmNvbWluZ1RhYkluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHNldEFjdGl2ZVRhYkluZGV4KGluY29taW5nVGFiSW5kZXgpXG5cbiAgICAgIGNvbnN0IGV4aXN0aW5nUHJlZmVyZW5jZXM6IERvY3VtZW50UHJlZmVyZW5jZXMgPSBhd2FpdCBnZXRQcmVmZXJlbmNlKHByZWZlcmVuY2VzS2V5KVxuXG4gICAgICBzZXRQcmVmZXJlbmNlKHByZWZlcmVuY2VzS2V5LCB7XG4gICAgICAgIC4uLmV4aXN0aW5nUHJlZmVyZW5jZXMsXG4gICAgICAgIC4uLihwYXRoXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIC4uLihleGlzdGluZ1ByZWZlcmVuY2VzPy5maWVsZHMgfHwge30pLFxuICAgICAgICAgICAgICAgIFtwYXRoXToge1xuICAgICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdQcmVmZXJlbmNlcz8uZmllbGRzPy5bcGF0aF0sXG4gICAgICAgICAgICAgICAgICB0YWJJbmRleDogaW5jb21pbmdUYWJJbmRleCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAuLi5leGlzdGluZ1ByZWZlcmVuY2VzPy5maWVsZHMsXG4gICAgICAgICAgICAgICAgW3RhYnNQcmVmS2V5XToge1xuICAgICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdQcmVmZXJlbmNlcz8uZmllbGRzPy5bdGFic1ByZWZLZXldLFxuICAgICAgICAgICAgICAgICAgdGFiSW5kZXg6IGluY29taW5nVGFiSW5kZXgsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgfSlcbiAgICB9LFxuICAgIFtwcmVmZXJlbmNlc0tleSwgZ2V0UHJlZmVyZW5jZSwgc2V0UHJlZmVyZW5jZSwgcGF0aCwgdGFic1ByZWZLZXldLFxuICApXG5cbiAgY29uc3QgYWN0aXZlVGFiQ29uZmlnID0gdGFic1thY3RpdmVUYWJJbmRleF1cblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICBmaWVsZEJhc2VDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBiYXNlQ2xhc3MsXG4gICAgICAgIGlzV2l0aGluQ29sbGFwc2libGUgJiYgYCR7YmFzZUNsYXNzfS0td2l0aGluLWNvbGxhcHNpYmxlYCxcbiAgICAgIF1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbignICcpfVxuICAgID5cbiAgICAgIDxUYWJzUHJvdmlkZXI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X190YWJzLXdyYXBgfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfV9fdGFic2B9PlxuICAgICAgICAgICAge3RhYnMubWFwKCh0YWIsIHRhYkluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRhYkNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgaXNBY3RpdmU9e2FjdGl2ZVRhYkluZGV4ID09PSB0YWJJbmRleH1cbiAgICAgICAgICAgICAgICAgIGtleT17dGFiSW5kZXh9XG4gICAgICAgICAgICAgICAgICBwYXJlbnRQYXRoPXtwYXRofVxuICAgICAgICAgICAgICAgICAgc2V0SXNBY3RpdmU9eygpID0+IGhhbmRsZVRhYkNoYW5nZSh0YWJJbmRleCl9XG4gICAgICAgICAgICAgICAgICB0YWI9e3RhYn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19jb250ZW50LXdyYXBgfT5cbiAgICAgICAgICB7YWN0aXZlVGFiQ29uZmlnICYmIChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17W1xuICAgICAgICAgICAgICAgICAgYCR7YmFzZUNsYXNzfV9fdGFiYCxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhYkNvbmZpZy5sYWJlbCAmJlxuICAgICAgICAgICAgICAgICAgICBgJHtiYXNlQ2xhc3N9X190YWItJHt0b0tlYmFiQ2FzZShnZXRUcmFuc2xhdGlvbihhY3RpdmVUYWJDb25maWcubGFiZWwsIGkxOG4pKX1gLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyl9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8RmllbGREZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19kZXNjcmlwdGlvbmB9XG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17YWN0aXZlVGFiQ29uZmlnLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgbWFyZ2luUGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxSZW5kZXJGaWVsZHNcbiAgICAgICAgICAgICAgICAgIGZpZWxkU2NoZW1hPXthY3RpdmVUYWJDb25maWcuZmllbGRzLm1hcCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aFNlZ21lbnRzID0gW11cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF0aCkgcGF0aFNlZ21lbnRzLnB1c2gocGF0aClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYkhhc05hbWUoYWN0aXZlVGFiQ29uZmlnKSkgcGF0aFNlZ21lbnRzLnB1c2goYWN0aXZlVGFiQ29uZmlnLm5hbWUpXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAuLi5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjcmVhdGVOZXN0ZWRGaWVsZFBhdGgocGF0aFNlZ21lbnRzLmpvaW4oJy4nKSwgZmllbGQpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZXM9e2ZpZWxkVHlwZXN9XG4gICAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcj17Zm9yY2VSZW5kZXJ9XG4gICAgICAgICAgICAgICAgICBpbmRleFBhdGg9e2luZGV4UGF0aH1cbiAgICAgICAgICAgICAgICAgIGtleT17U3RyaW5nKGFjdGl2ZVRhYkNvbmZpZy5sYWJlbCl9XG4gICAgICAgICAgICAgICAgICBtYXJnaW5zPVwic21hbGxcIlxuICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbnM9e1xuICAgICAgICAgICAgICAgICAgICB0YWJIYXNOYW1lKGFjdGl2ZVRhYkNvbmZpZykgJiYgcGVybWlzc2lvbnM/LlthY3RpdmVUYWJDb25maWcubmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICA/IHBlcm1pc3Npb25zW2FjdGl2ZVRhYkNvbmZpZy5uYW1lXS5maWVsZHNcbiAgICAgICAgICAgICAgICAgICAgICA6IHBlcm1pc3Npb25zXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9UYWJzUHJvdmlkZXI+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aENvbmRpdGlvbihUYWJzRmllbGQpXG4iXSwibmFtZXMiOlsiYmFzZUNsYXNzIiwiVGFiQ29tcG9uZW50IiwiaXNBY3RpdmUiLCJwYXJlbnRQYXRoIiwic2V0SXNBY3RpdmUiLCJ0YWIiLCJpMThuIiwidXNlVHJhbnNsYXRpb24iLCJlcnJvckNvdW50Iiwic2V0RXJyb3JDb3VudCIsInVzZVN0YXRlIiwidW5kZWZpbmVkIiwiaGFzTmFtZSIsInRhYkhhc05hbWUiLCJzdWJtaXR0ZWQiLCJ1c2VGb3JtU3VibWl0dGVkIiwicGF0aFNlZ21lbnRzIiwicHVzaCIsIm5hbWUiLCJwYXRoIiwiam9pbiIsInRhYkhhc0Vycm9ycyIsIlJlYWN0IiwiRnJhZ21lbnQiLCJXYXRjaENoaWxkRXJyb3JzIiwiZmllbGRTY2hlbWEiLCJmaWVsZHMiLCJidXR0b24iLCJjbGFzc05hbWUiLCJmaWx0ZXIiLCJCb29sZWFuIiwib25DbGljayIsInR5cGUiLCJsYWJlbCIsImdldFRyYW5zbGF0aW9uIiwiRXJyb3JQaWxsIiwiY291bnQiLCJUYWJzRmllbGQiLCJwcm9wcyIsImFkbWluIiwicmVhZE9ubHkiLCJmaWVsZFR5cGVzIiwiZm9yY2VSZW5kZXIiLCJpbmRleFBhdGgiLCJwZXJtaXNzaW9ucyIsInRhYnMiLCJnZXRQcmVmZXJlbmNlIiwic2V0UHJlZmVyZW5jZSIsInVzZVByZWZlcmVuY2VzIiwicHJlZmVyZW5jZXNLZXkiLCJ1c2VEb2N1bWVudEluZm8iLCJpc1dpdGhpbkNvbGxhcHNpYmxlIiwidXNlQ29sbGFwc2libGUiLCJhY3RpdmVUYWJJbmRleCIsInNldEFjdGl2ZVRhYkluZGV4IiwidGFic1ByZWZLZXkiLCJ1c2VFZmZlY3QiLCJnZXRJbml0aWFsUHJlZiIsImV4aXN0aW5nUHJlZmVyZW5jZXMiLCJpbml0aWFsSW5kZXgiLCJ0YWJJbmRleCIsImhhbmRsZVRhYkNoYW5nZSIsInVzZUNhbGxiYWNrIiwiaW5jb21pbmdUYWJJbmRleCIsImFjdGl2ZVRhYkNvbmZpZyIsImRpdiIsImZpZWxkQmFzZUNsYXNzIiwiVGFic1Byb3ZpZGVyIiwibWFwIiwia2V5IiwidG9LZWJhYkNhc2UiLCJGaWVsZERlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJtYXJnaW5QbGFjZW1lbnQiLCJSZW5kZXJGaWVsZHMiLCJmaWVsZCIsImNyZWF0ZU5lc3RlZEZpZWxkUGF0aCIsIlN0cmluZyIsIm1hcmdpbnMiLCJ3aXRoQ29uZGl0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OytCQW1OQTs7O2VBQUE7OzsrREFuTndEOzhCQUN6Qjt1QkFNSjtnQ0FDSTtvRUFDUDswQkFDTzsyQkFDTDs4QkFDTTs2QkFDRDt5RUFDRjt5QkFDSTt1Q0FDSztxRUFDYjtrQ0FDUTtzRUFDUDt3QkFDSztRQUN4QjsyQkFDc0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUU3QixNQUFNQSxZQUFZO0FBU2xCLE1BQU1DLGVBQW1DLENBQUMsRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLFdBQVcsRUFBRUMsR0FBRyxFQUFFO0lBQ2xGLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdDLElBQUFBLDRCQUFjO0lBQy9CLE1BQU0sQ0FBQ0MsWUFBWUMsY0FBYyxHQUFHQyxJQUFBQSxlQUFRLEVBQUNDO0lBQzdDLE1BQU1DLFVBQVVDLElBQUFBLGlCQUFVLEVBQUNSO0lBQzNCLE1BQU1TLFlBQVlDLElBQUFBLHlCQUFnQjtJQUVsQyxNQUFNQyxlQUFlLEVBQUU7SUFDdkIsSUFBSWIsWUFBWWEsYUFBYUMsSUFBSSxDQUFDZDtJQUNsQyxJQUFJUyxTQUFTSSxhQUFhQyxJQUFJLENBQUNaLElBQUlhLElBQUk7SUFDdkMsTUFBTUMsT0FBT0gsYUFBYUksSUFBSSxDQUFDO0lBQy9CLE1BQU1DLGVBQWVQLGFBQWFOLGFBQWE7SUFFL0MscUJBQ0UsNkJBQUNjLGNBQUssQ0FBQ0MsUUFBUSxzQkFDYiw2QkFBQ0Msa0NB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