"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _validations = require("../../../../../fields/validations");
const _Config = require("../../../utilities/Config");
const _Locale = require("../../../utilities/Locale");
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _shared = require("../shared");
const _Input = /*#__PURE__*/ _interop_require_default(require("./Input"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const Text = (props)=>{
    const { name, admin: { className, condition, description, placeholder, readOnly, rtl, style, width } = {}, inputRef, label, localized, maxLength, minLength, path: pathFromProps, required, validate = _validations.text } = props;
    const path = pathFromProps || name;
    const locale = (0, _Locale.useLocale)();
    const { localization } = (0, _Config.useConfig)();
    const isRTL = (0, _shared.isFieldRTL)({
        fieldLocalized: localized,
        fieldRTL: rtl,
        locale,
        localizationConfig: localization || undefined
    });
    const memoizedValidate = (0, _react.useCallback)((value, options)=>{
        return validate(value, {
            ...options,
            maxLength,
            minLength,
            required
        });
    }, [
        validate,
        minLength,
        maxLength,
        required
    ]);
    const { errorMessage, setValue, showError, value } = (0, _useField.default)({
        condition,
        path,
        validate: memoizedValidate
    });
    return /*#__PURE__*/ _react.default.createElement(_Input.default, {
        className: className,
        description: description,
        errorMessage: errorMessage,
        inputRef: inputRef,
        label: label,
        name: name,
        onChange: (e)=>{
            setValue(e.target.value);
        },
        path: path,
        placeholder: placeholder,
        readOnly: readOnly,
        required: required,
        rtl: isRTL,
        showError: showError,
        style: style,
        value: value,
        width: width
    });
};
const _default = (0, _withCondition.default)(Text);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1RleHQvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgdHlwZSB7IFByb3BzIH0gZnJvbSAnLi90eXBlcydcblxuaW1wb3J0IHsgdGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZpZWxkcy92YWxpZGF0aW9ucydcbmltcG9ydCB7IHVzZUNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdGllcy9Db25maWcnXG5pbXBvcnQgeyB1c2VMb2NhbGUgfSBmcm9tICcuLi8uLi8uLi91dGlsaXRpZXMvTG9jYWxlJ1xuaW1wb3J0IHVzZUZpZWxkIGZyb20gJy4uLy4uL3VzZUZpZWxkJ1xuaW1wb3J0IHdpdGhDb25kaXRpb24gZnJvbSAnLi4vLi4vd2l0aENvbmRpdGlvbidcbmltcG9ydCB7IGlzRmllbGRSVEwgfSBmcm9tICcuLi9zaGFyZWQnXG5pbXBvcnQgVGV4dElucHV0IGZyb20gJy4vSW5wdXQnXG5cbmNvbnN0IFRleHQ6IFJlYWN0LkZDPFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbmFtZSxcbiAgICBhZG1pbjogeyBjbGFzc05hbWUsIGNvbmRpdGlvbiwgZGVzY3JpcHRpb24sIHBsYWNlaG9sZGVyLCByZWFkT25seSwgcnRsLCBzdHlsZSwgd2lkdGggfSA9IHt9LFxuICAgIGlucHV0UmVmLFxuICAgIGxhYmVsLFxuICAgIGxvY2FsaXplZCxcbiAgICBtYXhMZW5ndGgsXG4gICAgbWluTGVuZ3RoLFxuICAgIHBhdGg6IHBhdGhGcm9tUHJvcHMsXG4gICAgcmVxdWlyZWQsXG4gICAgdmFsaWRhdGUgPSB0ZXh0LFxuICB9ID0gcHJvcHNcblxuICBjb25zdCBwYXRoID0gcGF0aEZyb21Qcm9wcyB8fCBuYW1lXG4gIGNvbnN0IGxvY2FsZSA9IHVzZUxvY2FsZSgpXG5cbiAgY29uc3QgeyBsb2NhbGl6YXRpb24gfSA9IHVzZUNvbmZpZygpXG4gIGNvbnN0IGlzUlRMID0gaXNGaWVsZFJUTCh7XG4gICAgZmllbGRMb2NhbGl6ZWQ6IGxvY2FsaXplZCxcbiAgICBmaWVsZFJUTDogcnRsLFxuICAgIGxvY2FsZSxcbiAgICBsb2NhbGl6YXRpb25Db25maWc6IGxvY2FsaXphdGlvbiB8fCB1bmRlZmluZWQsXG4gIH0pXG5cbiAgY29uc3QgbWVtb2l6ZWRWYWxpZGF0ZSA9IHVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHZhbHVlLCB7IC4uLm9wdGlvbnMsIG1heExlbmd0aCwgbWluTGVuZ3RoLCByZXF1aXJlZCB9KVxuICAgIH0sXG4gICAgW3ZhbGlkYXRlLCBtaW5MZW5ndGgsIG1heExlbmd0aCwgcmVxdWlyZWRdLFxuICApXG5cbiAgY29uc3QgeyBlcnJvck1lc3NhZ2UsIHNldFZhbHVlLCBzaG93RXJyb3IsIHZhbHVlIH0gPSB1c2VGaWVsZDxzdHJpbmc+KHtcbiAgICBjb25kaXRpb24sXG4gICAgcGF0aCxcbiAgICB2YWxpZGF0ZTogbWVtb2l6ZWRWYWxpZGF0ZSxcbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxUZXh0SW5wdXRcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufVxuICAgICAgZXJyb3JNZXNzYWdlPXtlcnJvck1lc3NhZ2V9XG4gICAgICBpbnB1dFJlZj17aW5wdXRSZWZ9XG4gICAgICBsYWJlbD17bGFiZWx9XG4gICAgICBuYW1lPXtuYW1lfVxuICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgIHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKVxuICAgICAgfX1cbiAgICAgIHBhdGg9e3BhdGh9XG4gICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICByZXF1aXJlZD17cmVxdWlyZWR9XG4gICAgICBydGw9e2lzUlRMfVxuICAgICAgc2hvd0Vycm9yPXtzaG93RXJyb3J9XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICB3aWR0aD17d2lkdGh9XG4gICAgLz5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoQ29uZGl0aW9uKFRleHQpXG4iXSwibmFtZXMiOlsiVGV4dCIsInByb3BzIiwibmFtZSIsImFkbWluIiwiY2xhc3NOYW1lIiwiY29uZGl0aW9uIiwiZGVzY3JpcHRpb24iLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5IiwicnRsIiwic3R5bGUiLCJ3aWR0aCIsImlucHV0UmVmIiwibGFiZWwiLCJsb2NhbGl6ZWQiLCJtYXhMZW5ndGgiLCJtaW5MZW5ndGgiLCJwYXRoIiwicGF0aEZyb21Qcm9wcyIsInJlcXVpcmVkIiwidmFsaWRhdGUiLCJ0ZXh0IiwibG9jYWxlIiwidXNlTG9jYWxlIiwibG9jYWxpemF0aW9uIiwidXNlQ29uZmlnIiwiaXNSVEwiLCJpc0ZpZWxkUlRMIiwiZmllbGRMb2NhbGl6ZWQiLCJmaWVsZFJUTCIsImxvY2FsaXphdGlvbkNvbmZpZyIsInVuZGVmaW5lZCIsIm1lbW9pemVkVmFsaWRhdGUiLCJ1c2VDYWxsYmFjayIsInZhbHVlIiwib3B0aW9ucyIsImVycm9yTWVzc2FnZSIsInNldFZhbHVlIiwic2hvd0Vycm9yIiwidXNlRmllbGQiLCJUZXh0SW5wdXQiLCJvbkNoYW5nZSIsImUiLCJ0YXJnZXQiLCJ3aXRoQ29uZGl0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OytCQTBFQTs7O2VBQUE7OzsrREExRW1DOzZCQUlkO3dCQUNLO3dCQUNBO2lFQUNMO3NFQUNLO3dCQUNDOzhEQUNMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFdEIsTUFBTUEsT0FBd0IsQ0FBQ0M7SUFDN0IsTUFBTSxFQUNKQyxJQUFJLEVBQ0pDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFDM0ZDLFFBQVEsRUFDUkMsS0FBSyxFQUNMQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxNQUFNQyxhQUFhLEVBQ25CQyxRQUFRLEVBQ1JDLFdBQVdDLGlCQUFJLEVBQ2hCLEdBQUdwQjtJQUVKLE1BQU1nQixPQUFPQyxpQkFBaUJoQjtJQUM5QixNQUFNb0IsU0FBU0MsSUFBQUEsaUJBQVM7SUFFeEIsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBR0MsSUFBQUEsaUJBQVM7SUFDbEMsTUFBTUMsUUFBUUMsSUFBQUEsa0JBQVUsRUFBQztRQUN2QkMsZ0JBQWdCZDtRQUNoQmUsVUFBVXBCO1FBQ1ZhO1FBQ0FRLG9CQUFvQk4sZ0JBQWdCTztJQUN0QztJQUVBLE1BQU1DLG1CQUFtQkMsSUFBQUEsa0JBQVcsRUFDbEMsQ0FBQ0MsT0FBT0M7UUFDTixPQUFPZixTQUFTYyxPQUFPO1lBQUUsR0FBR0MsT0FBTztZQUFFcEI7WUFBV0M7WUFBV0c7UUFBUztJQUN0RSxHQUNBO1FBQUNDO1FBQVVKO1FBQVdEO1FBQVdJO0tBQVM7SUFHNUMsTUFBTSxFQUFFaUIsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUosS0FBSyxFQUFFLEdBQUdLLElBQUFBLGlCQUFRLEVBQVM7UUFDcEVsQztRQUNBWTtRQUNBRyxVQUFVWTtJQUNaO0lBRUEscUJBQ0UsNkJBQUNRLGNBQVM7UUFDUnBDLFdBQVdBO1FBQ1hFLGFBQWFBO1FBQ2I4QixjQUFjQTtRQUNkeEIsVUFBVUE7UUFDVkMsT0FBT0E7UUFDUFgsTUFBTUE7UUFDTnVDLFVBQVUsQ0FBQ0M7WUFDVEwsU0FBU0ssRUFBRUMsTUFBTSxDQUFDVCxLQUFLO1FBQ3pCO1FBQ0FqQixNQUFNQTtRQUNOVixhQUFhQTtRQUNiQyxVQUFVQTtRQUNWVyxVQUFVQTtRQUNWVixLQUFLaUI7UUFDTFksV0FBV0E7UUFDWDVCLE9BQU9BO1FBQ1B3QixPQUFPQTtRQUNQdkIsT0FBT0E7O0FBR2I7TUFFQSxXQUFlaUMsSUFBQUEsc0JBQWEsRUFBQzVDIn0=