"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _types = require("../../../../../fields/config/types");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _Label = /*#__PURE__*/ _interop_require_default(require("../../Label"));
const _RadioInput = /*#__PURE__*/ _interop_require_default(require("./RadioInput"));
require("./index.scss");
const _shared = require("../shared");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const baseClass = 'radio-group';
const RadioGroupInput = (props)=>{
    const { name, className, description, errorMessage, label, layout = 'horizontal', onChange, options, path: pathFromProps, readOnly, required, showError, style, value, width } = props;
    const path = pathFromProps || name;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            className,
            `${baseClass}--layout-${layout}`,
            showError && 'error',
            readOnly && `${baseClass}--read-only`
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    })), /*#__PURE__*/ _react.default.createElement(_Label.default, {
        htmlFor: `field-${path}`,
        label: label,
        required: required
    }), /*#__PURE__*/ _react.default.createElement("ul", {
        className: `${baseClass}--group`,
        id: `field-${path.replace(/\./g, '__')}`
    }, options.map((option)=>{
        let optionValue = '';
        if ((0, _types.optionIsObject)(option)) {
            optionValue = option.value;
        } else {
            optionValue = option;
        }
        const isSelected = String(optionValue) === String(value);
        return /*#__PURE__*/ _react.default.createElement("li", {
            key: `${path} - ${optionValue}`
        }, /*#__PURE__*/ _react.default.createElement(_RadioInput.default, {
            isSelected: isSelected,
            onChange: readOnly ? undefined : onChange,
            option: (0, _types.optionIsObject)(option) ? option : {
                label: option,
                value: option
            },
            path: path
        }));
    })), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: value
    }));
};
const _default = RadioGroupInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL1JhZGlvR3JvdXAvSW5wdXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuaW1wb3J0IHR5cGUgeyBSYWRpb0ZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRpb24gfSBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBPbkNoYW5nZSB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IG9wdGlvbklzT2JqZWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL2NvbmZpZy90eXBlcydcbmltcG9ydCBFcnJvciBmcm9tICcuLi8uLi9FcnJvcidcbmltcG9ydCBGaWVsZERlc2NyaXB0aW9uIGZyb20gJy4uLy4uL0ZpZWxkRGVzY3JpcHRpb24nXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vTGFiZWwnXG5pbXBvcnQgUmFkaW9JbnB1dCBmcm9tICcuL1JhZGlvSW5wdXQnXG5pbXBvcnQgJy4vaW5kZXguc2NzcydcbmltcG9ydCB7IGZpZWxkQmFzZUNsYXNzIH0gZnJvbSAnLi4vc2hhcmVkJ1xuXG5jb25zdCBiYXNlQ2xhc3MgPSAncmFkaW8tZ3JvdXAnXG5cbmV4cG9ydCB0eXBlIFJhZGlvR3JvdXBJbnB1dFByb3BzID0gT21pdDxSYWRpb0ZpZWxkLCAndHlwZSc+ICYge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgZGVzY3JpcHRpb24/OiBEZXNjcmlwdGlvblxuICBlcnJvck1lc3NhZ2U/OiBzdHJpbmdcbiAgbGF5b3V0PzogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJ1xuICBvbkNoYW5nZT86IE9uQ2hhbmdlXG4gIHBhdGg/OiBzdHJpbmdcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmdcbiAgcmVhZE9ubHk/OiBib29sZWFuXG4gIHJlcXVpcmVkPzogYm9vbGVhblxuICBzaG93RXJyb3I/OiBib29sZWFuXG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllc1xuICB2YWx1ZT86IHN0cmluZ1xuICB3aWR0aD86IHN0cmluZ1xufVxuXG5jb25zdCBSYWRpb0dyb3VwSW5wdXQ6IFJlYWN0LkZDPFJhZGlvR3JvdXBJbnB1dFByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7XG4gICAgbmFtZSxcbiAgICBjbGFzc05hbWUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIGxhYmVsLFxuICAgIGxheW91dCA9ICdob3Jpem9udGFsJyxcbiAgICBvbkNoYW5nZSxcbiAgICBvcHRpb25zLFxuICAgIHBhdGg6IHBhdGhGcm9tUHJvcHMsXG4gICAgcmVhZE9ubHksXG4gICAgcmVxdWlyZWQsXG4gICAgc2hvd0Vycm9yLFxuICAgIHN0eWxlLFxuICAgIHZhbHVlLFxuICAgIHdpZHRoLFxuICB9ID0gcHJvcHNcblxuICBjb25zdCBwYXRoID0gcGF0aEZyb21Qcm9wcyB8fCBuYW1lXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e1tcbiAgICAgICAgZmllbGRCYXNlQ2xhc3MsXG4gICAgICAgIGJhc2VDbGFzcyxcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBgJHtiYXNlQ2xhc3N9LS1sYXlvdXQtJHtsYXlvdXR9YCxcbiAgICAgICAgc2hvd0Vycm9yICYmICdlcnJvcicsXG4gICAgICAgIHJlYWRPbmx5ICYmIGAke2Jhc2VDbGFzc30tLXJlYWQtb25seWAsXG4gICAgICBdXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oJyAnKX1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB3aWR0aCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2Jhc2VDbGFzc31fX2Vycm9yLXdyYXBgfT5cbiAgICAgICAgPEVycm9yIG1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gc2hvd0Vycm9yPXtzaG93RXJyb3J9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxMYWJlbCBodG1sRm9yPXtgZmllbGQtJHtwYXRofWB9IGxhYmVsPXtsYWJlbH0gcmVxdWlyZWQ9e3JlcXVpcmVkfSAvPlxuICAgICAgPHVsIGNsYXNzTmFtZT17YCR7YmFzZUNsYXNzfS0tZ3JvdXBgfSBpZD17YGZpZWxkLSR7cGF0aC5yZXBsYWNlKC9cXC4vZywgJ19fJyl9YH0+XG4gICAgICAgIHtvcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgbGV0IG9wdGlvblZhbHVlID0gJydcblxuICAgICAgICAgIGlmIChvcHRpb25Jc09iamVjdChvcHRpb24pKSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZSA9IG9wdGlvbi52YWx1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZSA9IG9wdGlvblxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBTdHJpbmcob3B0aW9uVmFsdWUpID09PSBTdHJpbmcodmFsdWUpXG5cbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGxpIGtleT17YCR7cGF0aH0gLSAke29wdGlvblZhbHVlfWB9PlxuICAgICAgICAgICAgICA8UmFkaW9JbnB1dFxuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9e2lzU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3JlYWRPbmx5ID8gdW5kZWZpbmVkIDogb25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgb3B0aW9uPXtvcHRpb25Jc09iamVjdChvcHRpb24pID8gb3B0aW9uIDogeyBsYWJlbDogb3B0aW9uLCB2YWx1ZTogb3B0aW9uIH19XG4gICAgICAgICAgICAgICAgcGF0aD17cGF0aH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKVxuICAgICAgICB9KX1cbiAgICAgIDwvdWw+XG4gICAgICA8RmllbGREZXNjcmlwdGlvbiBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259IHZhbHVlPXt2YWx1ZX0gLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0dyb3VwSW5wdXRcbiJdLCJuYW1lcyI6WyJiYXNlQ2xhc3MiLCJSYWRpb0dyb3VwSW5wdXQiLCJwcm9wcyIsIm5hbWUiLCJjbGFzc05hbWUiLCJkZXNjcmlwdGlvbiIsImVycm9yTWVzc2FnZSIsImxhYmVsIiwibGF5b3V0Iiwib25DaGFuZ2UiLCJvcHRpb25zIiwicGF0aCIsInBhdGhGcm9tUHJvcHMiLCJyZWFkT25seSIsInJlcXVpcmVkIiwic2hvd0Vycm9yIiwic3R5bGUiLCJ2YWx1ZSIsIndpZHRoIiwiZGl2IiwiZmllbGRCYXNlQ2xhc3MiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsIkVycm9yIiwibWVzc2FnZSIsIkxhYmVsIiwiaHRtbEZvciIsInVsIiwiaWQiLCJyZXBsYWNlIiwibWFwIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJvcHRpb25Jc09iamVjdCIsImlzU2VsZWN0ZWQiLCJTdHJpbmciLCJsaSIsImtleSIsIlJhZGlvSW5wdXQiLCJ1bmRlZmluZWQiLCJGaWVsZERlc2NyaXB0aW9uIl0sIm1hcHBpbmdzIjoiOzs7OytCQXVHQTs7O2VBQUE7Ozs4REF2R2tCO3VCQU1hOzhEQUNiO3lFQUNXOzhEQUNYO21FQUNLO1FBQ2hCO3dCQUN3Qjs7Ozs7O0FBRS9CLE1BQU1BLFlBQVk7QUFrQmxCLE1BQU1DLGtCQUFrRCxDQUFDQztJQUN2RCxNQUFNLEVBQ0pDLElBQUksRUFDSkMsU0FBUyxFQUNUQyxXQUFXLEVBQ1hDLFlBQVksRUFDWkMsS0FBSyxFQUNMQyxTQUFTLFlBQVksRUFDckJDLFFBQVEsRUFDUkMsT0FBTyxFQUNQQyxNQUFNQyxhQUFhLEVBQ25CQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsU0FBUyxFQUNUQyxLQUFLLEVBQ0xDLEtBQUssRUFDTEMsS0FBSyxFQUNOLEdBQUdoQjtJQUVKLE1BQU1TLE9BQU9DLGlCQUFpQlQ7SUFFOUIscUJBQ0UsNkJBQUNnQjtRQUNDZixXQUFXO1lBQ1RnQixzQkFBYztZQUNkcEI7WUFDQUk7WUFDQSxDQUFDLEVBQUVKLFVBQVUsU0FBUyxFQUFFUSxPQUFPLENBQUM7WUFDaENPLGFBQWE7WUFDYkYsWUFBWSxDQUFDLEVBQUViLFVBQVUsV0FBVyxDQUFDO1NBQ3RDLENBQ0VxQixNQUFNLENBQUNDLFNBQ1BDLElBQUksQ0FBQztRQUNSUCxPQUFPO1lBQ0wsR0FBR0EsS0FBSztZQUNSRTtRQUNGO3FCQUVBLDZCQUFDQztRQUFJZixXQUFXLENBQUMsRUFBRUosVUFBVSxZQUFZLENBQUM7cUJBQ3hDLDZCQUFDd0IsY0FBSztRQUFDQyxTQUFTbkI7UUFBY1MsV0FBV0E7dUJBRTNDLDZCQUFDVyxjQUFLO1FBQUNDLFNBQVMsQ0FBQyxNQUFNLEVBQUVoQixLQUFLLENBQUM7UUFBRUosT0FBT0E7UUFBT08sVUFBVUE7c0JBQ3pELDZCQUFDYztRQUFHeEIsV0FBVyxDQUFDLEVBQUVKLFVBQVUsT0FBTyxDQUFDO1FBQUU2QixJQUFJLENBQUMsTUFBTSxFQUFFbEIsS0FBS21CLE9BQU8sQ0FBQyxPQUFPLE1BQU0sQ0FBQztPQUMzRXBCLFFBQVFxQixHQUFHLENBQUMsQ0FBQ0M7UUFDWixJQUFJQyxjQUFjO1FBRWxCLElBQUlDLElBQUFBLHFCQUFjLEVBQUNGLFNBQVM7WUFDMUJDLGNBQWNELE9BQU9mLEtBQUs7UUFDNUIsT0FBTztZQUNMZ0IsY0FBY0Q7UUFDaEI7UUFFQSxNQUFNRyxhQUFhQyxPQUFPSCxpQkFBaUJHLE9BQU9uQjtRQUVsRCxxQkFDRSw2QkFBQ29CO1lBQUdDLEtBQUssQ0FBQyxFQUFFM0IsS0FBSyxHQUFHLEVBQUVzQixZQUFZLENBQUM7eUJBQ2pDLDZCQUFDTSxtQkFBVTtZQUNUSixZQUFZQTtZQUNaMUIsVUFBVUksV0FBVzJCLFlBQVkvQjtZQUNqQ3VCLFFBQVFFLElBQUFBLHFCQUFjLEVBQUNGLFVBQVVBLFNBQVM7Z0JBQUV6QixPQUFPeUI7Z0JBQVFmLE9BQU9lO1lBQU87WUFDekVyQixNQUFNQTs7SUFJZCxtQkFFRiw2QkFBQzhCLHlCQUFnQjtRQUFDcEMsYUFBYUE7UUFBYVksT0FBT0E7O0FBR3pEO01BRUEsV0FBZWhCIn0=