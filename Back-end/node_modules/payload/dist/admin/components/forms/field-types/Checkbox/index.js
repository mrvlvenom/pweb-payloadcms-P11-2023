"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _validations = require("../../../../../fields/validations");
const _getTranslation = require("../../../../../utilities/getTranslation");
const _Error = /*#__PURE__*/ _interop_require_default(require("../../Error"));
const _FieldDescription = /*#__PURE__*/ _interop_require_default(require("../../FieldDescription"));
const _useField = /*#__PURE__*/ _interop_require_default(require("../../useField"));
const _withCondition = /*#__PURE__*/ _interop_require_default(require("../../withCondition"));
const _Input = require("./Input");
require("./index.scss");
const _shared = require("../shared");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'checkbox';
const Checkbox = (props)=>{
    const { name, admin: { className, condition, description, readOnly, style, width } = {}, disableFormData, label, onChange, path: pathFromProps, required, validate = _validations.checkbox } = props;
    const { i18n } = (0, _reacti18next.useTranslation)();
    const path = pathFromProps || name;
    const memoizedValidate = (0, _react.useCallback)((value, options)=>{
        return validate(value, {
            ...options,
            required
        });
    }, [
        validate,
        required
    ]);
    const { errorMessage, setValue, showError, value } = (0, _useField.default)({
        condition,
        disableFormData,
        path,
        validate: memoizedValidate
    });
    const onToggle = (0, _react.useCallback)(()=>{
        if (!readOnly) {
            setValue(!value);
            if (typeof onChange === 'function') onChange(!value);
        }
    }, [
        onChange,
        readOnly,
        setValue,
        value
    ]);
    const fieldID = `field-${path.replace(/\./g, '__')}`;
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            _shared.fieldBaseClass,
            baseClass,
            showError && 'error',
            className,
            value && `${baseClass}--checked`,
            readOnly && `${baseClass}--read-only`
        ].filter(Boolean).join(' '),
        style: {
            ...style,
            width
        }
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: `${baseClass}__error-wrap`
    }, /*#__PURE__*/ _react.default.createElement(_Error.default, {
        message: errorMessage,
        showError: showError
    })), /*#__PURE__*/ _react.default.createElement(_Input.CheckboxInput, {
        checked: Boolean(value),
        id: fieldID,
        label: (0, _getTranslation.getTranslation)(label || name, i18n),
        name: path,
        onToggle: onToggle,
        readOnly: readOnly
    }), /*#__PURE__*/ _react.default.createElement(_FieldDescription.default, {
        description: description,
        value: value
    }));
};
const _default = (0, _withCondition.default)(Checkbox);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hZG1pbi9jb21wb25lbnRzL2Zvcm1zL2ZpZWxkLXR5cGVzL0NoZWNrYm94L2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCdcblxuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCB7IGNoZWNrYm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZmllbGRzL3ZhbGlkYXRpb25zJ1xuaW1wb3J0IHsgZ2V0VHJhbnNsYXRpb24gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlsaXRpZXMvZ2V0VHJhbnNsYXRpb24nXG5pbXBvcnQgRXJyb3IgZnJvbSAnLi4vLi4vRXJyb3InXG5pbXBvcnQgRmllbGREZXNjcmlwdGlvbiBmcm9tICcuLi8uLi9GaWVsZERlc2NyaXB0aW9uJ1xuaW1wb3J0IHVzZUZpZWxkIGZyb20gJy4uLy4uL3VzZUZpZWxkJ1xuaW1wb3J0IHdpdGhDb25kaXRpb24gZnJvbSAnLi4vLi4vd2l0aENvbmRpdGlvbidcbmltcG9ydCB7IENoZWNrYm94SW5wdXQgfSBmcm9tICcuL0lucHV0J1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnXG5pbXBvcnQgeyBmaWVsZEJhc2VDbGFzcyB9IGZyb20gJy4uL3NoYXJlZCdcblxuY29uc3QgYmFzZUNsYXNzID0gJ2NoZWNrYm94J1xuXG5jb25zdCBDaGVja2JveDogUmVhY3QuRkM8UHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBuYW1lLFxuICAgIGFkbWluOiB7IGNsYXNzTmFtZSwgY29uZGl0aW9uLCBkZXNjcmlwdGlvbiwgcmVhZE9ubHksIHN0eWxlLCB3aWR0aCB9ID0ge30sXG4gICAgZGlzYWJsZUZvcm1EYXRhLFxuICAgIGxhYmVsLFxuICAgIG9uQ2hhbmdlLFxuICAgIHBhdGg6IHBhdGhGcm9tUHJvcHMsXG4gICAgcmVxdWlyZWQsXG4gICAgdmFsaWRhdGUgPSBjaGVja2JveCxcbiAgfSA9IHByb3BzXG5cbiAgY29uc3QgeyBpMThuIH0gPSB1c2VUcmFuc2xhdGlvbigpXG5cbiAgY29uc3QgcGF0aCA9IHBhdGhGcm9tUHJvcHMgfHwgbmFtZVxuXG4gIGNvbnN0IG1lbW9pemVkVmFsaWRhdGUgPSB1c2VDYWxsYmFjayhcbiAgICAodmFsdWUsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZSh2YWx1ZSwgeyAuLi5vcHRpb25zLCByZXF1aXJlZCB9KVxuICAgIH0sXG4gICAgW3ZhbGlkYXRlLCByZXF1aXJlZF0sXG4gIClcblxuICBjb25zdCB7IGVycm9yTWVzc2FnZSwgc2V0VmFsdWUsIHNob3dFcnJvciwgdmFsdWUgfSA9IHVzZUZpZWxkKHtcbiAgICBjb25kaXRpb24sXG4gICAgZGlzYWJsZUZvcm1EYXRhLFxuICAgIHBhdGgsXG4gICAgdmFsaWRhdGU6IG1lbW9pemVkVmFsaWRhdGUsXG4gIH0pXG5cbiAgY29uc3Qgb25Ub2dnbGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKCFyZWFkT25seSkge1xuICAgICAgc2V0VmFsdWUoIXZhbHVlKVxuICAgICAgaWYgKHR5cGVvZiBvbkNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykgb25DaGFuZ2UoIXZhbHVlKVxuICAgIH1cbiAgfSwgW29uQ2hhbmdlLCByZWFkT25seSwgc2V0VmFsdWUsIHZhbHVlXSlcblxuICBjb25zdCBmaWVsZElEID0gYGZpZWxkLSR7cGF0aC5yZXBsYWNlKC9cXC4vZywgJ19fJyl9YFxuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtbXG4gICAgICAgIGZpZWxkQmFzZUNsYXNzLFxuICAgICAgICBiYXNlQ2xhc3MsXG4gICAgICAgIHNob3dFcnJvciAmJiAnZXJyb3InLFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIHZhbHVlICYmIGAke2Jhc2VDbGFzc30tLWNoZWNrZWRgLFxuICAgICAgICByZWFkT25seSAmJiBgJHtiYXNlQ2xhc3N9LS1yZWFkLW9ubHlgLFxuICAgICAgXVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5qb2luKCcgJyl9XG4gICAgICBzdHlsZT17e1xuICAgICAgICAuLi5zdHlsZSxcbiAgICAgICAgd2lkdGgsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtiYXNlQ2xhc3N9X19lcnJvci13cmFwYH0+XG4gICAgICAgIDxFcnJvciBtZXNzYWdlPXtlcnJvck1lc3NhZ2V9IHNob3dFcnJvcj17c2hvd0Vycm9yfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8Q2hlY2tib3hJbnB1dFxuICAgICAgICBjaGVja2VkPXtCb29sZWFuKHZhbHVlKX1cbiAgICAgICAgaWQ9e2ZpZWxkSUR9XG4gICAgICAgIGxhYmVsPXtnZXRUcmFuc2xhdGlvbihsYWJlbCB8fCBuYW1lLCBpMThuKX1cbiAgICAgICAgbmFtZT17cGF0aH1cbiAgICAgICAgb25Ub2dnbGU9e29uVG9nZ2xlfVxuICAgICAgICByZWFkT25seT17cmVhZE9ubHl9XG4gICAgICAvPlxuICAgICAgPEZpZWxkRGVzY3JpcHRpb24gZGVzY3JpcHRpb249e2Rlc2NyaXB0aW9ufSB2YWx1ZT17dmFsdWV9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aENvbmRpdGlvbihDaGVja2JveClcbiJdLCJuYW1lcyI6WyJiYXNlQ2xhc3MiLCJDaGVja2JveCIsInByb3BzIiwibmFtZSIsImFkbWluIiwiY2xhc3NOYW1lIiwiY29uZGl0aW9uIiwiZGVzY3JpcHRpb24iLCJyZWFkT25seSIsInN0eWxlIiwid2lkdGgiLCJkaXNhYmxlRm9ybURhdGEiLCJsYWJlbCIsIm9uQ2hhbmdlIiwicGF0aCIsInBhdGhGcm9tUHJvcHMiLCJyZXF1aXJlZCIsInZhbGlkYXRlIiwiY2hlY2tib3giLCJpMThuIiwidXNlVHJhbnNsYXRpb24iLCJtZW1vaXplZFZhbGlkYXRlIiwidXNlQ2FsbGJhY2siLCJ2YWx1ZSIsIm9wdGlvbnMiLCJlcnJvck1lc3NhZ2UiLCJzZXRWYWx1ZSIsInNob3dFcnJvciIsInVzZUZpZWxkIiwib25Ub2dnbGUiLCJmaWVsZElEIiwicmVwbGFjZSIsImRpdiIsImZpZWxkQmFzZUNsYXNzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJFcnJvciIsIm1lc3NhZ2UiLCJDaGVja2JveElucHV0IiwiY2hlY2tlZCIsImlkIiwiZ2V0VHJhbnNsYXRpb24iLCJGaWVsZERlc2NyaXB0aW9uIiwid2l0aENvbmRpdGlvbiJdLCJtYXBwaW5ncyI6Ijs7OzsrQkF5RkE7OztlQUFBOzs7K0RBekZtQzs4QkFDSjs2QkFJTjtnQ0FDTTs4REFDYjt5RUFDVztpRUFDUjtzRUFDSzt1QkFDSTtRQUN2Qjt3QkFDd0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUUvQixNQUFNQSxZQUFZO0FBRWxCLE1BQU1DLFdBQTRCLENBQUNDO0lBQ2pDLE1BQU0sRUFDSkMsSUFBSSxFQUNKQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFDekVDLGVBQWUsRUFDZkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLE1BQU1DLGFBQWEsRUFDbkJDLFFBQVEsRUFDUkMsV0FBV0MscUJBQVEsRUFDcEIsR0FBR2hCO0lBRUosTUFBTSxFQUFFaUIsSUFBSSxFQUFFLEdBQUdDLElBQUFBLDRCQUFjO0lBRS9CLE1BQU1OLE9BQU9DLGlCQUFpQlo7SUFFOUIsTUFBTWtCLG1CQUFtQkMsSUFBQUEsa0JBQVcsRUFDbEMsQ0FBQ0MsT0FBT0M7UUFDTixPQUFPUCxTQUFTTSxPQUFPO1lBQUUsR0FBR0MsT0FBTztZQUFFUjtRQUFTO0lBQ2hELEdBQ0E7UUFBQ0M7UUFBVUQ7S0FBUztJQUd0QixNQUFNLEVBQUVTLFlBQVksRUFBRUMsUUFBUSxFQUFFQyxTQUFTLEVBQUVKLEtBQUssRUFBRSxHQUFHSyxJQUFBQSxpQkFBUSxFQUFDO1FBQzVEdEI7UUFDQUs7UUFDQUc7UUFDQUcsVUFBVUk7SUFDWjtJQUVBLE1BQU1RLFdBQVdQLElBQUFBLGtCQUFXLEVBQUM7UUFDM0IsSUFBSSxDQUFDZCxVQUFVO1lBQ2JrQixTQUFTLENBQUNIO1lBQ1YsSUFBSSxPQUFPVixhQUFhLFlBQVlBLFNBQVMsQ0FBQ1U7UUFDaEQ7SUFDRixHQUFHO1FBQUNWO1FBQVVMO1FBQVVrQjtRQUFVSDtLQUFNO0lBRXhDLE1BQU1PLFVBQVUsQ0FBQyxNQUFNLEVBQUVoQixLQUFLaUIsT0FBTyxDQUFDLE9BQU8sTUFBTSxDQUFDO0lBRXBELHFCQUNFLDZCQUFDQztRQUNDM0IsV0FBVztZQUNUNEIsc0JBQWM7WUFDZGpDO1lBQ0EyQixhQUFhO1lBQ2J0QjtZQUNBa0IsU0FBUyxDQUFDLEVBQUV2QixVQUFVLFNBQVMsQ0FBQztZQUNoQ1EsWUFBWSxDQUFDLEVBQUVSLFVBQVUsV0FBVyxDQUFDO1NBQ3RDLENBQ0VrQyxNQUFNLENBQUNDLFNBQ1BDLElBQUksQ0FBQztRQUNSM0IsT0FBTztZQUNMLEdBQUdBLEtBQUs7WUFDUkM7UUFDRjtxQkFFQSw2QkFBQ3NCO1FBQUkzQixXQUFXLENBQUMsRUFBRUwsVUFBVSxZQUFZLENBQUM7cUJBQ3hDLDZCQUFDcUMsY0FBSztRQUFDQyxTQUFTYjtRQUFjRSxXQUFXQTt1QkFFM0MsNkJBQUNZLG9CQUFhO1FBQ1pDLFNBQVNMLFFBQVFaO1FBQ2pCa0IsSUFBSVg7UUFDSmxCLE9BQU84QixJQUFBQSw4QkFBYyxFQUFDOUIsU0FBU1QsTUFBTWdCO1FBQ3JDaEIsTUFBTVc7UUFDTmUsVUFBVUE7UUFDVnJCLFVBQVVBO3NCQUVaLDZCQUFDbUMseUJBQWdCO1FBQUNwQyxhQUFhQTtRQUFhZ0IsT0FBT0E7O0FBR3pEO01BRUEsV0FBZXFCLElBQUFBLHNCQUFhLEVBQUMzQyJ9