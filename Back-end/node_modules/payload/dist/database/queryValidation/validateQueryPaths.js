/* eslint-disable no-restricted-syntax */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "validateQueryPaths", {
    enumerable: true,
    get: function() {
        return validateQueryPaths;
    }
});
const _QueryError = /*#__PURE__*/ _interop_require_default(require("../../errors/QueryError"));
const _constants = require("../../types/constants");
const _deepCopyObject = require("../../utilities/deepCopyObject");
const _flattenTopLevelFields = /*#__PURE__*/ _interop_require_default(require("../../utilities/flattenTopLevelFields"));
const _validateSearchParams = require("./validateSearchParams");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const flattenWhere = (query)=>Object.entries(query).reduce((flattenedConstraints, [key, val])=>{
        if ((key === 'and' || key === 'or') && Array.isArray(val)) {
            return [
                ...flattenedConstraints,
                ...val.map((subVal)=>flattenWhere(subVal))
            ];
        }
        return [
            ...flattenedConstraints,
            {
                [key]: val
            }
        ];
    }, []);
async function validateQueryPaths({ collectionConfig, errors = [], globalConfig, overrideAccess, policies = {
    collections: {},
    globals: {}
}, req, versionFields, where }) {
    const fields = (0, _flattenTopLevelFields.default)(versionFields || (globalConfig || collectionConfig).fields);
    if (typeof where === 'object') {
        const whereFields = flattenWhere(where);
        // We need to determine if the whereKey is an AND, OR, or a schema path
        const promises = [];
        whereFields.map(async (constraint)=>{
            Object.keys(constraint).map(async (path)=>{
                Object.entries(constraint[path]).map(async ([operator, val])=>{
                    if (_constants.validOperators.includes(operator)) {
                        promises.push((0, _validateSearchParams.validateSearchParam)({
                            collectionConfig: (0, _deepCopyObject.deepCopyObject)(collectionConfig),
                            errors,
                            fields: fields,
                            globalConfig: (0, _deepCopyObject.deepCopyObject)(globalConfig),
                            operator,
                            overrideAccess,
                            path,
                            policies,
                            req,
                            val,
                            versionFields
                        }));
                    }
                });
            });
        });
        await Promise.all(promises);
        if (errors.length > 0) {
            throw new _QueryError.default(errors);
        }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhYmFzZS9xdWVyeVZhbGlkYXRpb24vdmFsaWRhdGVRdWVyeVBhdGhzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5pbXBvcnQgdHlwZSB7IFNhbml0aXplZENvbGxlY3Rpb25Db25maWcgfSBmcm9tICcuLi8uLi9jb2xsZWN0aW9ucy9jb25maWcvdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEZpZWxkLCBGaWVsZEFmZmVjdGluZ0RhdGEgfSBmcm9tICcuLi8uLi9maWVsZHMvY29uZmlnL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBTYW5pdGl6ZWRHbG9iYWxDb25maWcgfSBmcm9tICcuLi8uLi9nbG9iYWxzL2NvbmZpZy90eXBlcydcbi8qIGVzbGludC1kaXNhYmxlIG5vLWF3YWl0LWluLWxvb3AgKi9cbmltcG9ydCB0eXBlIHsgT3BlcmF0b3IsIFBheWxvYWRSZXF1ZXN0LCBXaGVyZSwgV2hlcmVGaWVsZCB9IGZyb20gJy4uLy4uL3R5cGVzJ1xuaW1wb3J0IHR5cGUgeyBFbnRpdHlQb2xpY2llcyB9IGZyb20gJy4vdHlwZXMnXG5cbmltcG9ydCBRdWVyeUVycm9yIGZyb20gJy4uLy4uL2Vycm9ycy9RdWVyeUVycm9yJ1xuaW1wb3J0IHsgdmFsaWRPcGVyYXRvcnMgfSBmcm9tICcuLi8uLi90eXBlcy9jb25zdGFudHMnXG5pbXBvcnQgeyBkZWVwQ29weU9iamVjdCB9IGZyb20gJy4uLy4uL3V0aWxpdGllcy9kZWVwQ29weU9iamVjdCdcbmltcG9ydCBmbGF0dGVuRmllbGRzIGZyb20gJy4uLy4uL3V0aWxpdGllcy9mbGF0dGVuVG9wTGV2ZWxGaWVsZHMnXG5pbXBvcnQgeyB2YWxpZGF0ZVNlYXJjaFBhcmFtIH0gZnJvbSAnLi92YWxpZGF0ZVNlYXJjaFBhcmFtcydcblxudHlwZSBBcmdzID0ge1xuICBlcnJvcnM/OiB7IHBhdGg6IHN0cmluZyB9W11cbiAgb3ZlcnJpZGVBY2Nlc3M6IGJvb2xlYW5cbiAgcG9saWNpZXM/OiBFbnRpdHlQb2xpY2llc1xuICByZXE6IFBheWxvYWRSZXF1ZXN0XG4gIHZlcnNpb25GaWVsZHM/OiBGaWVsZFtdXG4gIHdoZXJlOiBXaGVyZVxufSAmIChcbiAgfCB7XG4gICAgICBjb2xsZWN0aW9uQ29uZmlnOiBTYW5pdGl6ZWRDb2xsZWN0aW9uQ29uZmlnXG4gICAgICBnbG9iYWxDb25maWc/OiBuZXZlciB8IHVuZGVmaW5lZFxuICAgIH1cbiAgfCB7XG4gICAgICBjb2xsZWN0aW9uQ29uZmlnPzogbmV2ZXIgfCB1bmRlZmluZWRcbiAgICAgIGdsb2JhbENvbmZpZzogU2FuaXRpemVkR2xvYmFsQ29uZmlnXG4gICAgfVxuKVxuXG5jb25zdCBmbGF0dGVuV2hlcmUgPSAocXVlcnk6IFdoZXJlKTogV2hlcmVGaWVsZFtdID0+XG4gIE9iamVjdC5lbnRyaWVzKHF1ZXJ5KS5yZWR1Y2UoKGZsYXR0ZW5lZENvbnN0cmFpbnRzLCBba2V5LCB2YWxdKSA9PiB7XG4gICAgaWYgKChrZXkgPT09ICdhbmQnIHx8IGtleSA9PT0gJ29yJykgJiYgQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gWy4uLmZsYXR0ZW5lZENvbnN0cmFpbnRzLCAuLi52YWwubWFwKChzdWJWYWwpID0+IGZsYXR0ZW5XaGVyZShzdWJWYWwpKV1cbiAgICB9XG5cbiAgICByZXR1cm4gWy4uLmZsYXR0ZW5lZENvbnN0cmFpbnRzLCB7IFtrZXldOiB2YWwgfV1cbiAgfSwgW10pXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2YWxpZGF0ZVF1ZXJ5UGF0aHMoe1xuICBjb2xsZWN0aW9uQ29uZmlnLFxuICBlcnJvcnMgPSBbXSxcbiAgZ2xvYmFsQ29uZmlnLFxuICBvdmVycmlkZUFjY2VzcyxcbiAgcG9saWNpZXMgPSB7XG4gICAgY29sbGVjdGlvbnM6IHt9LFxuICAgIGdsb2JhbHM6IHt9LFxuICB9LFxuICByZXEsXG4gIHZlcnNpb25GaWVsZHMsXG4gIHdoZXJlLFxufTogQXJncyk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBmaWVsZHMgPSBmbGF0dGVuRmllbGRzKFxuICAgIHZlcnNpb25GaWVsZHMgfHwgKGdsb2JhbENvbmZpZyB8fCBjb2xsZWN0aW9uQ29uZmlnKS5maWVsZHMsXG4gICkgYXMgRmllbGRBZmZlY3RpbmdEYXRhW11cbiAgaWYgKHR5cGVvZiB3aGVyZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB3aGVyZUZpZWxkcyA9IGZsYXR0ZW5XaGVyZSh3aGVyZSlcbiAgICAvLyBXZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgd2hlcmVLZXkgaXMgYW4gQU5ELCBPUiwgb3IgYSBzY2hlbWEgcGF0aFxuICAgIGNvbnN0IHByb21pc2VzID0gW11cbiAgICB3aGVyZUZpZWxkcy5tYXAoYXN5bmMgKGNvbnN0cmFpbnQpID0+IHtcbiAgICAgIE9iamVjdC5rZXlzKGNvbnN0cmFpbnQpLm1hcChhc3luYyAocGF0aCkgPT4ge1xuICAgICAgICBPYmplY3QuZW50cmllcyhjb25zdHJhaW50W3BhdGhdKS5tYXAoYXN5bmMgKFtvcGVyYXRvciwgdmFsXSkgPT4ge1xuICAgICAgICAgIGlmICh2YWxpZE9wZXJhdG9ycy5pbmNsdWRlcyhvcGVyYXRvciBhcyBPcGVyYXRvcikpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goXG4gICAgICAgICAgICAgIHZhbGlkYXRlU2VhcmNoUGFyYW0oe1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Db25maWc6IGRlZXBDb3B5T2JqZWN0KGNvbGxlY3Rpb25Db25maWcpLFxuICAgICAgICAgICAgICAgIGVycm9ycyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6IGZpZWxkcyBhcyBGaWVsZFtdLFxuICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZzogZGVlcENvcHlPYmplY3QoZ2xvYmFsQ29uZmlnKSxcbiAgICAgICAgICAgICAgICBvcGVyYXRvcixcbiAgICAgICAgICAgICAgICBvdmVycmlkZUFjY2VzcyxcbiAgICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICAgIHBvbGljaWVzLFxuICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICAgICAgdmVyc2lvbkZpZWxkcyxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKVxuICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IFF1ZXJ5RXJyb3IoZXJyb3JzKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInZhbGlkYXRlUXVlcnlQYXRocyIsImZsYXR0ZW5XaGVyZSIsInF1ZXJ5IiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsImZsYXR0ZW5lZENvbnN0cmFpbnRzIiwia2V5IiwidmFsIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwic3ViVmFsIiwiY29sbGVjdGlvbkNvbmZpZyIsImVycm9ycyIsImdsb2JhbENvbmZpZyIsIm92ZXJyaWRlQWNjZXNzIiwicG9saWNpZXMiLCJjb2xsZWN0aW9ucyIsImdsb2JhbHMiLCJyZXEiLCJ2ZXJzaW9uRmllbGRzIiwid2hlcmUiLCJmaWVsZHMiLCJmbGF0dGVuRmllbGRzIiwid2hlcmVGaWVsZHMiLCJwcm9taXNlcyIsImNvbnN0cmFpbnQiLCJrZXlzIiwicGF0aCIsIm9wZXJhdG9yIiwidmFsaWRPcGVyYXRvcnMiLCJpbmNsdWRlcyIsInB1c2giLCJ2YWxpZGF0ZVNlYXJjaFBhcmFtIiwiZGVlcENvcHlPYmplY3QiLCJQcm9taXNlIiwiYWxsIiwibGVuZ3RoIiwiUXVlcnlFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDOzs7OytCQXlDakJBOzs7ZUFBQUE7OzttRUFqQ0M7MkJBQ1E7Z0NBQ0E7OEVBQ0w7c0NBQ1U7Ozs7OztBQW9CcEMsTUFBTUMsZUFBZSxDQUFDQyxRQUNwQkMsT0FBT0MsT0FBTyxDQUFDRixPQUFPRyxNQUFNLENBQUMsQ0FBQ0Msc0JBQXNCLENBQUNDLEtBQUtDLElBQUk7UUFDNUQsSUFBSSxBQUFDRCxDQUFBQSxRQUFRLFNBQVNBLFFBQVEsSUFBRyxLQUFNRSxNQUFNQyxPQUFPLENBQUNGLE1BQU07WUFDekQsT0FBTzttQkFBSUY7bUJBQXlCRSxJQUFJRyxHQUFHLENBQUMsQ0FBQ0MsU0FBV1gsYUFBYVc7YUFBUztRQUNoRjtRQUVBLE9BQU87ZUFBSU47WUFBc0I7Z0JBQUUsQ0FBQ0MsSUFBSSxFQUFFQztZQUFJO1NBQUU7SUFDbEQsR0FBRyxFQUFFO0FBRUEsZUFBZVIsbUJBQW1CLEVBQ3ZDYSxnQkFBZ0IsRUFDaEJDLFNBQVMsRUFBRSxFQUNYQyxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsV0FBVztJQUNUQyxhQUFhLENBQUM7SUFDZEMsU0FBUyxDQUFDO0FBQ1osQ0FBQyxFQUNEQyxHQUFHLEVBQ0hDLGFBQWEsRUFDYkMsS0FBSyxFQUNBO0lBQ0wsTUFBTUMsU0FBU0MsSUFBQUEsOEJBQWEsRUFDMUJILGlCQUFpQixBQUFDTixDQUFBQSxnQkFBZ0JGLGdCQUFlLEVBQUdVLE1BQU07SUFFNUQsSUFBSSxPQUFPRCxVQUFVLFVBQVU7UUFDN0IsTUFBTUcsY0FBY3hCLGFBQWFxQjtRQUNqQyx1RUFBdUU7UUFDdkUsTUFBTUksV0FBVyxFQUFFO1FBQ25CRCxZQUFZZCxHQUFHLENBQUMsT0FBT2dCO1lBQ3JCeEIsT0FBT3lCLElBQUksQ0FBQ0QsWUFBWWhCLEdBQUcsQ0FBQyxPQUFPa0I7Z0JBQ2pDMUIsT0FBT0MsT0FBTyxDQUFDdUIsVUFBVSxDQUFDRSxLQUFLLEVBQUVsQixHQUFHLENBQUMsT0FBTyxDQUFDbUIsVUFBVXRCLElBQUk7b0JBQ3pELElBQUl1Qix5QkFBYyxDQUFDQyxRQUFRLENBQUNGLFdBQXVCO3dCQUNqREosU0FBU08sSUFBSSxDQUNYQyxJQUFBQSx5Q0FBbUIsRUFBQzs0QkFDbEJyQixrQkFBa0JzQixJQUFBQSw4QkFBYyxFQUFDdEI7NEJBQ2pDQzs0QkFDQVMsUUFBUUE7NEJBQ1JSLGNBQWNvQixJQUFBQSw4QkFBYyxFQUFDcEI7NEJBQzdCZTs0QkFDQWQ7NEJBQ0FhOzRCQUNBWjs0QkFDQUc7NEJBQ0FaOzRCQUNBYTt3QkFDRjtvQkFFSjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQSxNQUFNZSxRQUFRQyxHQUFHLENBQUNYO1FBQ2xCLElBQUlaLE9BQU93QixNQUFNLEdBQUcsR0FBRztZQUNyQixNQUFNLElBQUlDLG1CQUFVLENBQUN6QjtRQUN2QjtJQUNGO0FBQ0YifQ==