"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    withMergedProps: function() {
        return _WithMergedProps.withMergedProps;
    },
    extractTranslations: function() {
        return _extractTranslations.extractTranslations;
    },
    i18nInit: function() {
        return _init.i18nInit;
    },
    combineMerge: function() {
        return _combineMerge.combineMerge;
    },
    configToJSONSchema: function() {
        return _configToJSONSchema.configToJSONSchema;
    },
    entityToJSONSchema: function() {
        return _configToJSONSchema.entityToJSONSchema;
    },
    createArrayFromCommaDelineated: function() {
        return _createArrayFromCommaDelineated.createArrayFromCommaDelineated;
    },
    deepCopyObject: function() {
        return _deepCopyObject.deepCopyObject;
    },
    deepMerge: function() {
        return _deepMerge.deepMerge;
    },
    fieldSchemaToJSON: function() {
        return _fieldSchemaToJSON.fieldSchemaToJSON;
    },
    flattenTopLevelFields: function() {
        return _flattenTopLevelFields.default;
    },
    formatLabels: function() {
        return _formatLabels.formatLabels;
    },
    formatNames: function() {
        return _formatLabels.formatNames;
    },
    toWords: function() {
        return _formatLabels.toWords;
    },
    getIDType: function() {
        return _getIDType.getIDType;
    },
    getTranslation: function() {
        return _getTranslation.getTranslation;
    },
    isValidID: function() {
        return _isValidID.isValidID;
    }
});
const _WithMergedProps = require("./dist/admin/components/utilities/WithMergedProps");
const _extractTranslations = require("./dist/translations/extractTranslations");
const _init = require("./dist/translations/init");
const _combineMerge = require("./dist/utilities/combineMerge");
const _configToJSONSchema = require("./dist/utilities/configToJSONSchema");
const _createArrayFromCommaDelineated = require("./dist/utilities/createArrayFromCommaDelineated");
const _deepCopyObject = require("./dist/utilities/deepCopyObject");
const _deepMerge = require("./dist/utilities/deepMerge");
const _fieldSchemaToJSON = require("./dist/utilities/fieldSchemaToJSON");
const _flattenTopLevelFields = /*#__PURE__*/ _interop_require_default(require("./dist/utilities/flattenTopLevelFields"));
const _formatLabels = require("./dist/utilities/formatLabels");
const _getIDType = require("./dist/utilities/getIDType");
const _getTranslation = require("./dist/utilities/getTranslation");
const _isValidID = require("./dist/utilities/isValidID");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRzL3V0aWxpdGllcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyB3aXRoTWVyZ2VkUHJvcHMgfSBmcm9tICcuLi9hZG1pbi9jb21wb25lbnRzL3V0aWxpdGllcy9XaXRoTWVyZ2VkUHJvcHMnXG5leHBvcnQgeyBleHRyYWN0VHJhbnNsYXRpb25zIH0gZnJvbSAnLi4vdHJhbnNsYXRpb25zL2V4dHJhY3RUcmFuc2xhdGlvbnMnXG5cbmV4cG9ydCB7IGkxOG5Jbml0IH0gZnJvbSAnLi4vdHJhbnNsYXRpb25zL2luaXQnXG5leHBvcnQgeyBjb21iaW5lTWVyZ2UgfSBmcm9tICcuLi91dGlsaXRpZXMvY29tYmluZU1lcmdlJ1xuZXhwb3J0IHsgY29uZmlnVG9KU09OU2NoZW1hLCBlbnRpdHlUb0pTT05TY2hlbWEgfSBmcm9tICcuLi91dGlsaXRpZXMvY29uZmlnVG9KU09OU2NoZW1hJ1xuXG5leHBvcnQgeyBjcmVhdGVBcnJheUZyb21Db21tYURlbGluZWF0ZWQgfSBmcm9tICcuLi91dGlsaXRpZXMvY3JlYXRlQXJyYXlGcm9tQ29tbWFEZWxpbmVhdGVkJ1xuZXhwb3J0IHsgZGVlcENvcHlPYmplY3QgfSBmcm9tICcuLi91dGlsaXRpZXMvZGVlcENvcHlPYmplY3QnXG5cbmV4cG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJy4uL3V0aWxpdGllcy9kZWVwTWVyZ2UnXG5leHBvcnQgeyBmaWVsZFNjaGVtYVRvSlNPTiB9IGZyb20gJy4uL3V0aWxpdGllcy9maWVsZFNjaGVtYVRvSlNPTidcbmV4cG9ydCB7IGRlZmF1bHQgYXMgZmxhdHRlblRvcExldmVsRmllbGRzIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2ZsYXR0ZW5Ub3BMZXZlbEZpZWxkcydcbmV4cG9ydCB7IGZvcm1hdExhYmVscywgZm9ybWF0TmFtZXMsIHRvV29yZHMgfSBmcm9tICcuLi91dGlsaXRpZXMvZm9ybWF0TGFiZWxzJ1xuZXhwb3J0IHsgZ2V0SURUeXBlIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2dldElEVHlwZSdcbmV4cG9ydCB7IGdldFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2dldFRyYW5zbGF0aW9uJ1xuZXhwb3J0IHsgaXNWYWxpZElEIH0gZnJvbSAnLi4vdXRpbGl0aWVzL2lzVmFsaWRJRCdcbiJdLCJuYW1lcyI6WyJ3aXRoTWVyZ2VkUHJvcHMiLCJleHRyYWN0VHJhbnNsYXRpb25zIiwiaTE4bkluaXQiLCJjb21iaW5lTWVyZ2UiLCJjb25maWdUb0pTT05TY2hlbWEiLCJlbnRpdHlUb0pTT05TY2hlbWEiLCJjcmVhdGVBcnJheUZyb21Db21tYURlbGluZWF0ZWQiLCJkZWVwQ29weU9iamVjdCIsImRlZXBNZXJnZSIsImZpZWxkU2NoZW1hVG9KU09OIiwiZmxhdHRlblRvcExldmVsRmllbGRzIiwiZm9ybWF0TGFiZWxzIiwiZm9ybWF0TmFtZXMiLCJ0b1dvcmRzIiwiZ2V0SURUeXBlIiwiZ2V0VHJhbnNsYXRpb24iLCJpc1ZhbGlkSUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBQVNBLGVBQWU7ZUFBZkEsZ0NBQWU7O0lBQ2ZDLG1CQUFtQjtlQUFuQkEsd0NBQW1COztJQUVuQkMsUUFBUTtlQUFSQSxjQUFROztJQUNSQyxZQUFZO2VBQVpBLDBCQUFZOztJQUNaQyxrQkFBa0I7ZUFBbEJBLHNDQUFrQjs7SUFBRUMsa0JBQWtCO2VBQWxCQSxzQ0FBa0I7O0lBRXRDQyw4QkFBOEI7ZUFBOUJBLDhEQUE4Qjs7SUFDOUJDLGNBQWM7ZUFBZEEsOEJBQWM7O0lBRWRDLFNBQVM7ZUFBVEEsb0JBQVM7O0lBQ1RDLGlCQUFpQjtlQUFqQkEsb0NBQWlCOztJQUNOQyxxQkFBcUI7ZUFBckJBLDhCQUFxQjs7SUFDaENDLFlBQVk7ZUFBWkEsMEJBQVk7O0lBQUVDLFdBQVc7ZUFBWEEseUJBQVc7O0lBQUVDLE9BQU87ZUFBUEEscUJBQU87O0lBQ2xDQyxTQUFTO2VBQVRBLG9CQUFTOztJQUNUQyxjQUFjO2VBQWRBLDhCQUFjOztJQUNkQyxTQUFTO2VBQVRBLG9CQUFTOzs7aUNBaEJjO3FDQUNJO3NCQUVYOzhCQUNJO29DQUMwQjtnREFFUjtnQ0FDaEI7MkJBRUw7bUNBQ1E7OEVBQ2U7OEJBQ0U7MkJBQ3pCO2dDQUNLOzJCQUNMIn0=